{
  "id": "tutorial/toh-pt2",
  "title": "主从结构",
  "contents": "<h1 translation-result=\"\" id=\"主从结构\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#主从结构\"><i class=\"material-icons\">link</i></a>主从结构</h1>\n\n<div class=\"content\">\n<p translation-origin=\"off\">In this page, you'll expand the Tour of Heroes app to display a list of heroes, and\nallow users to select a hero and display the hero's details.</p>\n<p translation-result=\"\">我们需要管理多个英雄。我们将扩展《英雄指南》应用，让它显示一个英雄列表，\n允许用户选择一个英雄，查看该英雄的详细信息。</p>\n<p translation-origin=\"off\">When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">当我们完成本章时，应用应该是这样的：<live-example></live-example>。</p>\n<h2 translation-origin=\"off\" id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<h2 translation-result=\"\" id=\"延续上一步教程\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#延续上一步教程\"><i class=\"material-icons\">link</i></a>延续上一步教程</h2>\n<p translation-origin=\"off\">Before you continue with this page of the Tour of Heroes,\nverify that you have the following structure after <a href=\"tutorial/toh-pt1\">The Hero Editor</a> page.\nIf your structure doesn't match, go back to that page to figure out what you missed.</p>\n<p translation-result=\"\">在继续《英雄指南》的第二部分之前，先来检查一下，完成<a href=\"tutorial/toh-pt1\">第一部分</a>之后，你是否已经有了如下目录结构。如果没有，你得先回到第一部分，看看错过了哪里。</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<h2 translation-origin=\"off\" id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<h2 translation-result=\"\" id=\"让应用代码保持转译和运行\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#让应用代码保持转译和运行\"><i class=\"material-icons\">link</i></a>让应用代码保持转译和运行</h2>\n<p translation-origin=\"off\">Enter the following command in the terminal window:</p>\n<p translation-result=\"\">在控制台中敲下列命令：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p translation-origin=\"off\">This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p translation-result=\"\">这个命令会在“监听”模式下运行TypeScript编译器，当代码变化时，它会自动重新编译。\n同时，该命令还会在浏览器中启动该应用，并且当代码变化时刷新浏览器。</p>\n<p translation-origin=\"off\">You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<p translation-result=\"\">在后续构建《英雄指南》过程中，应用能持续运行，而不用中断服务来编译或刷新浏览器。</p>\n<h2 translation-origin=\"off\" id=\"displaying-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a>Displaying heroes</h2>\n<h2 translation-result=\"\" id=\"显示我们的英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#显示我们的英雄\"><i class=\"material-icons\">link</i></a>显示我们的英雄</h2>\n<p translation-origin=\"off\">To display a list of heroes, you'll add heroes to the view's template.</p>\n<p translation-result=\"\">要显示英雄列表，我们就要先往视图模板中添加一些英雄。</p>\n<h3 translation-origin=\"off\" id=\"create-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-heroes\"><i class=\"material-icons\">link</i></a>Create heroes</h3>\n<h3 translation-result=\"\" id=\"创建英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#创建英雄\"><i class=\"material-icons\">link</i></a>创建英雄</h3>\n<p translation-origin=\"off\">Create an array of ten heroes.</p>\n<p translation-result=\"\">我们先创建一个由十位英雄组成的数组。</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"hero-array\" title=\"src/app/app.component.ts (hero array)\">\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n</code-example>\n<p translation-origin=\"off\">The <code>HEROES</code> array is of type <code>Hero</code>, the class defined in the previous page.\nEventually this app will fetch the list of heroes from a web service, but for now\nyou can display mock heroes.</p>\n<p translation-result=\"\"><code>HEROES</code>是一个由<code>Hero</code>类的实例构成的数组，我们在第一部分定义过它。\n我们当然希望从一个 Web 服务中获取这个英雄列表，但别急，我们得把步子迈得小一点，先用一组模拟出来的英雄。</p>\n<h3 translation-origin=\"off\" id=\"expose-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#expose-heroes\"><i class=\"material-icons\">link</i></a>Expose heroes</h3>\n<h3 translation-result=\"\" id=\"暴露英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#暴露英雄\"><i class=\"material-icons\">link</i></a>暴露英雄</h3>\n<p translation-origin=\"off\">Create a public property in <code>AppComponent</code> that exposes the heroes for binding.</p>\n<p translation-result=\"\">我们在<code>AppComponent</code>上创建一个公共属性，用来暴露这些英雄，以供绑定。</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"hero-array-1\" title=\"app.component.ts (hero array property)\">\nheroes = HEROES;\n\n</code-example>\n<p translation-origin=\"off\">The <code>heroes</code> type isn't defined because TypeScript infers it from the <code>HEROES</code> array.</p>\n<p translation-result=\"\">我们并不需要明确定义<code>heroes</code>属性的数据类型，TypeScript 能从<code>HEROES</code>数组中推断出来。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">The hero data is separated from the class implementation\nbecause ultimately the hero names will come from a data service.</p>\n<p translation-result=\"\">英雄的数据从实现类中分离了出来，因为最终，英雄的名字会来自一个数据服务。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"display-hero-names-in-a-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-hero-names-in-a-template\"><i class=\"material-icons\">link</i></a>Display hero names in a template</h3>\n<h3 translation-result=\"\" id=\"在模板中显示英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#在模板中显示英雄\"><i class=\"material-icons\">link</i></a>在模板中显示英雄</h3>\n<p translation-origin=\"off\">To display the hero names in an unordered list,\ninsert the following chunk of HTML below the title and above the hero details.</p>\n<p translation-result=\"\">我们还要在模板中创建一个无序列表来显示这些英雄的名字。\n那就在标题和英雄详情之间，插入下面这段 HTML 代码。</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"heroes-template-1\" title=\"app.component.ts (heroes template)\" linenums=\"false\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li>\n    &#x3C;!-- each hero goes here -->\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p translation-origin=\"off\">Now you can fill the template with hero names.</p>\n<p translation-result=\"\">现在，我们有了一个模板。接下来，就用英雄们的数据来填充它。</p>\n<h3 translation-origin=\"off\" id=\"list-heroes-with-ngfor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#list-heroes-with-ngfor\"><i class=\"material-icons\">link</i></a>List heroes with ngFor</h3>\n<h3 translation-result=\"\" id=\"通过-ngfor-来显示英雄列表\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#通过-ngfor-来显示英雄列表\"><i class=\"material-icons\">link</i></a>通过 ngFor 来显示英雄列表</h3>\n<p translation-origin=\"off\">The goal is to bind the array of heroes in the component to the template, iterate over them,\nand display them individually.</p>\n<p translation-result=\"\">我们想要把组件中的<code>heroes</code>数组绑定到模板中，迭代并逐个显示它们。</p>\n<p translation-origin=\"off\">Modify the <code>&#x3C;li></code> tag by adding the built-in directive <code>*ngFor</code>.</p>\n<p translation-result=\"\">首先，修改<code>&#x3C;li></code>标签，往上添加内置指令<code>*ngFor</code>。</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"heroes-ngfor-1\" title=\"app.component.ts (ngFor)\">\n&#x3C;li *ngFor=\"let hero of heroes\">\n\n</code-example>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">The (<code>*</code>) prefix to <code>ngFor</code> is a critical part of this syntax.\nIt indicates that the <code>&#x3C;li></code> element and its children\nconstitute a master template.</p>\n<p translation-result=\"\"><code>ngFor</code>的<code>*</code>前缀表示<code>&#x3C;li></code>及其子元素组成了一个主控模板。</p>\n<p translation-origin=\"off\">The <code>ngFor</code> directive iterates over the component's <code>heroes</code> array\nand renders an instance of this template for each hero in that array.</p>\n<p translation-result=\"\"><code>ngFor</code>指令在<code>AppComponent.heroes</code>属性返回的<code>heroes</code>数组上迭代，并输出此模板的实例。</p>\n<p translation-origin=\"off\">The <code>let hero</code> part of the expression identifies <code>hero</code> as the  template input variable,\nwhich holds the current hero item for each iteration.\nYou can reference this variable within the template to access the current hero's properties.</p>\n<p translation-result=\"\">引号中赋值给<code>ngFor</code>的那段文本表示“<em>从<code>heroes</code>数组中取出每个英雄，存入一个局部的<code>hero</code>变量，并让它在相应的模板实例中可用</em>”。</p>\n<p translation-origin=\"off\">Read more about <code>ngFor</code> and template input variables in the\n<a href=\"guide/displaying-data#ngFor\">Showing an array property with *ngFor</a> section of the\n<a href=\"guide/displaying-data\">Displaying Data</a> page and the\n<a href=\"guide/template-syntax#ngFor\">ngFor</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<p translation-result=\"\">要学习更多关于<code>ngFor</code>和模板输入变量的知识，参见<a href=\"guide/displaying-data\">显示数据</a>一章的<a href=\"guide/displaying-data#ngFor\">用*ngFor显示数组属性</a>和\n<a href=\"guide/template-syntax\">模板语法</a>章的<a href=\"guide/template-syntax#ngFor\">ngFor</a>。</p>\n</div>\n<p translation-origin=\"off\">Within the <code>&#x3C;li></code> tags, add content\nthat uses the <code>hero</code> template variable to display the hero's properties.</p>\n<p translation-result=\"\">接着，我们在<code>&#x3C;li></code>标签中插入一些内容，以便使用模板变量<code>hero</code>来显示英雄的属性。</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"ng-for\" title=\"app.component.ts (ngFor template)\" linenums=\"false\">\n&#x3C;li *ngFor=\"let hero of heroes\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n&#x3C;/li>\n\n</code-example>\n<p translation-origin=\"off\">When the browser refreshes, a list of heroes appears.</p>\n<p translation-result=\"\">当浏览器刷新时，我们就看到了英雄列表。</p>\n<h3 translation-origin=\"off\" id=\"style-the-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a>Style the heroes</h3>\n<h3 translation-result=\"\" id=\"给我们的英雄们美容\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#给我们的英雄们美容\"><i class=\"material-icons\">link</i></a>给我们的英雄们“美容”</h3>\n<p translation-origin=\"off\">Users should get a visual cue of which hero they are hovering over and which hero is selected.</p>\n<p translation-result=\"\">当用户的鼠标划过英雄或选中一个英雄时，我们得让他/她看起来醒目一点。</p>\n<p translation-origin=\"off\">To add styles to your component, set the <code>styles</code> property on the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator\nto the following CSS classes:</p>\n<p translation-result=\"\">要想给我们的组件添加一些样式，请把<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>装饰器的<code>styles</code>属性设置为下列 CSS 类：</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"styles\" title=\"src/app/app.component.ts (styles)\" linenums=\"false\">\nstyles: [`\n  .selected {\n    background-color: #CFD8DC !important;\n    color: white;\n  }\n  .heroes {\n    margin: 0 0 2em 0;\n    list-style-type: none;\n    padding: 0;\n    width: 15em;\n  }\n  .heroes li {\n    cursor: pointer;\n    position: relative;\n    left: 0;\n    background-color: #EEE;\n    margin: .5em;\n    padding: .3em 0;\n    height: 1.6em;\n    border-radius: 4px;\n  }\n  .heroes li.selected:hover {\n    background-color: #BBD8DC !important;\n    color: white;\n  }\n  .heroes li:hover {\n    color: #607D8B;\n    background-color: #DDD;\n    left: .1em;\n  }\n  .heroes .text {\n    position: relative;\n    top: -3px;\n  }\n  .heroes .badge {\n    display: inline-block;\n    font-size: small;\n    color: white;\n    padding: 0.8em 0.7em 0 0.7em;\n    background-color: #607D8B;\n    line-height: 1em;\n    position: relative;\n    left: -1px;\n    top: -4px;\n    height: 1.8em;\n    margin-right: .8em;\n    border-radius: 4px 0 0 4px;\n  }\n`]\n\n</code-example>\n<p translation-origin=\"off\">Remember to use the backtick notation for multi-line strings.</p>\n<p translation-result=\"\">注意，我们又使用了反引号语法来书写多行字符串。</p>\n<p translation-origin=\"off\">Adding these styles makes the file much longer. In a later page you'll move the styles to a separate file.</p>\n<p translation-result=\"\">添加这些样式会让此文件变得更长。在后面的章节中，我们将会把这些样式移到单独的文件中去。</p>\n<p translation-origin=\"off\">When you assign styles to a component, they are scoped to that specific component.\nThese styles apply only to the <code>AppComponent</code> and don't affect the outer HTML.</p>\n<p translation-result=\"\">当我们为一个组件指定样式时，它们的作用域将仅限于该组件。\n上面的例子中，这些样式只会作用于<code>AppComponent</code>组件，而不会“泄露”到外部 HTML 中。</p>\n<p translation-origin=\"off\">The template for displaying heroes should look like this:</p>\n<p translation-result=\"\">用于显示英雄们的模板应该是这样的：</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"heroes-styled\" title=\"src/app/app.component.ts (styled heroes)\" linenums=\"false\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *ngFor=\"let hero of heroes\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"selecting-a-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#selecting-a-hero\"><i class=\"material-icons\">link</i></a>Selecting a hero</h2>\n<h2 translation-result=\"\" id=\"选择英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#选择英雄\"><i class=\"material-icons\">link</i></a>选择英雄</h2>\n<p translation-origin=\"off\">The app now displays a list of heroes as well as a single hero in the details view. But\nthe list and the details view are not connected.\nWhen users select a hero from the list, the selected hero should appear in the details view.\nThis UI pattern is known as \"master/detail.\"\nIn this case, the <em>master</em> is the heroes list and the <em>detail</em> is the selected hero.</p>\n<p translation-result=\"\">我们的应用已经有了英雄列表和单个英雄的详情视图。\n但列表和单独的英雄之间还没有任何关联。\n我们希望用户在列表中选中一个英雄，然后让这个被选中的英雄出现在详情视图中。\n这种 UI 布局模式，通常被称为“主从结构”。\n在这个例子中，主视图是英雄列表，从视图则是被选中的英雄。</p>\n<p translation-origin=\"off\">Next you'll connect the master to the detail through a <code>selectedHero</code> component property,\nwhich is bound to a click event.</p>\n<p translation-result=\"\">接下来，我们要通过组件中的一个<code>selectedHero</code>属性来连接主从视图，它被绑定到了点击事件上。</p>\n<h3 translation-origin=\"off\" id=\"handle-click-events\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#handle-click-events\"><i class=\"material-icons\">link</i></a>Handle click events</h3>\n<h3 translation-result=\"\" id=\"处理点击事件\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#处理点击事件\"><i class=\"material-icons\">link</i></a>处理点击事件</h3>\n<p translation-origin=\"off\">Add a click event binding to the <code>&#x3C;li></code> like this:</p>\n<p translation-result=\"\">我们再往<code>&#x3C;li></code>元素上插入一句点击事件的绑定代码：  </p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"selectedHero-click\" title=\"app.component.ts (template excerpt)\" linenums=\"false\">\n&#x3C;li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n  ...\n&#x3C;/li>\n\n</code-example>\n<p translation-origin=\"off\">The parentheses identify the <code>&#x3C;li></code> element's  <code>click</code> event as the target.\nThe <code>onSelect(hero)</code> expression calls the  <code>AppComponent</code> method, <code>onSelect()</code>,\npassing the template input variable <code>hero</code>, as an argument.\nThat's the same <code>hero</code> variable you defined previously in the <code>ngFor</code> directive.</p>\n<p translation-result=\"\">圆括号标识<code>&#x3C;li></code>元素上的<code>click</code>事件是绑定的目标。\n等号右边的<code>onSelect(hero)</code>表达式调用<code>AppComponent</code>的<code>onSelect()</code>方法，并把模板输入变量<code>hero</code>作为参数传进去。\n它是我们前面在<code>ngFor</code>指令中定义的那个<code>hero</code>变量。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Learn more about event binding at the\n<a href=\"guide/user-input\">User Input</a> page and the\n<a href=\"guide/template-syntax#event-binding\">Event binding</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<p translation-result=\"\">关于事件绑定的更多内容，参见：\n<a href=\"guide/user-input\">用户输入</a>页 和\n<a href=\"guide/template-syntax\">模板语法</a>页的<a href=\"guide/template-syntax#event-binding\">事件绑定</a>节。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"add-a-click-handler-to-expose-the-selected-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-handler-to-expose-the-selected-hero\"><i class=\"material-icons\">link</i></a>Add a click handler to expose the selected hero</h3>\n<h3 translation-result=\"\" id=\"添加点击处理器以暴露选中的英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#添加点击处理器以暴露选中的英雄\"><i class=\"material-icons\">link</i></a>添加点击处理器以暴露选中的英雄</h3>\n<p translation-origin=\"off\">You no longer need the <code>hero</code> property because you're no longer displaying a single hero; you're displaying a list of heroes.\nBut the user will be able to select one of the heroes by clicking on it.\nSo replace the <code>hero</code> property with this simple <code>selectedHero</code> property:</p>\n<p translation-result=\"\">我们不再需要<code>AppComponent</code>的<code>hero</code>属性，因为不需要再显示单个的英雄，我们只需要显示英雄列表。但是用户可以点选一个英雄。\n所以我们要把<code>hero</code>属性<strong>替换</strong>成<code>selectedHero</code>属性。</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"selected-hero\" title=\"src/app/app.component.ts (selectedHero)\">\nselectedHero: Hero;\n\n</code-example>\n<p translation-origin=\"off\">The hero names should all be unselected before the user picks a hero, so\nyou won't initialize the <code>selectedHero</code> as you did with <code>hero</code>.</p>\n<p translation-result=\"\">在用户选取一个英雄之前，所有的英雄名字都应该是未选中的。所以我们不希望像<code>hero</code>一样初始化<code>selectedHero</code>变量。</p>\n<p translation-origin=\"off\">Add an <code>onSelect()</code> method that sets the <code>selectedHero</code> property to the <code>hero</code> that the user clicks.</p>\n<p translation-result=\"\">现在，<strong>添加一个<code>onSelect</code>方法</strong>，用于将用户点击的英雄赋给<code>selectedHero</code>属性。</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"on-select\" title=\"src/app/app.component.ts (onSelect)\" linenums=\"false\">\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<p translation-origin=\"off\">The template still refers to the old <code>hero</code> property.\nBind to the new <code>selectedHero</code> property instead as follows:</p>\n<p translation-result=\"\">我们将把所选英雄的详细信息显示在模板中。目前，它仍然引用之前的<code>hero</code>属性。\n我们这就修改模板，让它绑定到新的<code>selectedHero</code>属性。  </p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"selectedHero-details\" title=\"app.component.ts (template excerpt)\" linenums=\"false\">\n&#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n&#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n&#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n&#x3C;/div>\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"hide-the-empty-detail-with-ngif\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#hide-the-empty-detail-with-ngif\"><i class=\"material-icons\">link</i></a>Hide the empty detail with ngIf</h3>\n<h3 translation-result=\"\" id=\"使用-ngif-隐藏空的详情\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#使用-ngif-隐藏空的详情\"><i class=\"material-icons\">link</i></a>使用 ngIf 隐藏空的详情</h3>\n<p translation-origin=\"off\">When the app loads, <code>selectedHero</code> is undefined.\nThe selected hero is initialized when the user clicks a hero's name.\nAngular can't display properties of the undefined <code>selectedHero</code> and throws the following error,\nvisible in the browser's console:</p>\n<p translation-result=\"\">当应用加载时，我们会看到一个英雄列表，但还没有任何英雄被选中。\n<code>selectedHero</code>属性是<code>undefined</code>。\n因此，我们会看到浏览器控制台中出现下列错误：</p>\n<code-example format=\"nocode\">\n  EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]\n\n</code-example>\n<p translation-origin=\"off\">Although <code>selectedHero.name</code> is displayed in the template,\nyou must keep the hero detail out of the DOM until there is a selected hero.</p>\n<p translation-result=\"\">虽然我们要在模板中显示的是<code>selectedHero.name</code>，但在选中了一个英雄之前，我们必须让这些英雄详情留在DOM之外。</p>\n<p translation-origin=\"off\">Wrap the HTML hero detail content of the template with a <code>&#x3C;div></code>.\nThen add the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> built-in directive and set it to the <code>selectedHero</code> property of the component.</p>\n<p translation-result=\"\">我们可以把模板中的英雄详情内容区放在一个<code>&#x3C;div></code>中。\n然后，添加一个<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>内置指令，把<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>的值设置为组件的<code>selectedHero</code>属性。</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"ng-if\" title=\"src/app/app.component.ts (ngIf)\" linenums=\"false\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n  &#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-critical\">\n<p translation-origin=\"off\">Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>.</p>\n<p translation-result=\"\">别忘了<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>前的星号 (<code>*</code>)。</p>\n</div>\n<p translation-origin=\"off\">The app no longer fails and the list of names displays again in the browser.</p>\n<p translation-result=\"\">应用不再出错，而名字列表也再次显示在浏览器中。</p>\n<p translation-origin=\"off\">When there is no selected hero, the <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> directive removes the hero detail HTML from the DOM.\nThere are no hero detail elements or bindings to worry about.</p>\n<p translation-result=\"\">当没有选中英雄时，<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>指令会从 DOM 中移除表示英雄详情的这段 HTML 。\n没有了表示英雄详情的元素，也就不用担心绑定问题。</p>\n<p translation-origin=\"off\">When the user picks a hero, <code>selectedHero</code> becomes defined and\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> puts the hero detail content into the DOM and evaluates the nested bindings.</p>\n<p translation-result=\"\">当用户选取了一个英雄，<code>selectedHero</code>变成了“已定义的”值，于是<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>把英雄详情加回 DOM 中，并计算它所嵌套的各种绑定。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>ngFor</code> in the\n<a href=\"guide/structural-directives\">Structural Directives</a> page and the\n<a href=\"guide/template-syntax#directives\">Built-in directives</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<p translation-result=\"\">要了解更多<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>，<code>ngFor</code>和其它结构型指令的信息，参见\n<a href=\"guide/structural-directives\">结构型指令</a>和\n<a href=\"guide/template-syntax\">模板语法</a>章的<a href=\"guide/template-syntax#directives\">内置指令</a>部分。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"style-the-selected-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a>Style the selected hero</h3>\n<h3 translation-result=\"\" id=\"给所选英雄添加样式\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#给所选英雄添加样式\"><i class=\"material-icons\">link</i></a>给所选英雄添加样式</h3>\n<p translation-origin=\"off\">While the selected hero details appear below the list, it's difficult to identify the selected hero within the list itself.</p>\n<p translation-result=\"\">我们在下面的详情区看到了选中的英雄，但是我们还是没法在上面的列表区快速定位这位英雄。</p>\n<p translation-origin=\"off\">In the <code>styles</code> metadata that you added above, there is a custom CSS class named <code>selected</code>.\nTo make the selected hero more visible, you'll apply this <code>selected</code> class to the <code>&#x3C;li></code> when the user clicks on a hero name.\nFor example, when the user clicks \"Magneta\", it should render with a distinctive but subtle background color\nlike this:</p>\n<p translation-result=\"\">在我们前面添加的<code>styles</code>元数据中，有一个名叫<code>selected</code>的自定义CSS类。\n要想让选中的英雄更加醒目，当用户点击一个英雄名字时，我们要为<code>&#x3C;li></code>添加<code>selected</code>类。\n例如，当用户点击“Magneta”时，它应该使用不一样的醒目的背景色。</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-list-selected.png\" alt=\"选中的英雄\" width=\"165\" height=\"129\">\n</figure>\n<p translation-origin=\"off\">In the template, add the following <code>[class.selected]</code> binding to  the <code>&#x3C;li></code>:</p>\n<p translation-result=\"\">在这个模板中，往<code>&#x3C;li></code>上添加一个<code>[class.selected]</code>绑定：</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"class-selected-1\" title=\"app.component.ts (setting the CSS class)\" linenums=\"false\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p translation-origin=\"off\">When the expression (<code>hero === selectedHero</code>) is <code>true</code>, Angular adds the <code>selected</code> CSS class.\nWhen the expression is <code>false</code>, Angular removes the <code>selected</code> class.</p>\n<p translation-result=\"\">当表达式(<code>hero === selectedHero</code>)为<code>true</code>时，Angular会添加一个CSS类<code>selected</code>。为<code>false</code>时则会移除<code>selected</code>类。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about the <code>[class]</code> binding in the <a href=\"guide/template-syntax#ngClass\" title=\"Template syntax: NgClass\">Template Syntax</a> guide.</p>\n<p translation-result=\"\">关于<code>[class]</code>绑定的更多信息，参见<a href=\"guide/template-syntax#ngClass\" title=\"Template syntax: NgClass\">模板语法</a>。</p>\n</div>\n<p translation-origin=\"off\">The final version of the <code>&#x3C;li></code> looks like this:</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"class-selected-2\" title=\"app.component.ts (styling each hero)\" linenums=\"false\">\n&#x3C;li *ngFor=\"let hero of heroes\"\n  [class.selected]=\"hero === selectedHero\"\n  (click)=\"onSelect(hero)\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n&#x3C;/li>\n\n</code-example>\n<p translation-origin=\"off\">After clicking \"Magneta\", the list should look like this:</p>\n<p translation-result=\"\">浏览器重新加载了我们的应用。\n我们选中英雄 Magneta，通过背景色的变化，它被清晰的标记出来。</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-list-1.png\" alt=\"英雄列表应用的输出\" width=\"220\" height=\"540\">\n</figure>\n<p translation-origin=\"off\">Here's the complete <code>app.component.ts</code> as of now:</p>\n<p translation-result=\"\">完整的<code>app.component.ts</code>文件如下：</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" title=\"src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My Heroes&#x3C;/h2>\n    &#x3C;ul class=\"heroes\">\n      &#x3C;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\">\n        &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n      &#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<h2 translation-result=\"\" id=\"已走的路\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#已走的路\"><i class=\"material-icons\">link</i></a>已走的路</h2>\n<p translation-origin=\"off\">Here's what you achieved in this page:</p>\n<p translation-result=\"\">在本章中，我们完成了以下内容：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">The Tour of Heroes app displays a list of selectable heroes.</p>\n<p translation-result=\"\">我们的《英雄指南》现在显示一个可选英雄的列表</p>\n</li>\n<li>\n<p translation-origin=\"off\">You added the ability to select a hero and show the hero's details.</p>\n<p translation-result=\"\">我们可以选择英雄，并显示这个英雄的详情</p>\n</li>\n<li>\n<p translation-origin=\"off\">You learned how to use the built-in directives <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> and <code>ngFor</code> in a component's template.</p>\n<p translation-result=\"\">我们学会了如何在组件模板中使用内置的<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>和<code>ngFor</code>指令</p>\n</li>\n</ul>\n<h2 translation-origin=\"off\" id=\"next-step\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#next-step\"><i class=\"material-icons\">link</i></a>Next step</h2>\n<h2 translation-result=\"\" id=\"下一步\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#下一步\"><i class=\"material-icons\">link</i></a>下一步</h2>\n<p translation-origin=\"off\">You've expanded the Tour of Heroes app, but it's far from complete.\nAn app shouldn't be one monolithic component.\nIn the <a href=\"tutorial/toh-pt3\" title=\"Multiple Components\">next page</a>, you'll split the app into subcomponents and make them work together.</p>\n<p translation-result=\"\">我们的《英雄指南》长大了，但还远远不够完善。\n我们显然不能把整个应用都放进一个组件中。\n我们将在<a href=\"tutorial/toh-pt3\">下一章</a>把它拆分成一系列子组件，然后教它们协同工作。</p>\n\n</div>"
}