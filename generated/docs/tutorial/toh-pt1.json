{
  "id": "tutorial/toh-pt1",
  "title": "英雄编辑器",
  "contents": "<h1 translation-result=\"\" id=\"英雄编辑器\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#英雄编辑器\"><i class=\"material-icons\">link</i></a>英雄编辑器</h1>\n\n<div class=\"content\">\n<div class=\"l-sub-section\">\n<h3 translation-result=\"\" id=\"阅读指南（译者）\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#阅读指南（译者）\"><i class=\"material-icons\">link</i></a>阅读指南（译者）</h3>\n<p translation-result=\"\">对于没有前端基础的同学来说，读本教程的时候可能会遇到一些陌生的名词。不要慌，你可以跳到<a href=\"guide/glossary\">词汇表</a>查找对它的详细解释。</p>\n<p translation-result=\"\">如果想对Angular的概念有一个宏观的了解，请先阅读<a href=\"guide/architecture\">架构概览</a>。</p>\n</div>\n<h2 translation-origin=\"off\" id=\"setup-to-develop-locally\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#setup-to-develop-locally\"><i class=\"material-icons\">link</i></a>Setup to develop locally</h2>\n<h2 translation-result=\"\" id=\"为本地开发搭建环境\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#为本地开发搭建环境\"><i class=\"material-icons\">link</i></a>为本地开发搭建环境</h2>\n<p translation-origin=\"off\">Follow the <a href=\"guide/setup\">setup</a> instructions for creating a new project\nnamed <code>angular-tour-of-heroes</code>.</p>\n<p translation-result=\"\">根据<a href=\"guide/setup\">开发环境</a>中的说明创建一个名为<ngio-ex path=\"angular-tour-of-heroes\"></ngio-ex>的新项目</p>\n<p translation-origin=\"off\">The file structure should look like this:</p>\n<p translation-result=\"\">该项目的文件结构应该是这样的：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p translation-origin=\"off\">When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">在我们完成本章时，得到的应用和这个<live-example></live-example>一样。</p>\n<a id=\"keep-transpiling\"></a>\n<h2 translation-origin=\"off\" id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<h2 translation-result=\"\" id=\"保持应用不断转译和运行\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#保持应用不断转译和运行\"><i class=\"material-icons\">link</i></a>保持应用不断转译和运行</h2>\n<p translation-origin=\"off\">Enter the following command in the terminal window:</p>\n<p translation-result=\"\">在命令行窗口中输入以下命令：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p translation-origin=\"off\">This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p translation-result=\"\">这个命令会在“监听”模式下运行TypeScript编译器，当代码变化时，它会自动重新编译。\n同时，该命令还会在浏览器中启动该应用，并且当代码变化时刷新浏览器。</p>\n<p translation-origin=\"off\">You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<p translation-result=\"\">在后续构建《英雄指南》过程中，应用能持续运行，而不用中断服务来编译或刷新浏览器。</p>\n<h2 translation-origin=\"off\" id=\"show-the-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a>Show the hero</h2>\n<h2 translation-result=\"\" id=\"显示此英雄\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#显示此英雄\"><i class=\"material-icons\">link</i></a>显示此英雄</h2>\n<p translation-origin=\"off\">Add two properties to the <code>AppComponent</code>: a <code>title</code> property for the app name and a <code>hero</code> property\nfor a hero named \"Windstorm.\"</p>\n<p translation-result=\"\">往<code>AppComponent</code>中添加两个属性：<code>title</code>属性用来表示应用的名字，而<code>hero</code>属性用来表示名叫“Windstorm”的英雄。</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"app-component-1\" title=\"app.component.ts (AppComponent class)\" linenums=\"false\">\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero = 'Windstorm';\n}\n\n</code-example>\n<p translation-origin=\"off\">Now update the template in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator with data bindings to these new properties.</p>\n<p translation-result=\"\">下面，更新<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>装饰器中指定的模板，为这些新属性建立数据绑定。</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"show-hero\" title=\"app.component.ts (@Component)\" linenums=\"false\">\ntemplate: `&#x3C;h1>{{title}}&#x3C;/h1>&#x3C;h2>{{hero}} details!&#x3C;/h2>`\n\n</code-example>\n<p translation-origin=\"off\">The browser refreshes and displays the title and hero name.</p>\n<p translation-result=\"\">保存后，浏览器应自动刷新，显示标题和英雄。</p>\n<p translation-origin=\"off\">The double curly braces are Angular's <em>interpolation binding</em> syntax.\nThese interpolation bindings present the component's <code>title</code> and <code>hero</code> property values,\nas strings, inside the HTML header tags.</p>\n<p translation-result=\"\">这里的双大括号是Angular中的<em>插值表达式绑定</em>语法。它们表示组件的<code>title</code>和<code>hero</code>属性的值会作为字符串插入到HTML标签中间。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about interpolation in the <a href=\"guide/displaying-data\">Displaying Data</a> page.</p>\n<p translation-result=\"\">要了解插值表达式的更多知识，见<a href=\"guide/displaying-data\">显示数据</a>。</p>\n</div>\n<h3 translation-origin=\"off\" id=\"hero-object\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#hero-object\"><i class=\"material-icons\">link</i></a>Hero object</h3>\n<h3 translation-result=\"\" id=\"hero-对象\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#hero-对象\"><i class=\"material-icons\">link</i></a>Hero 对象</h3>\n<p translation-origin=\"off\">The hero needs more properties.\nConvert the <code>hero</code> from a literal string to a class.</p>\n<p translation-result=\"\">显然，英雄还需要更多属性。\n让我们把<code>hero</code>从一个字符串字面量换成一个类。</p>\n<p translation-origin=\"off\">Create a <code>Hero</code> class with <code>id</code> and <code>name</code> properties.\nAdd these properties near the top of the <code>app.component.ts</code> file, just below the import statement.</p>\n<p translation-result=\"\">创建一个<code>Hero</code>类，它具有<code>id</code>和<code>name</code>属性。\n现在，把下列代码放在<code>app.component.ts</code>的顶部，仅次于 import 语句。</p>\n<code-example path=\"toh-pt1/src/app/app.component.ts\" region=\"hero-class-1\" title=\"src/app/app.component.ts (Hero class)\" linenums=\"false\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p translation-origin=\"off\">In the <code>AppComponent</code> class, refactor the component's <code>hero</code> property to be of type <code>Hero</code>,\nthen initialize it with an <code>id</code> of <code>1</code> and the name <code>Windstorm</code>.</p>\n<p translation-result=\"\">现在，有了一个<code>Hero</code>类，我们把组件<code>hero</code>属性的类型换成<code>Hero</code>。\n然后以<code>1</code>为 id、以 “Windstorm” 为名字，初始化它。</p>\n<code-example path=\"toh-pt1/src/app/app.component.ts\" region=\"hero-property-1\" title=\"src/app/app.component.ts (hero property)\" linenums=\"false\">\nhero: Hero = {\n  id: 1,\n  name: 'Windstorm'\n};\n\n</code-example>\n<p translation-origin=\"off\">Because you changed the hero from a string to an object,\nupdate the binding in the template to refer to the hero's <code>name</code> property.</p>\n<p translation-result=\"\">我们把<code>hero</code>从一个字符串换成了对象，所以也得更新模板中的绑定表达式，来引用<code>hero</code>的<code>name</code>属性。</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"show-hero-2\" title=\"src/app/app.component.ts\">\ntemplate: `&#x3C;h1>{{title}}&#x3C;/h1>&#x3C;h2>{{hero.name}} details!&#x3C;/h2>`\n\n</code-example>\n<p translation-origin=\"off\">The browser refreshes and continues to display the hero's name.</p>\n<p translation-result=\"\">浏览器自动刷新，并继续显示这位英雄的名字。</p>\n<h3 translation-origin=\"off\" id=\"adding-html-with-multi-line-template-strings\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#adding-html-with-multi-line-template-strings\"><i class=\"material-icons\">link</i></a>Adding HTML with multi-line template strings</h3>\n<h3 translation-result=\"\" id=\"使用多行模板字符串添加更多-html\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#使用多行模板字符串添加更多-html\"><i class=\"material-icons\">link</i></a>使用多行模板字符串添加更多 HTML</h3>\n<p translation-origin=\"off\">To show all of the hero's properties,\nadd a <code>&#x3C;div></code> for the hero's <code>id</code> property and another <code>&#x3C;div></code> for the hero's <code>name</code>.\nTo keep the template readable, place each <code>&#x3C;div></code> on its own line.</p>\n<p translation-result=\"\">要显示英雄的所有属性，还要为英雄的<code>id</code>属性添加一个<code>&#x3C;div></code>，为英雄的<code>name</code>属性添加另一个<code>&#x3C;div></code>。\n为了保持模板的可读性，把每个<code>&#x3C;div></code>单独放一行。</p>\n<p translation-origin=\"off\">The backticks around the component template let you put the <code>&#x3C;h1></code>, <code>&#x3C;h2></code>, and <code>&#x3C;div></code> elements on their own lines,\nthanks to the <i>template literals</i> feature in ES2015 and TypeScript. For more information, see\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" title=\"template literal\">Template literals</a>.</p>\n<p translation-result=\"\">反引号包裹的组件模板能让你把<code>&#x3C;h1></code>、<code>&#x3C;h2></code>和<code>&#x3C;div></code>元素各自放在一行上。\n感谢ES2015和TypeScript的<em>模板字面量</em>特性。要了解更多，请参见<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" title=\"template literal\">模板字面量（Template literals）</a> 页。</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"multi-line-strings\" title=\"app.component.ts (AppComponent&#x27;s template)\" linenums=\"false\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n  &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>&#x3C;label>name: &#x3C;/label>{{hero.name}}&#x3C;/div>\n  `\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"edit-the-hero-name\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero-name\"><i class=\"material-icons\">link</i></a>Edit the hero name</h2>\n<h2 translation-result=\"\" id=\"编辑英雄名字\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#编辑英雄名字\"><i class=\"material-icons\">link</i></a>编辑英雄名字</h2>\n<p translation-origin=\"off\">Users should be able to edit the hero name in an <code>&#x3C;input></code> textbox.\nThe textbox should both <em>display</em> the hero's <code>name</code> property\nand <em>update</em> that property as the user types.</p>\n<p translation-result=\"\">用户应该能在一个<code>&#x3C;input></code>输入框中编辑英雄的名字。\n当用户输入时，这个输入框应该能同时<em>显示</em>和<em>修改</em>英雄的<code>name</code>属性。</p>\n<p translation-origin=\"off\">You need a two-way binding between the <code>&#x3C;input></code> form element and the <code>hero.name</code> property.</p>\n<p translation-result=\"\">也就是说，我们要在表单元素<code>&#x3C;input></code>和组件的<code>hero.name</code>属性之间建立双向绑定。</p>\n<h3 translation-origin=\"off\" id=\"two-way-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a>Two-way binding</h3>\n<h3 translation-result=\"\" id=\"双向绑定\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#双向绑定\"><i class=\"material-icons\">link</i></a>双向绑定</h3>\n<p translation-origin=\"off\">Refactor the hero name in the template so it looks like this:</p>\n<p translation-result=\"\">把模板中的英雄名字重构成这样：</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"name-input\" title=\"src/app/app.component.ts\" linenums=\"false\">\n&#x3C;div>\n  &#x3C;label>name: &#x3C;/label>\n  &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\">\n&#x3C;/div>\n\n</code-example>\n<p translation-origin=\"off\"><code>[(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]</code> is the Angular syntax to bind the <code>hero.name</code> property\nto the textbox.\nData flows <em>in both directions:</em> from the property to the textbox,\nand from the textbox back to the property.</p>\n<p translation-result=\"\"><code>[(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]</code>是一个Angular语法，用与把<code>hero.name</code>绑定到输入框中。\n它的数据流是<em>双向的</em>：从属性到输入框，并且从输入框回到属性。</p>\n<p translation-origin=\"off\">Unfortunately, immediately after this change, the application breaks.\nIf you looked in the browser console, you'd see Angular complaining that\n\"<code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code> ... isn't a known property of <code>input</code>.\"</p>\n<p translation-result=\"\">不幸的是，做了这项改动之后，我们的程序崩溃了。\n打开浏览器的控制台，我们会看到Angular抱怨说：“<code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code> ... isn't a known property of <code>input</code>.”（<code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code>不是<code>input</code>元素的已知属性）</p>\n<p translation-origin=\"off\">Although <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> is a valid Angular directive, it isn't available by default.\nIt belongs to the optional <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>.\nYou must opt-in to using that module.</p>\n<p translation-result=\"\">虽然<code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>是一个有效的Angular指令，但它默认情况下却是不可用的。\n它属于一个可选模块<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。\n我们必须选择使用那个模块。</p>\n<h3 translation-origin=\"off\" id=\"import-the-formsmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#import-the-formsmodule\"><i class=\"material-icons\">link</i></a>Import the <em>FormsModule</em></h3>\n<h3 translation-result=\"\" id=\"导入-formsmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#导入-formsmodule\"><i class=\"material-icons\">link</i></a>导入 <em>FormsModule</em></h3>\n<p translation-origin=\"off\">Open the <code>app.module.ts</code> file and import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> symbol from the <code>@angular/forms</code> library.\nThen add the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata's <code>imports</code> array, which contains the list\nof external modules that the app uses.</p>\n<p translation-result=\"\">打开<code>app.module.ts</code>文件，并且从<code>@angular/forms</code>库中导入符号<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>。\n然后把<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>添加到<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>元数据的<code>imports</code>数组中，它是当前应用正在使用的外部模块列表。</p>\n<p translation-origin=\"off\">The updated <code>AppModule</code> looks like this:</p>\n<p translation-result=\"\">修改后的<code>AppModule</code>是这样的：</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" title=\"app.module.ts (FormsModule import)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a> lives here\n\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;-- import the <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> before binding with [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and <code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code> in the\n<a href=\"guide/forms#ngModel\">Two-way data binding with ngModel</a> section of the\n<a href=\"guide/forms\">Forms</a> guide and the\n<a href=\"guide/template-syntax#ngModel\">Two-way binding with NgModel</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> guide.</p>\n<p translation-result=\"\">要学习关于<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>和<code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code>的更多知识，参见<a href=\"guide/forms#ngModel\">表单</a>和\n<a href=\"guide/template-syntax#ngModel\">模板语法</a>。</p>\n</div>\n<p translation-origin=\"off\">When the browser refreshes, the app should work again.\nYou can edit the hero's name and see the changes reflected immediately in the <code>&#x3C;h2></code> above the textbox.</p>\n<p translation-result=\"\">浏览器刷新。又见到我们的英雄了。我们可以编辑英雄的名字，也能看到这个改动立刻体现在<code>&#x3C;h2></code>中。</p>\n<h2 translation-origin=\"off\" id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<h2 translation-result=\"\" id=\"我们已经走过的路\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#我们已经走过的路\"><i class=\"material-icons\">link</i></a>我们已经走过的路</h2>\n<p translation-origin=\"off\">Take stock of what you've built.</p>\n<p translation-result=\"\">我们来盘点一下已经构建完成的部分。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">The Tour of Heroes app uses the double curly braces of interpolation (a type of one-way data binding)\nto display the app title and properties of a <code>Hero</code> object.</p>\n<p translation-result=\"\">  我们的《英雄指南》使用双大括号插值表达式(单向数据绑定的一种形式)来显示应用的标题和<code>Hero</code>对象的属性。\n</p>\n</li>\n<li>\n<p translation-origin=\"off\">You wrote a multi-line template using ES2015's template literals to make the template readable.</p>\n<p translation-result=\"\">我们使用 ES2015 的模板字符串写了一个多行模板，使我们的模板更具可读性。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You added a two-way data binding to the <code>&#x3C;input></code> element\nusing the built-in <code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code> directive. This binding both displays the hero's name and allows users to change it.</p>\n<p translation-result=\"\">  为了同时显示和修改英雄的名字，我们还使用了内置的<code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code>指令，往<code>&#x3C;input></code>元素上添加了双向数据绑定。\n</p>\n</li>\n<li>\n<p translation-origin=\"off\">The <code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code> directive propagates changes to every other binding of the <code>hero.name</code>.</p>\n<p translation-result=\"\"><code><a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a></code>指令将这些修改传播到每一个对<code>hero.name</code>的其它绑定。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Your app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">运行这部分的<live-example></live-example>。</p>\n<p translation-origin=\"off\">Here's the complete <code>app.component.ts</code> as it stands now:</p>\n<p translation-result=\"\">完整的<code>app.component.ts</code>是这样的：</p>\n<code-example path=\"toh-pt1/src/app/app.component.ts\" title=\"src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n    &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n    &#x3C;div>\n      &#x3C;label>name: &#x3C;/label>\n      &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\">\n    &#x3C;/div>\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n}\n\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"next-step\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#next-step\"><i class=\"material-icons\">link</i></a>Next step</h2>\n<h2 translation-result=\"\" id=\"下一步\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#下一步\"><i class=\"material-icons\">link</i></a>下一步</h2>\n<p translation-origin=\"off\">In the <a href=\"tutorial/toh-pt2\" title=\"Master/Detail\">next tutorial page</a>, you'll build on the Tour of Heroes app to display a list of heroes.\nYou'll also allow the user to select heroes and display their details.\nYou'll learn more about how to retrieve lists and bind them to the template.</p>\n<p translation-result=\"\">在<a href=\"tutorial/toh-pt2\">教程的下一章</a>，我们将在这个《英雄指南》中显示一个英雄列表。\n我们将允许允许用户选择英雄，并显示他们的详情。\n我们还将学会如何获取列表以及将它们绑定到模板中。</p>\n\n</div>"
}