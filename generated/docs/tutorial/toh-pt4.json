{
  "id": "tutorial/toh-pt4",
  "title": "服务",
  "contents": "<h1 translation-result=\"\" id=\"服务\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#服务\"><i class=\"material-icons\">link</i></a>服务</h1>\n\n<div class=\"content\">\n<p translation-origin=\"off\">As the Tour of Heroes app evolves, you'll add more components that need access to hero data.</p>\n<p translation-result=\"\">随着《英雄指南》的成长，我们要添加更多需要访问英雄数据的组件。</p>\n<p translation-origin=\"off\">Instead of copying and pasting the same code over and over,\nyou'll create a single reusable data service and\ninject it into the components that need it.\nUsing a separate service keeps components lean and focused on supporting the view,\nand makes it easy to unit-test components with a mock service.</p>\n<p translation-result=\"\">为了不再把相同的代码复制一遍又一遍，我们要创建一个单一的可复用的数据服务，并且把它注入到需要它的那些组件中。\n使用单独的服务可以保持组件精简，使其集中精力为视图提供支持，并且，借助模拟（Mock）服务，可以更容易的对组件进行单元测试。</p>\n<p translation-origin=\"off\">Because data services are invariably asynchronous,\nyou'll finish the page with a <em>Promise</em>-based version of the data service.</p>\n<p translation-result=\"\">由于数据服务总是异步的，因此我们最终会提供一个基于承诺（Promise）的数据服务。</p>\n<p translation-origin=\"off\">When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">当我们完成本章的内容是，本应用会变成这样：<live-example></live-example>。</p>\n<h2 translation-origin=\"off\" id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<h2 translation-result=\"\" id=\"延续上一步教程\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#延续上一步教程\"><i class=\"material-icons\">link</i></a>延续上一步教程</h2>\n<p translation-origin=\"off\">Before continuing with the Tour of Heroes, verify that you have the following structure.\nIf not, go back to the previous pages.</p>\n<p translation-result=\"\">在继续《英雄指南》之前，先检查一下，是否已经有如下目录结构。如果没有，回上一章，看看错过了哪里。</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<h2 translation-origin=\"off\" id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<h2 translation-result=\"\" id=\"让应用代码保持转译和运行\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#让应用代码保持转译和运行\"><i class=\"material-icons\">link</i></a>让应用代码保持转译和运行</h2>\n<p translation-origin=\"off\">Enter the following command in the terminal window:</p>\n<p translation-result=\"\">在终端窗口中输入如下命令：</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p translation-origin=\"off\">This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p translation-result=\"\">这个命令会在“监听”模式下运行TypeScript编译器，当代码变化时，它会自动重新编译。\n同时，该命令还会在浏览器中启动该应用，并且当代码变化时刷新浏览器。</p>\n<p translation-origin=\"off\">You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<p translation-result=\"\">在后续构建《英雄指南》过程中，应用能持续运行，而不用中断服务来编译或刷新浏览器。</p>\n<h2 translation-origin=\"off\" id=\"creating-a-hero-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#creating-a-hero-service\"><i class=\"material-icons\">link</i></a>Creating a hero service</h2>\n<h2 translation-result=\"\" id=\"创建英雄服务\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#创建英雄服务\"><i class=\"material-icons\">link</i></a>创建英雄服务</h2>\n<p translation-origin=\"off\">The stakeholders want to show the heroes in various ways on different pages.\nUsers can already select a hero from a list.\nSoon you'll add a dashboard with the top performing heroes and create a separate view for editing hero details.\nAll three views need hero data.</p>\n<p translation-result=\"\">客户向我们描绘了本应用更大的目标：想要在不同的页面中用多种方式显示英雄。\n现在我们已经能从列表中选择一个英雄了，但这还不够。\n很快，我们将添加一个仪表盘来显示表现最好的英雄，并创建一个独立视图来编辑英雄的详情。\n所有这些视图都需要英雄数据。</p>\n<p translation-origin=\"off\">At the moment, the <code>AppComponent</code> defines mock heroes for display.\nHowever, defining heroes is not the component's job,\nand you can't easily share the list of heroes with other components and views.\nIn this page, you'll move the hero data acquisition business to a single service that provides the data and\nshare that service with all components that need the data.</p>\n<p translation-result=\"\">目前，<code>AppComponent</code>显示的是模拟数据。\n不过，定义这些英雄并非组件的任务，否则我们没法与其它组件和视图共享这些英雄列表数据。\n在这一章，我们将把获取英雄数据的任务重构为一个单独的服务，它将提供英雄数据，并把服务在所有需要英雄数据的组件间共享。</p>\n<h3 translation-origin=\"off\" id=\"create-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a>Create the HeroService</h3>\n<h3 translation-result=\"\" id=\"创建-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#创建-heroservice\"><i class=\"material-icons\">link</i></a>创建 HeroService</h3>\n<p translation-origin=\"off\">Create a file in the <code>app</code> folder called <code>hero.service.ts</code>. </p>\n<p translation-result=\"\">在<code>app</code>目录下创建一个名叫<code>hero.service.ts</code>的文件。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">The naming convention for service files is the service name in lowercase followed by <code>.service</code>.\nFor a multi-word service name, use lower <a href=\"guide/glossary#dash-case\">dash-case</a>.\nFor example, the filename for <code>SpecialSuperHeroService</code> is <code>special-super-hero.service.ts</code>.</p>\n<p translation-result=\"\">我们遵循的文件命名约定是：服务名称的小写形式（基本名），加上<code>.service</code>后缀。\n如果服务名称包含多个单词，我们就把基本名部分写成中线形式 (<a href=\"guide/glossary#dash-case\">dash-case</a>)。\n例如，<code>SpecialSuperHeroService</code>服务应该被定义在<code>special-super-hero.service.ts</code>文件中。</p>\n</div>\n<p translation-origin=\"off\">Name the class <code>HeroService</code> and export it for others to import.</p>\n<p translation-result=\"\">我们把这个类命名为<code>HeroService</code>，并导出它，以供别人使用。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"empty-class\" title=\"src/app/hero.service.ts (starting point)\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n}\n\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"injectable-services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a>Injectable services</h3>\n<h3 translation-result=\"\" id=\"可注入的服务\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#可注入的服务\"><i class=\"material-icons\">link</i></a>可注入的服务</h3>\n<p translation-origin=\"off\">Notice that you imported the Angular <code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code> function and applied that function as an <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator.</p>\n<p translation-result=\"\">注意，我们导入了 Angular 的<code><a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code>函数，并作为<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>装饰器使用这个函数。</p>\n<div class=\"callout is-helpful\">\n<p translation-origin=\"off\">Don't forget the parentheses. Omitting them leads to an error that's difficult to diagnose.</p>\n<p translation-result=\"\"><strong>不要忘了写圆括号！</strong>如果忘了写，就会导致一个很难诊断的错误。</p>\n</div>\n<p translation-origin=\"off\">The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator tells TypeScript to emit metadata about the service.\nThe metadata specifies that Angular may need to inject other dependencies into this service.</p>\n<p translation-result=\"\">当 TypeScript 看到<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>装饰器时，就会记下本服务的元数据。\n如果 Angular 需要往这个服务中注入其它依赖，就会使用这些元数据。</p>\n<p translation-origin=\"off\">Although the <code>HeroService</code> doesn't have any dependencies at the moment,\napplying the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> decorator ​from the start ensures\nconsistency and future-proofing.</p>\n<p translation-result=\"\">虽然<em>此时</em><code>HeroService</code>还没有任何依赖，但我们还是得加上这个装饰器。\n作为一项最佳实践，无论是出于提高统一性还是减少变更的目的，\n都应该从一开始就加上<code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>装饰器。</p>\n<h3 translation-origin=\"off\" id=\"getting-hero-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#getting-hero-data\"><i class=\"material-icons\">link</i></a>Getting hero data</h3>\n<h3 translation-result=\"\" id=\"获取英雄数据\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#获取英雄数据\"><i class=\"material-icons\">link</i></a>获取英雄数据</h3>\n<p translation-origin=\"off\">Add a <code>getHeroes()</code> method stub.</p>\n<p translation-result=\"\">添加一个名叫<code>getHeros</code>的桩方法。</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes-stub\" title=\"src/app/hero.service.ts (getHeroes stub)\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes(): void {} // stub\n}\n\n\n</code-example>\n<p translation-origin=\"off\">The <code>HeroService</code> could get <code>Hero</code> data from anywhere—a\nweb service, local storage, or a mock data source.\nRemoving data access from the component means\nyou can change your mind about the implementation anytime,\nwithout touching the components that need hero data.</p>\n<p translation-result=\"\"><code>HeroService</code>可以从任何地方获取<code>Hero</code>数据 —— Web服务、本地存储或模拟数据源。\n从组件中移除数据访问逻辑意味着你可以随时更改这些实现方式，而不影响需要这些英雄数据的组件。</p>\n<h3 translation-origin=\"off\" id=\"move-the-mock-hero-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#move-the-mock-hero-data\"><i class=\"material-icons\">link</i></a>Move the mock hero data</h3>\n<h3 translation-result=\"\" id=\"移动模拟的英雄数据\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#移动模拟的英雄数据\"><i class=\"material-icons\">link</i></a>移动模拟的英雄数据</h3>\n<p translation-origin=\"off\">Cut the <code>HEROES</code> array from <code>app.component.ts</code> and paste it to a new file in the <code>app</code> folder named <code>mock-heroes.ts</code>.\nAdditionally, copy the <code>import {Hero} ...</code> statement because the heroes array uses the <code>Hero</code> class.</p>\n<p translation-result=\"\">从<code>app.component.ts</code>文件中剪切<code>HEROS</code>数组，把它粘贴到<code>app</code>目录下一个名叫<code>mock-heroes.ts</code>的文件中。\n还要复制<code>import {Hero}...</code>语句，因为我们的英雄数组用到了<code>Hero</code>类。</p>\n<code-example path=\"toh-pt4/src/app/mock-heroes.ts\" title=\"src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<p translation-origin=\"off\">The <code>HEROES</code> constant is exported so it can be imported elsewhere, such as the <code>HeroService</code>.</p>\n<p translation-result=\"\">我们导出了<code>HEROES</code>常量，以便可以在其它地方导入它 — 例如<code>HeroService</code>服务。</p>\n<p translation-origin=\"off\">In <code>app.component.ts</code>, where you cut the <code>HEROES</code> array,\nadd an uninitialized <code>heroes</code> property:</p>\n<p translation-result=\"\">在刚刚剪切出<code>HEROES</code>数组的<code>app.component.ts</code>文件中，添加一个尚未初始化的<code>heroes</code>属性：</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"heroes-prop\" title=\"src/app/app.component.ts (heroes property)\" linenums=\"false\">\nheroes: Hero[];\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"return-mocked-hero-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#return-mocked-hero-data\"><i class=\"material-icons\">link</i></a>Return mocked hero data</h3>\n<h3 translation-result=\"\" id=\"返回模拟的英雄数据\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#返回模拟的英雄数据\"><i class=\"material-icons\">link</i></a>返回模拟的英雄数据</h3>\n<p translation-origin=\"off\">Back in the <code>HeroService</code>, import the mock <code>HEROES</code> and return it from the <code>getHeroes()</code> method.\nThe <code>HeroService</code> looks like this:</p>\n<p translation-result=\"\">回到<code>HeroService</code>，我们导入<code>HEROES</code>常量，并在<code>getHeroes</code>方法中返回它。\n我们的<code>HeroService</code>服务现在是这样的：</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"full\" title=\"src/app/hero.service.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes(): Hero[] {\n    return HEROES;\n  }\n}\n\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"import-the-hero-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#import-the-hero-service\"><i class=\"material-icons\">link</i></a>Import the hero service</h3>\n<h3 translation-result=\"\" id=\"导入heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#导入heroservice\"><i class=\"material-icons\">link</i></a>导入HeroService</h3>\n<p translation-origin=\"off\">You're ready to use the <code>HeroService</code> in other components, starting with <code>AppComponent</code>.</p>\n<p translation-result=\"\">我们可以在多个组件中使用 HeroService 服务了，先从 AppComponent 开始。</p>\n<p translation-origin=\"off\">Import the <code>HeroService</code> so that you can reference it in the code.</p>\n<p translation-result=\"\">先导入<code>HeroService</code>，以便我们可以在代码中引用它。</p>\n<code-example path=\"toh-pt4/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (hero-service-import)\" region=\"hero-service-import\">\nimport { HeroService } from './hero.service';\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"dont-use-new-with-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#dont-use-new-with-the-heroservice\"><i class=\"material-icons\">link</i></a>Don't use <em>new</em> with the <em>HeroService</em></h3>\n<h3 translation-result=\"\" id=\"不要new出heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#不要new出heroservice\"><i class=\"material-icons\">link</i></a>不要<code>new</code>出<code>HeroService</code></h3>\n<p translation-origin=\"off\">How should the <code>AppComponent</code> acquire a runtime concrete <code>HeroService</code> instance?</p>\n<p translation-result=\"\">该如何在运行中获得一个具体的<code>HeroService</code>实例呢？</p>\n<p translation-origin=\"off\">You could create a new instance of the <code>HeroService</code> with <code>new</code> like this:</p>\n<p translation-result=\"\">你可能想用<code>new</code>来创建<code>HeroService</code>的实例，就像这样：</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"new-service\" title=\"src/app/app.component.ts\" linenums=\"false\">\nheroService = new HeroService(); // don't do this\n\n</code-example>\n<p translation-origin=\"off\">However, this option isn't ideal for the following reasons:</p>\n<p translation-result=\"\">但这不是个好主意，有很多理由，例如：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">The component has to know how to create a <code>HeroService</code>.\nIf you change the <code>HeroService</code> constructor,\nyou must find and update every place you created the service.\nPatching code in multiple places is error prone and adds to the test burden.</p>\n<p translation-result=\"\">  我们的组件得弄清楚该如何创建<code>HeroService</code>。\n如果有一天我们修改了<code>HeroService</code>的构造函数，我们不得不找出创建过此服务的每一处代码，并修改它。\n围着补丁代码转圈很容易导致错误，还会增加测试负担。\n</p>\n</li>\n<li>\n<p translation-origin=\"off\">You create a service each time you use <code>new</code>.\nWhat if the service caches heroes and shares that cache with others?\nYou couldn't do that.</p>\n<p translation-result=\"\">  我们每次使用<code>new</code>都会创建一个新的服务实例。\n如果这个服务需要缓存英雄列表，并把这个缓存共享给别人呢？怎么办？\n没办法，做不到。\n</p>\n</li>\n<li>\n<p translation-origin=\"off\">With the <code>AppComponent</code> locked into a specific implementation of the <code>HeroService</code>,\nswitching implementations for different scenarios, such as operating offline or using\ndifferent mocked versions for testing, would be difficult.</p>\n<p translation-result=\"\">  我们把<code>AppComponent</code>锁定到<code>HeroService</code>的一个特定实现。\n我们很难在不同的场景中切换实现。\n例如，能离线操作吗？能在测试时使用不同的模拟版本吗？这可不容易。</p>\n</li>\n</ul>\n<h3 translation-origin=\"off\" id=\"inject-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a>Inject the <em>HeroService</em></h3>\n<h3 translation-result=\"\" id=\"注入-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#注入-heroservice\"><i class=\"material-icons\">link</i></a>注入 <em>HeroService</em></h3>\n<p translation-origin=\"off\">Instead of using the <em>new</em> line, you'll add two lines.</p>\n<p translation-result=\"\">你可以用两行代码代替用<code>new</code>时的一行：</p>\n<ul>\n<li>\n<p translation-origin=\"off\">Add a constructor that also defines a private property.</p>\n<p translation-result=\"\">添加一个构造函数，并定义一个私有属性。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Add to the component's <code>providers</code> metadata.</p>\n<p translation-result=\"\">添加组件的<code>providers</code>元数据。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Add the constructor:</p>\n<p translation-result=\"\">添加构造函数：</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"ctor\" title=\"src/app/app.component.ts (constructor)\">\nconstructor(private heroService: HeroService) { }\n\n</code-example>\n<p translation-origin=\"off\">The constructor itself does nothing. The parameter simultaneously\ndefines a private <code>heroService</code> property and identifies it as a <code>HeroService</code> injection site.</p>\n<p translation-result=\"\">构造函数自己什么也不用做，它在参数中定义了一个私有的<code>heroService</code>属性，并把它标记为注入<code>HeroService</code>的靶点。</p>\n<p translation-origin=\"off\">Now Angular knows to supply an instance of the <code>HeroService</code> when it creates an <code>AppComponent</code>.</p>\n<p translation-result=\"\">现在，当创建<code>AppComponent</code>实例时，Angular 知道需要先提供一个<code>HeroService</code>的实例。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about dependency injection in the <a href=\"guide/dependency-injection\">Dependency Injection</a> page.</p>\n<p translation-result=\"\">更多依赖注入的信息，见<a href=\"guide/dependency-injection\">依赖注入</a>。</p>\n</div>\n<p translation-origin=\"off\">The <em>injector</em> doesn't know yet how to create a <code>HeroService</code>.\nIf you ran the code now, Angular would fail with this error:</p>\n<p translation-result=\"\"><em>注入器</em>还不知道该如何创建<code>HeroService</code>。\n如果现在运行我们的代码，Angular 就会失败，并报错：</p>\n<code-example format=\"nocode\">\n  EXCEPTION: No provider for HeroService! (AppComponent -> HeroService)\n  (异常：没有 HeroService 的提供商！(AppComponent -> HeroService))\n\n</code-example>\n<p translation-origin=\"off\">To teach the injector how to make a <code>HeroService</code>,\nadd the following <code>providers</code> array property to the bottom of the component metadata\nin the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> call.</p>\n<p translation-result=\"\">我们还得注册一个<code>HeroService</code><strong>提供商</strong>，来告诉<em>注入器</em>如何创建<code>HeroService</code>。\n要做到这一点，我们在<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>组件的元数据底部添加<code>providers</code>数组属性如下：</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (providers)\" region=\"providers\">\nproviders: [HeroService]\n\n</code-example>\n<p translation-origin=\"off\">The <code>providers</code> array  tells Angular to create a fresh instance of the <code>HeroService</code> when it creates an <code>AppComponent</code>.\nThe <code>AppComponent</code>, as well as its child components, can use that service to get hero data.</p>\n<p translation-result=\"\"><code>providers</code>数组告诉 Angular，当它创建新的<code>AppComponent</code>组件时，也要创建一个<code>HeroService</code>的新实例。\n<code>AppComponent</code>会使用那个服务来获取英雄列表，在它组件树中的每一个子组件也同样如此。</p>\n<a id=\"child-component\"></a>\n<h3 translation-origin=\"off\" id=\"getheroes-in-the-appcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#getheroes-in-the-appcomponent\"><i class=\"material-icons\">link</i></a><em>getHeroes()</em> in the <em>AppComponent</em></h3>\n<h3 translation-result=\"\" id=\"appcomponent-中的-getheroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#appcomponent-中的-getheroes\"><i class=\"material-icons\">link</i></a><em>AppComponent</em> 中的 <em>getHeroes()</em></h3>\n<p translation-origin=\"off\">The service is in a <code>heroService</code> private variable.</p>\n<p translation-result=\"\">该服务被存入了一个私有变量<code>heroService</code>中。</p>\n<p translation-origin=\"off\">You could call the service and get the data in one line.</p>\n<p translation-result=\"\">我们可以在同一行内调用此服务，并获得数据。</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"get-heroes\" title=\"src/app/app.component.ts\" linenums=\"false\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p translation-origin=\"off\">You don't really need a dedicated method to wrap one line.  Write it anyway:</p>\n<p translation-result=\"\">在真实的世界中，我们并不需要把一行代码包装成一个专门的方法，但无论如何，我们在演示代码中先这么写：</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (getHeroes)\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<a id=\"oninit\"></a>\n<h3 translation-origin=\"off\" id=\"the-ngoninit-lifecycle-hook\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#the-ngoninit-lifecycle-hook\"><i class=\"material-icons\">link</i></a>The <em>ngOnInit</em> lifecycle hook</h3>\n<h3 translation-result=\"\" id=\"ngoninit-生命周期钩子\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#ngoninit-生命周期钩子\"><i class=\"material-icons\">link</i></a><em>ngOnInit</em> 生命周期钩子</h3>\n<p translation-origin=\"off\"><code>AppComponent</code> should fetch and display hero data with no issues.</p>\n<p translation-result=\"\">毫无疑问，<code>AppComponent</code>应该获取英雄数据并显示它。</p>\n<p translation-origin=\"off\"> You might be tempted to call the <code>getHeroes()</code> method in a constructor, but\na constructor should not contain complex logic,\nespecially a constructor that calls a server, such as a data access method.\nThe constructor is for simple initializations, like wiring constructor parameters to properties.</p>\n<p translation-result=\"\">你可能想在构造函数中调用<code>getHeroes()</code>方法，但构造函数不应该包含复杂的逻辑，特别是那些需要从服务器获取数据的逻辑更是如此。构造函数是为了简单的初始化工作而设计的，例如把构造函数的参数赋值给属性。</p>\n<p translation-origin=\"off\">To have Angular call <code>getHeroes()</code>, you can implement the Angular <em>ngOnInit lifecycle hook</em>.\nAngular offers interfaces for tapping into critical moments in the component lifecycle:\nat creation, after each change, and at its eventual destruction.</p>\n<p translation-result=\"\">只要我们实现了 Angular 的 <strong>ngOnInit</strong> <em>生命周期钩子</em>，Angular 就会主动调用这个钩子。\nAngular提供了一些接口，用来介入组件生命周期的几个关键时间点：刚创建时、每次变化时，以及最终被销毁时。</p>\n<p translation-origin=\"off\">Each interface has a single method. When the component implements that method, Angular calls it at the appropriate time.</p>\n<p translation-result=\"\">每个接口都有唯一的一个方法。只要组件实现了这个方法，Angular 就会在合适的时机调用它。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about lifecycle hooks in the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> page.</p>\n<p translation-result=\"\">更多生命周期钩子信息，见<a href=\"guide/lifecycle-hooks\">生命周期钩子</a>。</p>\n</div>\n<p translation-origin=\"off\">Here's the essential outline for the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface (don't copy this into your code):</p>\n<p translation-result=\"\">这是<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>接口的基本轮廓（但不要拷贝到你自己的代码中）：</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"on-init\" title=\"src/app/app.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  ngOnInit(): void {\n  }\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Add the implementation for the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface to your export statement:</p>\n<p translation-result=\"\">往export语句中添加<code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code>接口的实现：</p>\n<code-example format=\"nocode\">\n  export class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {}\n\n</code-example>\n<p translation-origin=\"off\">Write an <code>ngOnInit</code> method with the initialization logic inside. Angular will call it\nat the right time. In this case, initialize by calling <code>getHeroes()</code>.</p>\n<p translation-result=\"\">我们写了一个带有初始化逻辑的<code>ngOnInit</code>方法，Angular会在适当的时候调用它。\n在这个例子中，我们通过调用<code>getHeroes()</code>来完成初始化。</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (ng-on-init)\" region=\"ng-on-init\">\nngOnInit(): void {\n  this.getHeroes();\n}\n\n</code-example>\n<p translation-origin=\"off\">The app should run as expected, showing a list of heroes and a hero detail view\nwhen you click on a hero name.</p>\n<p translation-result=\"\">我们的应用将会像期望的那样运行，显示英雄列表，并且在我们点击英雄的名字时，显示英雄的详情。\n<a id=\"async\"></a></p>\n<h2 translation-origin=\"off\" id=\"async-services-and-promises\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#async-services-and-promises\"><i class=\"material-icons\">link</i></a>Async services and Promises</h2>\n<h2 translation-result=\"\" id=\"异步服务与承诺\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#异步服务与承诺\"><i class=\"material-icons\">link</i></a>异步服务与承诺</h2>\n<p translation-origin=\"off\">The <code>HeroService</code> returns a list of mock heroes immediately;\nits <code>getHeroes()</code> signature is synchronous.</p>\n<p translation-result=\"\">我们的<code>HeroService</code>立即返回一个模拟的英雄列表，它的<code>getHeroes()</code>函数签名是同步的。</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"get-heroes\" title=\"src/app/app.component.ts\" linenums=\"false\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p translation-origin=\"off\">Eventually, the hero data will come from a remote server.\nWhen using a remote server, users don't have to wait for the server to respond;\nadditionally, you aren't able to block the UI during the wait.</p>\n<p translation-result=\"\">但最终，英雄的数据会从远端服务器获取。当使用远端服务器时，用户不会等待服务器的响应。换句话说，你没法在等待期间阻塞浏览器界面。</p>\n<p translation-origin=\"off\">To coordinate the view with the response,\nyou can use <em>Promises</em>, which is an asynchronous\ntechnique that changes the signature of the <code>getHeroes()</code> method.</p>\n<p translation-result=\"\">为了协调视图与响应，我们可以使用<em>承诺（Promise）</em>，它是一种异步技术，它会改变<code>getHeroes()</code>方法的签名。</p>\n<h3 translation-origin=\"off\" id=\"the-hero-service-makes-a-promise\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#the-hero-service-makes-a-promise\"><i class=\"material-icons\">link</i></a>The hero service makes a Promise</h3>\n<h3 translation-result=\"\" id=\"heroservice会生成一个承诺\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#heroservice会生成一个承诺\"><i class=\"material-icons\">link</i></a><code>HeroService</code>会生成一个承诺</h3>\n<p translation-origin=\"off\">A <em>Promise</em> essentially promises to call back when the results are ready.\nYou ask an asynchronous service to do some work and give it a callback function.\nThe service does that work and eventually calls the function with the results or an error.</p>\n<p translation-result=\"\"><strong>承诺</strong> 就是 …… 好吧，它就是一个承诺，在有了结果时，它承诺会回调我们。\n我们请求一个异步服务去做点什么，并且给它一个回调函数。\n它会去做（在某个地方），一旦完成，它就会调用我们的回调函数，并通过参数把工作结果或者错误信息传给我们。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">This is a simplified explanation. Read more about ES2015 Promises in the\n<a href=\"http://exploringjs.com/es6/ch_promises.html\">Promises for asynchronous programming</a> page of\n<a href=\"http://exploringjs.com/es6.html\">Exploring ES6</a>.</p>\n<p translation-result=\"\">这里只是粗略说说，要了解更多 ES2015 Promise 的信息，见<a href=\"http://http://exploringjs.com/es6.html\">ES6概览</a>中的<a href=\"http://exploringjs.com/es6/ch_promises.html\">承诺与异步编程</a>。</p>\n</div>\n<p translation-origin=\"off\">Update the <code>HeroService</code> with this Promise-returning <code>getHeroes()</code> method:</p>\n<p translation-result=\"\">把<code>HeroService</code>的<code>getHeroes</code>方法改写为返回承诺的形式：</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"get-heroes\" title=\"src/app/hero.service.ts (excerpt)\" linenums=\"false\">\ngetHeroes(): Promise&#x3C;Hero[]> {\n  return Promise.resolve(HEROES);\n}\n\n</code-example>\n<p translation-origin=\"off\">You're still mocking the data. You're simulating the behavior of an ultra-fast, zero-latency server,\nby returning an <em>immediately resolved Promise</em> with the mock heroes as the result.</p>\n<p translation-result=\"\">我们继续使用模拟数据。我们通过返回一个 <em>立即解决的承诺</em> 的方式，模拟了一个超快、零延迟的超级服务器。</p>\n<h3 translation-origin=\"off\" id=\"act-on-the-promise\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#act-on-the-promise\"><i class=\"material-icons\">link</i></a>Act on the Promise</h3>\n<h3 translation-result=\"\" id=\"基于承诺的行动\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#基于承诺的行动\"><i class=\"material-icons\">link</i></a>基于承诺的行动</h3>\n<p translation-origin=\"off\">As a result of the change to <code>HeroService</code>, <code>this.heroes</code> is now set to a <code>Promise</code> rather than an array of heroes.</p>\n<p translation-result=\"\">修改<code>HeroService</code>之后，<code>this.heroes</code>会被赋值为一个<code>Promise</code>而不再是英雄数组。</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"getHeroes\" title=\"src/app/app.component.ts (getHeroes - old)\" linenums=\"false\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<p translation-origin=\"off\">You have to change the implementation to <em>act on the <code>Promise</code> when it resolves</em>.\nWhen the <code>Promise</code> resolves successfully, you'll have heroes to display.</p>\n<p translation-result=\"\">我们得修改这个实现，把它变成<em>基于承诺</em>的，并在承诺的事情被解决时再行动。\n一旦承诺的事情被成功解决（Resolve），我们就会显示英雄数据。</p>\n<p translation-origin=\"off\">Pass the callback function as an argument to the Promise's <code>then()</code> method:</p>\n<p translation-result=\"\">我们把回调函数作为参数传给承诺对象的<strong>then</strong>方法：</p>\n<code-example path=\"toh-pt4/src/app/app.component.ts\" region=\"get-heroes\" title=\"src/app/app.component.ts (getHeroes - revised)\" linenums=\"false\">\ngetHeroes(): void {\n  this.heroService.getHeroes().then(heroes => this.heroes = heroes);\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">As described in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a>,\nthe ES2015 arrow function\nin the callback is more succinct than the equivalent function expression and gracefully handles <code>this</code>.</p>\n<p translation-result=\"\">回调中所用的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">ES2015 箭头函数</a>\n比等价的函数表达式更加简洁，能优雅的处理 <em>this</em> 指针。</p>\n</div>\n<p translation-origin=\"off\">The callback sets the component's <code>heroes</code> property to the array of heroes returned by the service.</p>\n<p translation-result=\"\">在回调函数中，我们把服务返回的英雄数组赋值给组件的<code>heroes</code>属性。</p>\n<p translation-origin=\"off\">The app is still running, showing a list of heroes, and\nresponding to a name selection with a detail view.</p>\n<p translation-result=\"\">程序仍在运行，显示英雄列表，在选择英雄姓名时，会在详情视图中显示英雄的信息。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">At the end of this page, <a href=\"tutorial/toh-pt4#slow\">Appendix: take it slow</a> describes what the app might be like with a poor connection.</p>\n<p translation-result=\"\">查看附录中的“<a href=\"tutorial/toh-pt4#slow\">慢！</a>”，来了解在较差的网络连接中这个应用会是什么样的。</p>\n</div>\n<h2 translation-origin=\"off\" id=\"review-the-app-structure\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#review-the-app-structure\"><i class=\"material-icons\">link</i></a>Review the app structure</h2>\n<h2 translation-result=\"\" id=\"回顾本应用的结构\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#回顾本应用的结构\"><i class=\"material-icons\">link</i></a>回顾本应用的结构</h2>\n<p translation-origin=\"off\">Verify that you have the following structure after all of your refactoring:</p>\n<p translation-result=\"\">再检查下，经历了本章的所有重构之后，应该有了下列文件结构：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n        <div class=\"file\">\n          hero.service.ts\n        </div>\n        <div class=\"file\">\n          mock-heroes.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p translation-origin=\"off\">Here are the code files discussed in this page.</p>\n<p translation-result=\"\">下面是本章讨论过的代码文件：</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroService {\n  getHeroes(): Promise&#x3C;Hero[]> {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"toh-pt4/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HeroService } from './hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My Heroes&#x3C;/h2>\n    &#x3C;ul class=\"heroes\">\n      &#x3C;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\">\n        &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `],\n  providers: [HeroService]\n})\nexport class AppComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  title = 'Tour of Heroes';\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  getHeroes(): void {\n    this.heroService.getHeroes().then(heroes => this.heroes = heroes);\n  }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/mock-heroes.ts\" path=\"toh-pt4/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-pane>\n\n</code-tabs>\n<h2 translation-origin=\"off\" id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<h2 translation-result=\"\" id=\"小结\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#小结\"><i class=\"material-icons\">link</i></a>小结</h2>\n<p translation-origin=\"off\">Here's what you achieved in this page:</p>\n<p translation-result=\"\">来盘点一下我们完成了什么。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">You created a service class that can be shared by many components.</p>\n<p translation-result=\"\">我们创建了一个能被多个组件共享的服务类。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You used the <code>ngOnInit</code> lifecycle hook to get the hero data when the <code>AppComponent</code> activates.</p>\n<p translation-result=\"\">我们使用了<code>ngOnInit</code>生命周期钩子，以便在<code>AppComponent</code>激活时获取英雄数据。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You defined the <code>HeroService</code> as a provider for the <code>AppComponent</code>.</p>\n<p translation-result=\"\">我们把<code>HeroService</code>定义为<code>AppComponent</code>的一个提供商。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You created mock hero data and imported them into the service.</p>\n<p translation-result=\"\">我们创建了模拟的英雄数据，并把它导入我们的服务中。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You designed the service to return a Promise and the component to get the data from the Promise.</p>\n<p translation-result=\"\">我们把服务设计为返回承诺，组件从承诺中获取数据。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Your app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">现在应用变成了这样：<live-example></live-example>。</p>\n<h2 translation-origin=\"off\" id=\"next-step\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#next-step\"><i class=\"material-icons\">link</i></a>Next step</h2>\n<h2 translation-result=\"\" id=\"下一步\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#下一步\"><i class=\"material-icons\">link</i></a>下一步</h2>\n<p translation-origin=\"off\">The Tour of Heroes has become more reusable using shared components and services.\nThe next goal is to create a dashboard, add menu links that route between the views, and format data in a template.\nAs the app evolves, you'll discover how to design it to make it easier to grow and maintain.</p>\n<p translation-result=\"\">通过使用共享组件和服务，我们的《英雄指南》更有复用性了。\n我们还要创建一个仪表盘，要添加在视图间路由的菜单链接，还要在模板中格式化数据。\n随着我们应用的进化，我们还会学到如何进行设计，让它更易于扩展和维护。</p>\n<p translation-origin=\"off\">Read about the Angular component router and navigation among the views in the <a href=\"tutorial/toh-pt5\" title=\"Routing and Navigation\">next tutorial</a> page.</p>\n<p translation-result=\"\">我们将在<a href=\"tutorial/toh-pt5\">下一章</a>学习 Angular 组件路由，以及在视图间导航的知识。</p>\n<a id=\"slow\"></a>\n<h2 translation-origin=\"off\" id=\"appendix-take-it-slow\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#appendix-take-it-slow\"><i class=\"material-icons\">link</i></a>Appendix: Take it slow</h2>\n<h2 translation-result=\"\" id=\"附件：慢一点\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#附件：慢一点\"><i class=\"material-icons\">link</i></a>附件：慢一点……</h2>\n<p translation-origin=\"off\">To simulate a slow connection,\nimport the <code>Hero</code> symbol and add the following <code>getHeroesSlowly()</code> method to the <code>HeroService</code>.</p>\n<p translation-result=\"\">我们可以模拟慢速连接。导入<code>Hero</code>类，并且在<code>HeroService</code>中添加如下的<code>getHeroesSlowly()</code>方法：</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"get-heroes-slowly\" title=\"app/hero.service.ts (getHeroesSlowly)\" linenums=\"false\">\ngetHeroesSlowly(): Promise&#x3C;Hero[]> {\n  return new Promise(resolve => {\n    // Simulate server latency with 2 second delay\n    setTimeout(() => resolve(this.getHeroes()), 2000);\n  });\n}\n\n</code-example>\n<p translation-origin=\"off\">Like <code>getHeroes()</code>, it also returns a <code>Promise</code>.\nBut this Promise waits two seconds before resolving the Promise with mock heroes.</p>\n<p translation-result=\"\">像<code>getHeroes()</code>一样，它也返回一个承诺。\n但是，这个承诺会在提供模拟数据之前等待两秒钟。</p>\n<p translation-origin=\"off\">Back in the <code>AppComponent</code>, replace <code>getHeroes()</code> with <code>getHeroesSlowly()</code>\nand see how the app behaves.</p>\n<p translation-result=\"\">回到<code>AppComponent</code>，用<code>heroService.getHeroesSlowly()</code>替换<code>heroService.getHeroes()</code>，并观察应用的行为。</p>\n\n</div>"
}