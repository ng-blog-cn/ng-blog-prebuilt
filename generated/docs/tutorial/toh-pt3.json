{
  "id": "tutorial/toh-pt3",
  "title": "多个组件",
  "contents": "<h1 translation-result=\"\" id=\"多个组件\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#多个组件\"><i class=\"material-icons\">link</i></a>多个组件</h1>\n\n<div class=\"content\">\n<p translation-origin=\"off\">The <code>AppComponent</code> is doing <em>everything</em> at the moment.\nIn the beginning, it showed details of a single hero.\nThen it became a master/detail form with both a list of heroes and the hero detail.\nSoon there will be new requirements and capabilities.\nYou can't keep piling features on top of features in one component; that's not maintainable.</p>\n<p translation-result=\"\">此刻，<code>AppComponent</code>负责<em>所有事</em>。\n起初，它只显示单个英雄的详情。然后，它变成了主从结构，同时显示英雄列表和一个英雄详情。\n现在，我们很快又会有新需求了。\n我们不能把这些需求全都放在一个组件中，否则将不可维护。</p>\n<p translation-origin=\"off\">You'll need to break it up into sub-components, each focused on a specific task or workflow.\nEventually, the <code>AppComponent</code> could become a simple shell that hosts those sub-components.</p>\n<p translation-result=\"\">我们要把它拆分成一些子组件，每个子组件只聚焦在一个特定的任务或工作流上。\n最后，<code>AppComponent</code>将会变成一个简单的壳，用来作为那些子组件的宿主。</p>\n<p translation-origin=\"off\">In this page, you'll take the first step in that direction by carving out the hero details into a separate, reusable component.\nWhen you're done, the app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">本章中，我们要做的第一步就是把英雄详情拆分到一个独立的、可复用的组件中。\n做完这些，应用是这样的：<live-example></live-example>。</p>\n<h2 translation-origin=\"off\" id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<h2 translation-result=\"\" id=\"延续上一步教程\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#延续上一步教程\"><i class=\"material-icons\">link</i></a>延续上一步教程</h2>\n<p translation-origin=\"off\">Before getting started on this page, verify that you have the following structure from earlier in the Tour of Heroes.\nIf not, go back to the previous pages.</p>\n<p translation-result=\"\">在继续《英雄指南》之前，先检查一下，是否已经有了如下目录结构。如果没有，回上一章，看看错过了哪里。</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p translation-origin=\"off\">Keep the app transpiling and running while you build the Tour of Heroes\nby entering the <code>npm start</code> command in a terminal window\n<a href=\"tutorial/toh-pt1#keep-transpiling\" title=\"Keep the app running\">as you did before</a>.</p>\n<p translation-result=\"\"><a href=\"tutorial/toh-pt1#keep-transpiling\" title=\"Keep the app running\">像以前一样</a>，在终端窗口中输入<code>npm start</code>命令，以便在构建《英雄指南》时保持持续转译和运行。</p>\n<h2 translation-origin=\"off\" id=\"make-a-hero-detail-component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#make-a-hero-detail-component\"><i class=\"material-icons\">link</i></a>Make a hero detail component</h2>\n<h2 translation-result=\"\" id=\"制作英雄详情组件\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#制作英雄详情组件\"><i class=\"material-icons\">link</i></a>制作英雄详情组件</h2>\n<p translation-origin=\"off\">Add a file named <code>hero-detail.component.ts</code> to the <code>app/</code> folder.\nThis file will hold the new <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\">往<code>app/</code>文件夹下添加一个名叫<code>hero-detail.component.ts</code>的文件。这个文件中会存放这个新的<code>HeroDetailComponent</code>。</p>\n<p translation-origin=\"off\">The file and component names follow the standard described in the Angular\n<a href=\"guide/styleguide#naming\">style guide</a>.</p>\n<p translation-result=\"\">文件名和组件名遵循<a href=\"guide/styleguide#naming\">风格指南</a>中的标准方式。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">The component <em>class</em> name should be written in <em>upper camel case</em> and end in the word \"Component\".\nThe hero detail component class is <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\">  组件的类名应该是<em>大驼峰形式</em>，并且以<code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>结尾。\n因此英雄详情组件的类名是<code>HeroDetailComponent</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The component <em>file</em> name should be spelled in <a href=\"guide/glossary#dash-case\"><em>lower dash case</em></a>,\neach word separated by dashes, and end in <code>.component.ts</code>.\nThe <code>HeroDetailComponent</code> class goes in the <code>hero-detail.component.ts</code> file.</p>\n<p translation-result=\"\">  组件的文件名应该是<a href=\"guide/glossary#dash-case\">小写中线形式</a>，每个单词之间用中线分隔，并且以<code>.component.ts</code>结尾。\n因此<code>HeroDetailComponent</code>类应该放在<code>hero-detail.component.ts</code>文件中。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Start writing the <code>HeroDetailComponent</code> as follows:</p>\n<p translation-result=\"\"><code>HeroDetailComponent</code>的代码如下：</p>\n<code-example path=\"toh-pt3/app/hero-detail.component.1.ts\" region=\"v1\" title=\"app/hero-detail.component.ts (initial version)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n})\nexport class HeroDetailComponent {\n}\n\n</code-example>\n<a id=\"selector\"></a>\n<p translation-origin=\"off\">To define a component, you always import the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> symbol.</p>\n<p translation-result=\"\">要定义一个组件，我们总是要先导入符号<code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>。</p>\n<p translation-origin=\"off\">The <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator provides the Angular metadata for the component.\nThe CSS selector name, <code>hero-detail</code>, will match the element tag\nthat identifies this component within a parent component's template.\n<a href=\"tutorial/toh-pt3#add-hero-detail\" title=\"Add the HeroDetailComponent to the AppComponent\">Near the end of this tutorial page</a>,\nyou'll add a <code>&#x3C;hero-detail></code> element to the <code>AppComponent</code> template.</p>\n<p translation-result=\"\"><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>装饰器为组件提供了Angular元数据。\nCSS选择器的名字<code>hero-detail</code>会匹配元素的标签名，用于在父组件的模板中标记出当前组件的位置。\n<a href=\"tutorial/toh-pt3#add-hero-detail\" title=\"Add the HeroDetailComponent to the AppComponent\">本章的最后</a>，我们会把<code>&#x3C;hero-detail></code>添加到<code>AppComponent</code>的模板中。</p>\n<p translation-origin=\"off\">Always <code>export</code> the component class because you'll always <code>import</code> it elsewhere.</p>\n<p translation-result=\"\">总是<code>export</code>这个组件类，因为你必然会在别处<code>import</code>它。</p>\n<h3 translation-origin=\"off\" id=\"hero-detail-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#hero-detail-template\"><i class=\"material-icons\">link</i></a>Hero detail template</h3>\n<h3 translation-result=\"\" id=\"英雄详情的模板\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#英雄详情的模板\"><i class=\"material-icons\">link</i></a>英雄详情的模板</h3>\n<p translation-origin=\"off\">To move the hero detail view to the <code>HeroDetailComponent</code>,\ncut the hero detail <em>content</em> from the bottom of the <code>AppComponent</code> template\nand paste it into a new <code>template</code> property in the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata.</p>\n<p translation-result=\"\">要把英雄详情的视图移入<code>HeroDetailComponent</code>，只要把英雄详情的 <em>内容</em> 从<code>AppComponent</code>模板的底部剪切出来，\n粘贴到<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>元数据的<code>template</code>属性中就可以了。</p>\n<p translation-origin=\"off\">The <code>HeroDetailComponent</code> has a <em>hero</em>, not a <em>selected hero</em>.\nReplace the word, \"selectedHero\", with the word, \"hero\", everywhere in the template.\nWhen you're done, the new template should look like this:</p>\n<p translation-result=\"\"><code>HeroDetailComponent</code>有一个 <code>hero</code>属性，而不再是<code>selectedHero</code>。\n所以我们也要在模板中把所有的<code>selectedHero</code>替换为<code>hero</code>。\n这些完成之后，新的模板是这样的：</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"template\" title=\"src/app/hero-detail.component.ts (template)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"add-the-hero-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#add-the-hero-property\"><i class=\"material-icons\">link</i></a>Add the <em>hero</em> property</h3>\n<h3 translation-result=\"\" id=\"添加hero属性\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#添加hero属性\"><i class=\"material-icons\">link</i></a>添加<code>hero</code>属性</h3>\n<p translation-origin=\"off\">The <code>HeroDetailComponent</code> template binds to the component's <code>hero</code> property.\nAdd that property to the <code>HeroDetailComponent</code> class like this:</p>\n<p translation-result=\"\"><code>HeroDetailComponent</code>模板绑定到了该组件的<code>hero</code>属性上。\n把这个属性添加到<code>HeroDetailComponent</code>类上，就像这样：</p>\n<code-example path=\"toh-pt3/app/hero-detail.component.1.ts\" region=\"hero\" title=\"src/app/hero-detail.component.ts (hero property)\">\nhero: Hero;\n\n</code-example>\n<p translation-origin=\"off\">The <code>hero</code> property is typed as an instance of <code>Hero</code>.\nThe <code>Hero</code> class is still in the <code>app.component.ts</code> file.\nNow there are two components that need to reference the <code>Hero</code> class.\nThe Angular <a href=\"guide/styleguide#rule-of-one\" title=\"Style guide: rule of one\">style guide</a> recommends one class per file anyway.</p>\n<p translation-result=\"\"><code>hero</code>属性的类型是<code>Hero</code>。\n<code>Hero</code>类仍然在<code>app.component.ts</code>文件中。\n现在，有两个组件需要<code>Hero</code>类的引用。\n而Angular<a href=\"guide/styleguide#rule-of-one\" title=\"Style guide: rule of one\">风格指南</a>建议每个文件中只有一个类。</p>\n<p translation-origin=\"off\">Move the <code>Hero</code> class from <code>app.component.ts</code> to its own <code>hero.ts</code> file.</p>\n<p translation-result=\"\">因此我们要把<code>Hero</code>类从<code>app.component.ts</code>移到它自己的<code>hero.ts</code>文件中：</p>\n<code-example path=\"toh-pt3/src/app/hero.ts\" title=\"src/app/hero.ts\" linenums=\"false\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p translation-origin=\"off\">Now that the <code>Hero</code> class is in its own file, the <code>AppComponent</code> and the <code>HeroDetailComponent</code> have to import it.\nAdd the following <code>import</code> statement near the top of <em>both</em> the <code>app.component.ts</code> and the <code>hero-detail.component.ts</code> files.</p>\n<p translation-result=\"\">现在，<code>Hero</code>类有了自己的文件，<code>AppComponent</code> 和 <code>HeroDetailComponent</code> 就要<code>import</code>它了。\n把下列<code>import</code>语句添加到<code>app.component.ts</code>和<code>hero-detail.component.ts</code>文件的顶部。</p>\n<code-example path=\"toh-pt3/app/hero-detail.component.1.ts\" region=\"hero-import\" title=\"src/app/hero-detail.component.ts\">\nimport { Hero } from './hero';\n\n</code-example>\n<h3 translation-origin=\"off\" id=\"the-hero-property-is-an-input-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#the-hero-property-is-an-input-property\"><i class=\"material-icons\">link</i></a>The <em>hero</em> property is an <em>input</em> property</h3>\n<h3 translation-result=\"\" id=\"hero属性是一个输入属性\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#hero属性是一个输入属性\"><i class=\"material-icons\">link</i></a><em>hero</em>属性是一个<strong><em>输入</em></strong>属性</h3>\n<p translation-origin=\"off\"><a href=\"tutorial/toh-pt3#add-hero-detail\" title=\"Add the HeroDetailComponent to the AppComponent\">Later in this page</a>,\nthe parent <code>AppComponent</code> will tell the child <code>HeroDetailComponent</code> which hero to display\nby binding its <code>selectedHero</code> to the <code>hero</code> property of the <code>HeroDetailComponent</code>.\nThe binding will look like this:</p>\n<p translation-result=\"\"><a href=\"tutorial/toh-pt3#add-hero-detail\" title=\"Add the HeroDetailComponent to the AppComponent\">在本章稍后的部分</a>，\n父组件<code>AppComponent</code>会告诉子组件<code>HeroDetailComponent</code>要显示哪个英雄，\n告诉的方法是把它的<code>selectedHero</code>属性绑定到<code>HeroDetailComponent</code>的<code>hero</code>属性上。\n这种绑定是这样的：</p>\n<code-example path=\"toh-pt3/app/app.component.1.html\" region=\"hero-detail-binding\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p translation-origin=\"off\">Putting square brackets around the <code>hero</code> property, to the left of the equal sign (=),\nmakes it the <em>target</em> of a property binding expression.\nYou must declare a <em>target</em> binding property to be an <em>input</em> property.\nOtherwise, Angular rejects the binding and throws an error.</p>\n<p translation-result=\"\">在等号的左边，是方括号围绕的<code>hero</code>属性，这表示它是属性绑定表达式的<em>目标</em>。\n我们要绑定到的<em>目标</em>属性必须是一个<em>输入</em>属性，否则Angular会拒绝绑定，并抛出一个错误。</p>\n<p translation-origin=\"off\">First, amend the <code>@angular/core</code> import statement to include the <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> symbol.</p>\n<p translation-result=\"\">首先，修改<code>@angular/core</code>导入语句，使其包含符号<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"import-input\" title=\"src/app/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<p translation-origin=\"off\">Then declare that <code>hero</code> is an <em>input</em> property by\npreceding it with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator that you imported earlier.</p>\n<p translation-result=\"\">然后，通过在<code>hero</code>属性前面加上<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器，来表明它是一个输入属性。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"hero\" title=\"src/app/hero-detail.component.ts (excerpt)\" linenums=\"false\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n</code-example>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about <em>input</em> properties in the\n<a href=\"guide/attribute-directives#why-input\">Attribute Directives</a> page.</p>\n<p translation-result=\"\">要了解<em>输入属性</em>的更多知识，参见<a href=\"guide/attribute-directives#why-input\">属性型指令</a>页。</p>\n</div>\n<p translation-origin=\"off\">That's it. The <code>hero</code> property is the only thing in the <code>HeroDetailComponent</code> class.</p>\n<p translation-result=\"\">现在，<code>hero</code>属性是<code>HeroDetailComponent</code>类中唯一的东西。</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"class\" title=\"src/src/app/hero-detail.component.ts\" linenums=\"false\">\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n</code-example>\n<p translation-origin=\"off\">All it does is receive a hero object through its <code>hero</code> input property and then bind to that property with its template.</p>\n<p translation-result=\"\">它所做的一切就是通过它的输入属性<code>hero</code>接收一个英雄对象，然后把这个属性绑定到自己的模板中。</p>\n<p translation-origin=\"off\">Here's the complete <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\">下面是完整的<code>HeroDetailComponent</code>：</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" title=\"src/app/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"declare-herodetailcomponent-in-the-appmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#declare-herodetailcomponent-in-the-appmodule\"><i class=\"material-icons\">link</i></a>Declare <em>HeroDetailComponent</em> in the <em>AppModule</em></h2>\n<h2 translation-result=\"\" id=\"在appmodule中声明herodetailcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#在appmodule中声明herodetailcomponent\"><i class=\"material-icons\">link</i></a>在<code>AppModule</code>中声明<code>HeroDetailComponent</code></h2>\n<p translation-origin=\"off\">Every component must be declared in one—and only one—NgModule.</p>\n<p translation-result=\"\">每个组件都必须在一个（且只有一个）Angular模块中声明。</p>\n<p translation-origin=\"off\">Open <code>app.module.ts</code> in your editor and import the <code>HeroDetailComponent</code> so you can refer to it.</p>\n<p translation-result=\"\">打开<code>app.module.ts</code>并且导入<code>HeroDetailComponent</code>，以便我们可以引用它。</p>\n<code-example path=\"toh-pt3/src/app/app.module.ts\" region=\"hero-detail-import\" title=\"src/app/app.module.ts\">\nimport { HeroDetailComponent } from './hero-detail.component';\n\n</code-example>\n<p translation-origin=\"off\">Add <code>HeroDetailComponent</code> to the module's <code>declarations</code> array.</p>\n<p translation-result=\"\">把<code>HeroDetailComponent</code>添加到该模块的<code>declarations</code>数组中。</p>\n<code-example path=\"toh-pt3/src/app/app.module.ts\" region=\"declarations\" title=\"src/app/app.module.ts\" linenums=\"false\">\ndeclarations: [\n  AppComponent,\n  HeroDetailComponent\n],\n\n</code-example>\n<p translation-origin=\"off\">In general, the <code>declarations</code> array contains a list of application components, pipes, and directives that belong to the module.\nA component must be declared in a module before other components can reference it.\nThis module declares only the two application components, <code>AppComponent</code> and <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\">通常，<code>declarations</code>数组包含应用中属于该模块的组件、管道和指令的列表。\n组件在被其它组件引用之前必须先在一个模块中声明过。\n这个模块只声明了两个组件：<code>AppComponent</code> 和 <code>HeroDetailComponent</code>。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Read more about NgModules in the <a href=\"guide/ngmodule\" title=\"NgModules\">NgModules</a> guide.</p>\n<p translation-result=\"\">要了解关于Angular模块的更多知识，参见<a href=\"guide/ngmodule\" title=\"Angular Modules (NgModule)\">Angular模块</a>页。</p>\n</div>\n<a id=\"add-hero-detail\"></a>\n<h2 translation-origin=\"off\" id=\"add-the-herodetailcomponent-to-the-appcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#add-the-herodetailcomponent-to-the-appcomponent\"><i class=\"material-icons\">link</i></a>Add the <em>HeroDetailComponent</em> to the <em>AppComponent</em></h2>\n<h2 translation-result=\"\" id=\"把herodetailcomponent添加到appcomponent中\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#把herodetailcomponent添加到appcomponent中\"><i class=\"material-icons\">link</i></a>把<code>HeroDetailComponent</code>添加到<code>AppComponent</code>中</h2>\n<p translation-origin=\"off\">The <code>AppComponent</code> is still a master/detail view.\nIt used to display the hero details on its own, before you cut out that portion of the template.\nNow it will delegate to the <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\"><code>AppComponent</code>仍然是主从视图。\n在我们剪切模板之前，它自己显示英雄的详情。\n现在，它委托给了<code>HeroDetailComponent</code>。</p>\n<p translation-origin=\"off\">Recall that <code>hero-detail</code> is the CSS <a href=\"tutorial/toh-pt3#selector\" title=\"HeroDetailComponent selector\"><code>selector</code></a>\nin the <code>HeroDetailComponent</code> metadata.\nThat's the tag name of the element that represents the <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\">回想一下，<code>hero-detail</code>正是<code>HeroDetailComponent</code>元数据中使用的 CSS <a href=\"tutorial/toh-pt3#selector\" title=\"HeroDetailComponent selector\"><code>selector</code></a>\n它是一个HTML元素的标签名，用于表示<code>HeroDetailComponent</code>。</p>\n<p translation-origin=\"off\">Add a <code>&#x3C;hero-detail></code> element near the bottom of the <code>AppComponent</code> template,\nwhere the hero detail view used to be.</p>\n<p translation-result=\"\">把<code>&#x3C;hero-detail></code>元素添加到<code>AppComponent</code>模板的底部，那里就是英雄详情视图所在的位置。</p>\n<p translation-origin=\"off\">Coordinate the master <code>AppComponent</code> with the <code>HeroDetailComponent</code>\nby binding the <code>selectedHero</code> property of the <code>AppComponent</code>\nto the <code>hero</code> property of the <code>HeroDetailComponent</code>.</p>\n<p translation-result=\"\">协调主视图<code>AppComponent</code>与<code>HeroDetailComponent</code>的方式是把<code>AppComponent</code>的<code>selectedHero</code>属性绑定到<code>HeroDetailComponent</code>的<code>hero</code>属性上。</p>\n<code-example path=\"toh-pt3/app/app.component.1.html\" region=\"hero-detail-binding\" title=\"app.component.ts (excerpt)\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p translation-origin=\"off\">Now every time the <code>selectedHero</code> changes, the <code>HeroDetailComponent</code> gets a new hero to display.</p>\n<p translation-result=\"\">每当<code>selectedHero</code>变化时，<code>HeroDetailComponent</code>就会显示一个新的英雄。</p>\n<p translation-origin=\"off\">The revised <code>AppComponent</code> template should look like this:</p>\n<p translation-result=\"\">修改后的<code>AppComponent</code>模板是这样的：</p>\n<code-example path=\"toh-pt3/src/app/app.component.ts\" region=\"hero-detail-template\" title=\"app.component.ts (excerpt)\" linenums=\"false\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My Heroes&#x3C;/h2>\n  &#x3C;ul class=\"heroes\">\n    &#x3C;li *ngFor=\"let hero of heroes\"\n      [class.selected]=\"hero === selectedHero\"\n      (click)=\"onSelect(hero)\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n`,\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"what-changed\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a>What changed?</h2>\n<h2 translation-result=\"\" id=\"有哪些变化？\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#有哪些变化？\"><i class=\"material-icons\">link</i></a>有哪些变化？</h2>\n<p translation-origin=\"off\">As <a href=\"tutorial/toh-pt2\">before</a>, whenever a user clicks on a hero name,\nthe hero detail appears below the hero list.\nBut now the <code>HeroDetailView</code> is presenting those details.</p>\n<p translation-result=\"\">仍然像<a href=\"tutorial/toh-pt2\">以前</a>一样，一旦用户点击了英雄的名字，英雄详情就会显示在英雄列表的下方。\n不过现在改用<code>HeroDetailView</code>来表示英雄详情了。</p>\n<p translation-origin=\"off\">Refactoring the original <code>AppComponent</code> into two components yields benefits, both now and in the future:</p>\n<p translation-result=\"\">我们把原来的<code>AppComponent</code>重构成了两个组件具有一些显著优点，无论是现在还是未来：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">You simplified the <code>AppComponent</code> by reducing its responsibilities.</p>\n<p translation-result=\"\">通过缩减<code>AppComponent</code>的职责，我们简化了它。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You can evolve the <code>HeroDetailComponent</code> into a rich hero editor\nwithout touching the parent <code>AppComponent</code>.</p>\n<p translation-result=\"\">  我们将来可以把<code>HeroDetailComponent</code>改进为功能更丰富的英雄编辑器，而不用动<code>AppComponent</code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You can evolve the <code>AppComponent</code> without touching the hero detail view.</p>\n<p translation-result=\"\">同样，我们也可以改进<code>AppComponent</code>而不用动英雄详情视图。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You can re-use the <code>HeroDetailComponent</code> in the template of some future parent component.</p>\n<p translation-result=\"\">我们可以在未来的其它父组件的模板中复用<code>HeroDetailComponent</code>。</p>\n</li>\n</ol>\n<h3 translation-origin=\"off\" id=\"review-the-app-structure\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#review-the-app-structure\"><i class=\"material-icons\">link</i></a>Review the app structure</h3>\n<h3 translation-result=\"\" id=\"审视本应用的代码结构\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#审视本应用的代码结构\"><i class=\"material-icons\">link</i></a>审视本应用的代码结构</h3>\n<p translation-origin=\"off\">Verify that you have the following structure:</p>\n<p translation-result=\"\">验证它是否已经有了如下结构：</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p translation-origin=\"off\">Here are the code files discussed in this page.</p>\n<p translation-result=\"\">下面是我们在本章讨论的代码文件：</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(<a href=\"api/forms/NgControlStatus\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\nexport class HeroDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n}\n\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"toh-pt3/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My Heroes&#x3C;/h2>\n    &#x3C;ul class=\"heroes\">\n      &#x3C;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\">\n        &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.ts\" path=\"toh-pt3/src/app/hero.ts\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"toh-pt3/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  declarations: [\n    AppComponent,\n    HeroDetailComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<h2 translation-origin=\"off\" id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<h2 translation-result=\"\" id=\"走过的路\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#走过的路\"><i class=\"material-icons\">link</i></a>走过的路</h2>\n<p translation-origin=\"off\">Here's what you achieved in this page:</p>\n<p translation-result=\"\">来盘点一下我们已经构建了什么。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">You created a reusable component.</p>\n<p translation-result=\"\">我们创建了一个可复用组件</p>\n</li>\n<li>\n<p translation-origin=\"off\">You learned how to make a component accept input.</p>\n<p translation-result=\"\">我们学会了如何让一个组件接收输入</p>\n</li>\n<li>\n<p translation-origin=\"off\">You learned to declare the required application directives in an NgModule. You\nlisted the directives in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator's <code>declarations</code> array.</p>\n<p translation-result=\"\">  我们学会了在 Angular 模块中声明该应用所需的指令。\n只要把这些指令列在<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>装饰器的<code>declarations</code>数组中就可以了。</p>\n</li>\n<li>\n<p translation-origin=\"off\">You learned to bind a parent component to a child component.</p>\n<p translation-result=\"\">我们学会了把父组件绑定到子组件。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Your app should look like this <live-example></live-example>.</p>\n<p translation-result=\"\">现在，应用应该变成了这样：<live-example></live-example>。</p>\n<h2 translation-origin=\"off\" id=\"next-step\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#next-step\"><i class=\"material-icons\">link</i></a>Next step</h2>\n<h2 translation-result=\"\" id=\"下一步\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#下一步\"><i class=\"material-icons\">link</i></a>下一步</h2>\n<p translation-origin=\"off\">The Tour of Heroes app is more reusable with shared components,\nbut its (mock) data is still hard coded within the <code>AppComponent</code>.\nThat's not sustainable.\nData access should be refactored to a separate service\nand shared among the components that need data.</p>\n<p translation-result=\"\">通过抽取共享组件，我们的《英雄指南》变得更有复用性了，但在<code>AppComponent</code>中，我们仍然使用着硬编码的模拟数据。显然，这种方式不能“可持续发展”。\n我们要把数据访问逻辑重构到一个独立的服务中，并在需要数据的组件之间共享。</p>\n<p translation-origin=\"off\">You’ll learn to create services in the <a href=\"tutorial/toh-pt4\" title=\"Services\">next tutorial</a> page.</p>\n<p translation-result=\"\">在<a href=\"tutorial/toh-pt4\">下一步</a>，我们将学习如何创建服务。</p>\n\n</div>"
}