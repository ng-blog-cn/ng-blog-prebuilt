{
  "id": "guide/bootstrapping",
  "title": "启动过程",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"bootstrapping\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrapping\"><i class=\"material-icons\">link</i></a>Bootstrapping</h1>\n<h1 translation-result=\"\" id=\"启动过程\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#启动过程\"><i class=\"material-icons\">link</i></a>启动过程</h1>\n<p translation-origin=\"off\">An NgModule class describes how the application parts fit together.\nEvery application has at least one NgModule, the <em>root</em> module\nthat you <a href=\"guide/bootstrapping#main\">bootstrap</a> to launch the application.\nYou can call it anything you want. The conventional name is <code>AppModule</code>.</p>\n<p translation-result=\"\">Angular 模块类描述应用的部件是如何组合在一起的。\n每个应用都至少有一个 Angular 模块，也就是<em>根</em>模块，用来<a href=\"guide/bootstrapping#main\">引导</a>并运行应用。\n你可以为它取任何名字。常规名字是<code>AppModule</code>。</p>\n<p translation-origin=\"off\">The <a href=\"guide/setup\">setup</a> instructions produce a new project with the following minimal <code>AppModule</code>.\nYou'll evolve this module as your application grows.</p>\n<p translation-result=\"\"><a href=\"guide/setup\">开发环境</a>讲解了如何使用下面这个最小的<code>AppModule</code>来创建一个新项目。\n这个模块随着应用的成长而演变。</p>\n<code-example path=\"setup/src/app/app.module.ts\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>';\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p translation-origin=\"off\">After the <code>import</code> statements, you come to a class adorned with the\n<strong><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></strong> <a href=\"guide/glossary#decorator\" title=\"&#x22;Decorator&#x22; explained\"><em>decorator</em></a>.</p>\n<p translation-result=\"\"><code>import</code>语句之后，可以看到一个<strong><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code></strong><a href=\"guide/glossary#decorator\" title=\"&#x22;Decorator&#x22; explained\">装饰器</a>修饰的类。</p>\n<p translation-origin=\"off\">The <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator identifies <code>AppModule</code> as an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class.\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> takes a <em>metadata</em> object that tells Angular how to compile and launch the application.</p>\n<p translation-result=\"\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>装饰器将<code>AppModule</code>标记为 Angular 模块类（也叫<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>类）。\n<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>接受一个<em>元数据</em>对象，告诉 Angular 如何编译和启动应用。</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><strong><em>imports</em></strong> — the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> that this and every application needs to run in a browser.</p>\n<p translation-result=\"\"><strong><em>imports</em></strong> — <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>，这个和每个在浏览器中运行应用都需要它。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong><em>declarations</em></strong> — the application's lone component, which is also ...</p>\n<p translation-result=\"\"><strong><em>declarations</em></strong> — 应用的唯一组件，它同时也是...</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong><em>bootstrap</em></strong> — the <em>root</em> component that Angular creates and inserts into the <code>index.html</code> host web page.</p>\n<p translation-result=\"\"><strong><em>bootstrap</em></strong> — <em>根</em>组件，Angular 创建它并插入<code>index.html</code>宿主页面。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">The <a href=\"guide/ngmodule\">NgModules</a> guide dives deeply into the details of NgModules.\nAll you need to know at the moment is a few basics about these three properties.</p>\n<p translation-result=\"\"><a href=\"guide/ngmodule\">Angular 模块 (NgModules)</a> 指南深入讲解了 Angular 模块。\n现在先初步了解这三个属性。</p>\n<a id=\"imports\"></a>\n<h3 translation-origin=\"off\" id=\"the-imports-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-imports-array\"><i class=\"material-icons\">link</i></a>The <em>imports</em> array</h3>\n<h3 translation-result=\"\" id=\"imports数组\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#imports数组\"><i class=\"material-icons\">link</i></a><code>imports</code>数组</h3>\n<p translation-origin=\"off\">NgModules are a way to consolidate features that belong together into discrete units.\nMany features of Angular itself are organized as NgModules.\nHTTP services are in the <code><a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a></code>. The router is in the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nEventually you may create a feature module.</p>\n<p translation-result=\"\">Angular 模块把特性合并成离散单元的一种方式。\nAngular 自身的许多特性也是通过 Angular 模块组织的。\nHTTP 服务在<code><a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a></code>里。路由器在<code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>中。\n最终，你可能也会创建特性模块。</p>\n<p translation-origin=\"off\">Add a module to the <code>imports</code> array when the application requires its features.</p>\n<p translation-result=\"\">当应用需要模块的特性时，将其添加到<code>imports</code>数组中。</p>\n<p translation-origin=\"off\"><em>This</em> application, like most applications, executes in a browser.\nEvery application that executes in a browser needs the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> from <code>@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>.\nSo every such application includes the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> in its <em>root</em> <code>AppModule</code>'s <code>imports</code> array.\nOther guide and cookbook pages will tell you when you need to add additional modules to this array.</p>\n<p translation-result=\"\"><em>这个</em>应用和大多数其他应用一样，在浏览器中运行。\n每个浏览器中运行的应用都需要<code>@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a></code>里的<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>。\n所以每个这样的应用都在其<em>根</em><code>AppModule</code>的<code>imports</code>数组中包含<code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>。\n在需要添加额外模块到此数组时，其他指南和烹饪宝典页面会告诉你。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\"><strong>Only <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> classes</strong> go in the <code>imports</code> array. Do not put any other kind of class in <code>imports</code>.</p>\n<p translation-result=\"\"><code>imports</code>数组中应该<strong>只有<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>类</strong>。不要放置其它类型的类。</p>\n</div>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">The <code>import</code> statements at the top of the file and the NgModule's <code>imports</code> array\nare unrelated and have completely different jobs.</p>\n<p translation-result=\"\">不要将 Angular 模块的<code>imports</code>数组与文件顶部的<code>import</code>语句弄混淆了。它们的功能不同。</p>\n<p translation-origin=\"off\">The <em>JavaScript</em> <code>import</code> statements give you access to symbols <em>exported</em> by other files\nso you can reference them within <em>this</em> file.\nYou add <code>import</code> statements to almost every application file.\nThey have nothing to do with Angular and Angular knows nothing about them.</p>\n<p translation-result=\"\"><em>JavaScript</em> 的<code>import</code>声明允许你访问在其他文件中<em>导出</em>的符号，这样你可以在<em>当前</em>文件引用它们。\n我们会往几乎所有类型的应用中加入<code>import</code>语句。\n它们与 Angular 毫无关系，Angular 对它们也一无所知。</p>\n<p translation-origin=\"off\">The <em>module's</em> <code>imports</code> array appears <em>exclusively</em> in the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata object.\nIt tells Angular about specific <em>other</em> NgModules—all of them classes decorated\nwith <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>—that the application needs to function properly.</p>\n<p translation-result=\"\"><em>模块</em>的<code>imports</code>数组是<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>元数据中<em>独有的</em>。它告诉 Angular 特定 Angular 模块的信息 — 用<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>装饰的类 — 应用需要它们来正常工作。</p>\n</div>\n<a id=\"declarations\"></a>\n<h3 translation-origin=\"off\" id=\"the-declarations-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-declarations-array\"><i class=\"material-icons\">link</i></a>The <em>declarations</em> array</h3>\n<h3 translation-result=\"\" id=\"declarations-数组\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#declarations-数组\"><i class=\"material-icons\">link</i></a><em>declarations</em> 数组</h3>\n<p translation-origin=\"off\">You tell Angular which components belong to the <code>AppModule</code> by listing it in the module's <code>declarations</code> array.\nAs you create more components, you'll add them to <code>declarations</code>.</p>\n<p translation-result=\"\">通过将其列到<code>AppModule</code>模块的<code>declarations</code>数组中，可以告诉 Angular 哪个组件属于<code>AppModule</code>。\n在创建更多组件的过程中，逐步将它们添加到<code>declarations</code>中。</p>\n<p translation-origin=\"off\">You must declare <em>every</em> component in an <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> class.\nIf you use a component without declaring it, you'll see a clear error message in the browser console.</p>\n<p translation-result=\"\">你必须在一个<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>类声明<em>每一个</em>组件。\n否则当你使用这些组件时就会在浏览器的控制台中看到一个明显的错误信息。</p>\n<p translation-origin=\"off\">You'll learn to create two other kinds of classes —\n<a href=\"guide/attribute-directives\">directives</a> and <a href=\"guide/pipes\">pipes</a> —\nthat you must also add to the <code>declarations</code> array.</p>\n<p translation-result=\"\">你将会学习如何创建其他两种类 — <a href=\"guide/attribute-directives\">指令</a>和<a href=\"guide/pipes\">管道</a> —\n它们也必须被添加到<code>declarations</code>数组。</p>\n<div class=\"alert is-important\">\n<p translation-origin=\"off\"><strong>Only <em>declarables</em></strong> — <em>components</em>, <em>directives</em> and <em>pipes</em> — belong in the <code>declarations</code> array.\nDo not put any other kind of class in <code>declarations</code>; <em>not</em> <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> classes, <em>not</em> service classes, <em>not</em> model classes.</p>\n<p translation-result=\"\"><strong>只有*可以声明的</strong> — <em>组件</em>、<em>指令</em>和<em>管道</em> — 属于<code>declarations</code>数组。\n不要将其他类型的类添加到<code>declarations</code>中，例如<code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>类, 服务类，模型类。</p>\n</div>\n<a id=\"bootstrap-array\"></a>\n<h3 translation-origin=\"off\" id=\"the-bootstrap-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-bootstrap-array\"><i class=\"material-icons\">link</i></a>The <em>bootstrap</em> array</h3>\n<h3 translation-result=\"\" id=\"bootstrap-数组\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrap-数组\"><i class=\"material-icons\">link</i></a><em>bootstrap</em> 数组</h3>\n<p translation-origin=\"off\">You launch the application by <a href=\"guide/bootstrapping#main\"><em>bootstrapping</em></a> the root <code>AppModule</code>.\nAmong other things, the <em>bootstrapping</em> process creates the component(s) listed in the <code>bootstrap</code> array\nand inserts each one into the browser DOM.</p>\n<p translation-result=\"\">通过<a href=\"guide/bootstrapping#main\"><em>引导</em></a>根<code>AppModule</code>来启动应用。\n在启动过程中，其中一步是创建列在<code>bootstrap</code>数组的组件，\n并将它们每一个都插入到浏览器的DOM中。</p>\n<p translation-origin=\"off\">Each bootstrapped component is the base of its own tree of components.\nInserting a bootstrapped component usually triggers a cascade of component creations that fill out that tree.</p>\n<p translation-result=\"\">每个被引导的组件都是它自己的组件树的根。\n插入一个被引导的组件通常触发一系列组件的创建并形成组件树。</p>\n<p translation-origin=\"off\">While you can put more than one component tree on a host web page, that's not typical.\nMost applications have only one component tree and they bootstrap a single <em>root</em> component.</p>\n<p translation-result=\"\">虽然你可以将多个组件树插入到宿主页面，但并不普遍。\n大多数应用只有一个组件树，它们引导单一<em>根</em>组件。</p>\n<p translation-origin=\"off\">You can call the one <em>root</em> component anything you want but most developers call it <code>AppComponent</code>.</p>\n<p translation-result=\"\">你可以为这个<em>根</em>组件取任何名字，但是大多数程序员将其取名为<code>AppComponent</code>。</p>\n<p translation-origin=\"off\">Which brings us to the <em>bootstrapping</em> process itself.</p>\n<p translation-result=\"\">下面让我们来看看<em>引导</em>过程本身。</p>\n<a id=\"main\"></a>\n<h2 translation-origin=\"off\" id=\"bootstrap-in-maints\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrap-in-maints\"><i class=\"material-icons\">link</i></a>Bootstrap in <em>main.ts</em></h2>\n<h2 translation-result=\"\" id=\"在maints中引导\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#在maints中引导\"><i class=\"material-icons\">link</i></a>在<em>main.ts</em>中引导</h2>\n<p translation-origin=\"off\">There are many ways to bootstrap an application.\nThe variations depend upon how you want to compile the application and where you want to run it.</p>\n<p translation-result=\"\">引导应用的方法很多。\n它们取决于你想如何编译应用以及应用将在哪儿运行。</p>\n<p translation-origin=\"off\">In the beginning, you will compile the application dynamically with the <em>Just-in-Time (JIT)</em> compiler\nand you'll run it in a browser. You can learn about other options later.</p>\n<p translation-result=\"\">开始时，你将使用<em>即时 (JiT) </em>编译器动态编译应用。然后在浏览器中运行它。\n稍后，你可以了解其他选项。</p>\n<p translation-origin=\"off\">The recommended place to bootstrap a JIT-compiled browser application is in a separate file\nin the <code>src</code> folder named <code>src/main.ts</code></p>\n<p translation-result=\"\">引导即时编译的浏览器应用的推荐地点是在<code>src</code>目录中一个名为<code>src/main.ts</code>的单独文件中。</p>\n<code-example path=\"setup/src/main.ts\" title=\"src/main.ts\" linenums=\"false\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>-dynamic';\nimport { AppModule }              from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-example>\n<p translation-origin=\"off\">This code creates a browser platform for dynamic (JIT) compilation and\nbootstraps the <code>AppModule</code> described above.</p>\n<p translation-result=\"\">上面的代码为动态 (JiT) 编译创建浏览器平台，并引导上面提到的<code>AppModule</code>。</p>\n<p translation-origin=\"off\">The <em>bootstrapping</em> process sets up the execution environment,\ndigs the <em>root</em> <code>AppComponent</code> out of the module's <code>bootstrap</code> array,\ncreates an instance of the component and inserts it within the element tag identified by the component's <code>selector</code>.</p>\n<p translation-result=\"\">引导过程搭建运行环境，从模块的<code>bootstrap</code>数组中提出<em>根</em><code>AppComponent</code>， 创建该组件的实例，并将其插入到组件<code>selector</code>标识的元素标签中。</p>\n<p translation-origin=\"off\">The <code>AppComponent</code> selector — here and in most documentation samples — is <code>my-app</code>\nso Angular looks for a <code>&#x3C;my-app></code> tag in the <code>index.html</code> like this one ...</p>\n<p translation-result=\"\"><code>AppComponent</code>选择器 — 在这里以及文档大部分例子中 — 是<code>my-app</code>，\n所以 Angular 在<code>index.html</code>中查找像这样的<code>&#x3C;my-app></code>标签...</p>\n<code-example path=\"setup/src/index.html\" region=\"my-app\" title=\"setup/src/index.html\" linenums=\"false\">\n&#x3C;my-app>&#x3C;!-- content managed by Angular -->&#x3C;/my-app>\n\n</code-example>\n<p translation-origin=\"off\">... and displays the <code>AppComponent</code> there.</p>\n<p translation-result=\"\">...然后在那儿显示<code>AppComponent</code>。</p>\n<p translation-origin=\"off\">This file is very stable. Once you've set it up, you may never change it again.</p>\n<p translation-result=\"\">该文件非常稳定。一旦配置好，你可能永远不会再修改它。</p>\n<l-main-section>\n</l-main-section>\n<h2 translation-origin=\"off\" id=\"more-about-ngmodules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#more-about-ngmodules\"><i class=\"material-icons\">link</i></a>More about NgModules</h2>\n<h2 translation-result=\"\" id=\"关于angular模块的更多知识\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#关于angular模块的更多知识\"><i class=\"material-icons\">link</i></a>关于Angular模块的更多知识</h2>\n<p translation-origin=\"off\">Your initial app has only a single module, the <em>root</em> module.\nAs your app grows, you'll consider subdividing it into multiple \"feature\" modules,\nsome of which can be loaded later (\"lazy loaded\") if and when the user chooses\nto visit those features.</p>\n<p translation-result=\"\">你最初的应用只有一个单一的模块 —— <em>根</em>模块。\n当这个应用不断成长时，你就要考虑把它们拆分到多个 \"特性\" 模块中了。\n这些特性模块中的一部分可以稍后加载（即惰性加载），它们只会在用户访问到这些特性时才会加载。</p>\n<p translation-origin=\"off\">When you're ready to explore these possibilities, visit the <a href=\"guide/ngmodule\">NgModules</a> guide.</p>\n<p translation-result=\"\">如果你要了解这些知识，请访问<a href=\"guide/ngmodule\">Angular 模块 (NgModule)</a>页</p>\n\n</div>"
}