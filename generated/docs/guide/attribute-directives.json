{
  "id": "guide/attribute-directives",
  "title": "属性型指令",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"attribute-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#attribute-directives\"><i class=\"material-icons\">link</i></a>Attribute Directives</h1>\n<h1 translation-result=\"\" id=\"属性型指令\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#属性型指令\"><i class=\"material-icons\">link</i></a>属性型指令</h1>\n<p translation-origin=\"off\">An <strong>Attribute</strong> directive changes the appearance or behavior of a DOM element.</p>\n<p translation-result=\"\"><strong>属性</strong>型指令用于改变一个 DOM 元素的外观或行为。</p>\n<p translation-origin=\"off\">Try the <live-example title=\"Attribute Directive example\"></live-example>.</p>\n<p translation-result=\"\">你可以到这里试试：<live-example title=\"Attribute Directive example\"></live-example>。</p>\n<a id=\"directive-overview\"></a>\n<h2 translation-origin=\"off\" id=\"directives-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#directives-overview\"><i class=\"material-icons\">link</i></a>Directives overview</h2>\n<h2 translation-result=\"\" id=\"指令概览\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#指令概览\"><i class=\"material-icons\">link</i></a>指令概览</h2>\n<p translation-origin=\"off\">There are three kinds of directives in Angular:</p>\n<p translation-result=\"\">在 Angular 中有三种类型的指令：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">Components—directives with a template.</p>\n<p translation-result=\"\">组件 — 拥有模板的指令</p>\n</li>\n<li>\n<p translation-origin=\"off\">Structural directives—change the DOM layout by adding and removing DOM elements.</p>\n<p translation-result=\"\">结构型指令 — 通过添加和移除 DOM 元素改变 DOM 布局的指令</p>\n</li>\n<li>\n<p translation-origin=\"off\">Attribute directives—change the appearance or behavior of an element, component, or another directive.</p>\n<p translation-result=\"\">属性型指令 — 改变元素、组件或其它指令的外观和行为的指令。</p>\n</li>\n</ol>\n<p translation-origin=\"off\"><em>Components</em> are the most common of the three directives.\nYou saw a component for the first time in the <a href=\"guide/quickstart\">QuickStart</a> guide.</p>\n<p translation-result=\"\"><em>组件</em>是这三种指令中最常用的。\n你在<a href=\"guide/quickstart\">快速上手</a>例子中第一次见到组件。</p>\n<p translation-origin=\"off\"><em>Structural Directives</em> change the structure of the view.\nTwo examples are <a href=\"guide/template-syntax#ngFor\">NgFor</a> and <a href=\"guide/template-syntax#ngIf\">NgIf</a>.\nLearn about them in the <a href=\"guide/structural-directives\">Structural Directives</a> guide.</p>\n<p translation-result=\"\"><em>结构型</em>指令修改视图的结构。例如，<a href=\"guide/template-syntax#ngFor\">NgFor</a> 和 <a href=\"guide/template-syntax#ngIf\">NgIf</a>。\n要了解更多，参见<a href=\"guide/structural-directives\">结构型指令</a> guide。</p>\n<p translation-origin=\"off\"><em>Attribute directives</em> are used as attributes of elements.\nThe built-in <a href=\"guide/template-syntax#ngStyle\">NgStyle</a> directive in the\n<a href=\"guide/template-syntax\">Template Syntax</a> guide, for example,\ncan change several element styles at the same time.</p>\n<p translation-result=\"\"><em>属性型</em>指令改变一个元素的外观或行为。例如，内置的 <a href=\"guide/template-syntax#ngStyle\">NgStyle</a> 指令可以同时修改元素的多个样式。</p>\n<h2 translation-origin=\"off\" id=\"build-a-simple-attribute-directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#build-a-simple-attribute-directive\"><i class=\"material-icons\">link</i></a>Build a simple attribute directive</h2>\n<h2 translation-result=\"\" id=\"创建一个简单的属性型指令\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#创建一个简单的属性型指令\"><i class=\"material-icons\">link</i></a>创建一个简单的属性型指令</h2>\n<p translation-origin=\"off\">An attribute directive minimally requires building a controller class annotated with\n<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, which specifies the selector that identifies\nthe attribute.\nThe controller class implements the desired directive behavior.</p>\n<p translation-result=\"\">属性型指令至少需要一个带有<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>装饰器的控制器类。该装饰器指定了一个用于标识属性的选择器。\n控制器类实现了指令需要的指令行为。</p>\n<p translation-origin=\"off\">This page demonstrates building a simple <em>myHighlight</em> attribute\ndirective to set an element's background color\nwhen the user hovers over that element. You can apply it like this:</p>\n<p translation-result=\"\">本章展示了如何创建一个简单的属性型指令 <em>myHighlight</em> ，当用户把鼠标悬停在一个元素上时，改变它的背景色。你可以这样用它：</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (applied)\" region=\"applied\">\n&#x3C;p appHightlight>Highlight me!&#x3C;/p>\n\n</code-example>\n<a id=\"write-directive\"></a>\n<h3 translation-origin=\"off\" id=\"write-the-directive-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-the-directive-code\"><i class=\"material-icons\">link</i></a>Write the directive code</h3>\n<h3 translation-result=\"\" id=\"编写指令代码\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#编写指令代码\"><i class=\"material-icons\">link</i></a>编写指令代码</h3>\n<p translation-origin=\"off\">Follow the <a href=\"guide/setup\">setup</a> instructions for creating a new local project\nnamed <code>attribute-directives</code>.</p>\n<p translation-result=\"\">按照<a href=\"guide/setup\">开发环境</a>的说明，创建一个名叫<code>attribute-directives</code>的项目文件夹。</p>\n<p translation-origin=\"off\">Create the following source file in the indicated folder:</p>\n<p translation-result=\"\">在指定的文件夹下创建下列源码文件：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.1.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[appHighlight]' })\nexport class HighlightDirective {\n    constructor(el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n\n\n</code-example>\n<p translation-origin=\"off\">The <code>import</code> statement specifies symbols from the Angular <code>core</code>:</p>\n<p translation-result=\"\"><code>import</code>语句指定了从 Angular 的<code>core</code>库导入的一些符号。  </p>\n<ol>\n<li>\n<p translation-origin=\"off\"><code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> provides the functionality of the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator.</p>\n<p translation-result=\"\"><code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>提供<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>装饰器功能。  </p>\n</li>\n<li>\n<p translation-origin=\"off\"><code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> <a href=\"guide/dependency-injection\">injects</a> into the directive's constructor\nso the code can access the DOM element.</p>\n<p translation-result=\"\">   <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code><a href=\"guide/dependency-injection\">注入</a>到指令构造函数中。这样代码就可以访问 DOM 元素了。<br>\n</p>\n</li>\n<li>\n<p translation-origin=\"off\"><code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> allows data to flow from the binding expression into the directive.</p>\n<p translation-result=\"\"><code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>将数据从绑定表达式传达到指令中。</p>\n</li>\n</ol>\n<p translation-origin=\"off\">Next, the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> decorator function contains the directive metadata in a configuration object\nas an argument.</p>\n<p translation-result=\"\">然后，<code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>装饰器函数以配置对象参数的形式，包含了指令的元数据。</p>\n<p translation-origin=\"off\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> requires a CSS selector to identify\nthe HTML in the template that is associated with the directive.</p>\n<p translation-result=\"\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>装饰器需要一个 CSS 选择器，以便从模板中识别出关联到这个指令的 HTML。</p>\n<p translation-origin=\"off\">The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">CSS selector for an attribute</a>\nis the attribute name in square brackets.\nHere, the directive's selector is <code>[myHighlight]</code>.\nAngular locates all elements in the template that have an attribute named <code>myHighlight</code>.</p>\n<p translation-result=\"\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">用于 attribute 的 CSS 选择器</a>就是属性名称加方括号。\n这里，指令的选择器是<code>[myHighlight]</code>，Angular 将会在模板中找到所有带<code>myHighlight</code>属性的元素。</p>\n<div class=\"l-sub-section\">\n<h3 translation-origin=\"off\" id=\"why-not-call-it-highlight\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#why-not-call-it-highlight\"><i class=\"material-icons\">link</i></a>Why not call it \"highlight\"?</h3>\n<h3 translation-result=\"\" id=\"为什么不直接叫做-highlight？\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#为什么不直接叫做-highlight？\"><i class=\"material-icons\">link</i></a>为什么不直接叫做 \"highlight\"？</h3>\n<p translation-origin=\"off\">Though <em>highlight</em> is a more concise name than <em>myHighlight</em> and would work,\na best practice is to prefix selector names to ensure\nthey don't conflict with standard HTML attributes.\nThis also reduces the risk of colliding with third-party directive names.</p>\n<p translation-result=\"\">尽管<em>highlight</em> 是一个比 <em>myHighlight</em> 更简洁的名字，而且它确实也能工作。\n但是最佳实践是在选择器名字前面添加前缀，以确保它们不会与标准 HTML 属性冲突。\n它同时减少了与第三方指令名字发生冲突的危险。</p>\n<p translation-origin=\"off\">Make sure you do <strong>not</strong> prefix the <code>highlight</code> directive name with <strong><code>ng</code></strong> because\nthat prefix is reserved for Angular and using it could cause bugs that are difficult to diagnose.\nFor a simple demo, the short prefix, <code>my</code>, helps distinguish your custom directive.</p>\n<p translation-result=\"\">确认你<strong>没有</strong>给<code>highlight</code>指令添加<strong><code>ng</code></strong>前缀。\n那个前缀属于 Angular，使用它可能导致难以诊断的 bug。例如，这个简短的前缀<code>my</code>可以帮助你区分自定义指令。</p>\n</div>\n<p translation-origin=\"off\">After the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> metadata comes the directive's controller class,\ncalled <code>HighlightDirective</code>, which contains the logic for the directive.\nExporting <code>HighlightDirective</code> makes it accessible to other components.</p>\n<p translation-result=\"\"><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>元数据之后就是该指令的控制器类，名叫<code>HighlightDirective</code>，它包含该指令的逻辑。\n然后导出<code>HighlightDirective</code>，以便让它能从其它组件中访问到。</p>\n<p translation-origin=\"off\">Angular creates a new instance of the directive's controller class for\neach matching element, injecting an Angular <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>\ninto the constructor.\n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> is a service that grants direct access to the DOM element\nthrough its <code>nativeElement</code> property.</p>\n<p translation-result=\"\">Angular 会为每个匹配的元素创建一个指令控制器类的实例，并把 Angular 的<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>和<code><a href=\"api/core/Renderer\" class=\"code-anchor\">Renderer</a></code>注入进构造函数。\n<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>是一个服务，它赋予我们通过它的<code>nativeElement</code>属性直接访问 DOM 元素的能力。\n<code><a href=\"api/core/Renderer\" class=\"code-anchor\">Renderer</a></code>服务允许通过代码设置元素的样式。</p>\n<a id=\"apply-directive\"></a>\n<h2 translation-origin=\"off\" id=\"apply-the-attribute-directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#apply-the-attribute-directive\"><i class=\"material-icons\">link</i></a>Apply the attribute directive</h2>\n<h2 translation-result=\"\" id=\"使用属性型指令\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#使用属性型指令\"><i class=\"material-icons\">link</i></a>使用属性型指令</h2>\n<p translation-origin=\"off\">To use the new <code>HighlightDirective</code>, create a template that\napplies the directive as an attribute to a paragraph (<code>&#x3C;p></code>) element.\nIn Angular terms, the <code>&#x3C;p></code> element is the attribute <strong>host</strong>.</p>\n<p translation-result=\"\">要使用这个新的<code>HighlightDirective</code>，创建一个模板，把这个指令作为属性应用到一个段落(<code>p</code>)元素上。\n用 Angular 的话说，<code>&#x3C;p></code>元素就是这个属性型指令的<strong>宿主</strong>。</p>\n<p translation-origin=\"off\">Put the template in its own <code>app.component.html</code>\nfile that looks like this:</p>\n<p translation-result=\"\">我们把这个模板放到它的<code>app.component.html</code>文件中，就像这样：</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" title=\"src/app/app.component.html\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n&#x3C;p appHightlight>Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">Now reference this template in the <code>AppComponent</code>:</p>\n<p translation-result=\"\">现在，在<code>AppComponent</code>中引用这个模板：</p>\n<code-example path=\"attribute-directives/src/app/app.component.ts\" title=\"src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Next, add an <code>import</code> statement to fetch the <code>Highlight</code> directive and\nadd that class to the <code>declarations</code> NgModule metadata. This way Angular\nrecognizes the directive when it encounters <code>myHighlight</code> in the template.</p>\n<p translation-result=\"\">接下来，添加了一个<code>import</code>语句来获得<code>Highlight</code>指令类，并把这个类添加到 NgModule 元数据的<code>declarations</code>数组中。\n这样，当 Angular 在模板中遇到<code>myHighlight</code>时，就能认出这是指令了。</p>\n<code-example path=\"attribute-directives/src/app/app.module.ts\" title=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p translation-origin=\"off\">Now when the app runs, the <code>myHighlight</code> directive highlights the paragraph text.</p>\n<p translation-result=\"\">运行应用，就会看到我们的指令确实高亮了段落中的文本。</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/first-highlight.png\" alt=\"First Highlight\" width=\"349\" height=\"92\">\n</figure>\n<div class=\"l-sub-section\">\n<h3 translation-origin=\"off\" class=\"no-toc\" id=\"your-directive-isnt-working\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#your-directive-isnt-working\"><i class=\"material-icons\">link</i></a>Your directive isn't working?</h3>\n<h3 translation-result=\"\" id=\"你的指令没生效？\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#你的指令没生效？\"><i class=\"material-icons\">link</i></a>你的指令没生效？</h3>\n<p translation-origin=\"off\">Did you remember to add the directive to the  <code>declarations</code> attribute of <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>?\nIt is easy to forget!</p>\n<p translation-result=\"\">你记着设置<code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>的<code>declarations</code>数组了吗？它很容易被忘掉。</p>\n<p translation-origin=\"off\">Open the console in the browser tools and look for an error like this:</p>\n<p translation-result=\"\">打开浏览器调试工具的控制台，会看到像这样的错误信息：</p>\n<code-example format=\"nocode\">\n  EXCEPTION: Template parse errors:\n    Can't bind to 'myHighlight' since it isn't a known property of 'p'.\n</code-example>\n<p translation-origin=\"off\">Angular detects that you're trying to bind to <em>something</em> but it can't find this directive\nin the module's <code>declarations</code> array.\nAfter specifying <code>HighlightDirective</code> in the <code>declarations</code> array,\nAngular knows it can apply the directive to components declared in this module.</p>\n<p translation-result=\"\">Angular 检测到你正在尝试绑定到<em>某些东西</em>，但它不认识。所以它在<code>declarations</code>元数据数组中查找。\n把<code>HighlightDirective</code>列在元数据的这个数组中，Angular 就会检查对应的导入语句，从而找到<code>highlight.directive.ts</code>，并了解<code>myHightlight</code>的功能。</p>\n</div>\n<p translation-origin=\"off\">To summarize, Angular found the <code>myHighlight</code> attribute on the <code>&#x3C;p></code> element.\nIt created an instance of the <code>HighlightDirective</code> class and\ninjected a reference to the <code>&#x3C;p></code> element into the directive's constructor\nwhich sets the <code>&#x3C;p></code> element's background style to yellow.</p>\n<p translation-result=\"\">总结：Angular 在<code>&#x3C;p></code>元素上发现了一个<code>myHighlight</code>属性。\n然后它创建了一个<code>HighlightDirective</code>类的实例，并把所在元素的引用注入到了指令的构造函数中。\n在构造函数中，我们把<code>&#x3C;p></code>元素的背景设置为了黄色。</p>\n<a id=\"respond-to-user\"></a>\n<h2 translation-origin=\"off\" id=\"respond-to-user-initiated-events\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#respond-to-user-initiated-events\"><i class=\"material-icons\">link</i></a>Respond to user-initiated events</h2>\n<h2 translation-result=\"\" id=\"响应用户引发的事件\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#响应用户引发的事件\"><i class=\"material-icons\">link</i></a>响应用户引发的事件</h2>\n<p translation-origin=\"off\">Currently, <code>myHighlight</code> simply sets an element color.\nThe directive could be more dynamic.\nIt could detect when the user mouses into or out of the element\nand respond by setting or clearing the highlight color.</p>\n<p translation-result=\"\">当前，<code>myHighlight</code>只是简单的设置元素的颜色。\n这个指令应该在用户鼠标悬浮一个元素时，设置它的颜色。</p>\n<p translation-origin=\"off\">Begin by adding <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> to the list of imported symbols;\nadd the <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> symbol as well because you'll need it soon.</p>\n<p translation-result=\"\">先把<code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>加进导入列表中，同时再添加<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>符号，因为我们很快就要用到它。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (imports)\" region=\"imports\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<p translation-origin=\"off\">Then add two eventhandlers that respond when the mouse enters or leaves,\neach adorned by the <code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> decorator.</p>\n<p translation-result=\"\">然后使用<code><a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>装饰器添加两个事件处理器，它们会在鼠标进入或离开时进行响应。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse-methods)\" region=\"mouse-methods\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight('yellow');\n}\n\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n  this.highlight(null);\n}\n\nprivate highlight(color: string) {\n  this.el.nativeElement.style.backgroundColor = color;\n}\n\n</code-example>\n<p translation-origin=\"off\">The <code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code> decorator lets you subscribe to events of the DOM\nelement that hosts an attribute directive, the <code>&#x3C;p></code> in this case.</p>\n<p translation-result=\"\"><code>@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a></code>装饰器引用属性型指令的宿主元素，在这个例子中就是<code>&#x3C;p></code>。</p>\n<div class=\"l-sub-section\">\n<p translation-origin=\"off\">Of course you could reach into the DOM with standard JavaScript and and attach event listeners manually.\nThere are at least three problems with <em>that</em> approach:</p>\n<p translation-result=\"\">当然，你可以通过标准的JavaScript方式手动给宿主 DOM 元素附加一个事件监听器。\n但这种方法至少有三个问题：</p>\n<ol>\n<li>\n<p translation-origin=\"off\">You have to write the listeners correctly.</p>\n<p translation-result=\"\">必须正确的书写事件监听器。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The code must <em>detach</em> the listener when the directive is destroyed to avoid memory leaks.</p>\n<p translation-result=\"\">当指令被销毁的时候，必须<em>拆卸</em>事件监听器，否则会导致内存泄露。</p>\n</li>\n<li>\n<p translation-origin=\"off\">Talking to DOM API directly isn't a best practice.</p>\n<p translation-result=\"\">必须直接和 DOM API 打交道，应该避免这样做。</p>\n</li>\n</ol>\n</div>\n<p translation-origin=\"off\">The handlers delegate to a helper method that sets the color on the DOM element, <code>el</code>,\nwhich you declare and initialize in the constructor.</p>\n<p translation-result=\"\">这些处理器委托给了一个辅助方法，它用于为DOM元素设置颜色，<code>el</code>就是你在构造器中声明和初始化过的。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (constructor)\" region=\"ctor\">\nconstructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n</code-example>\n<p translation-origin=\"off\">Here's the updated directive in full:</p>\n<p translation-result=\"\">下面是修改后的指令代码：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" title=\"src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n\n</code-example>\n<p translation-origin=\"off\">Run the app and confirm that the background color appears when the mouse hovers over the <code>p</code> and\ndisappears as it moves out.We run the app and confirm that the background color appears as we move the mouse over the <code>p</code> and\ndisappears as we move out.</p>\n<p translation-result=\"\">运行本应用并确认：当把鼠标移到<code>p</code>上的时候，背景色就出现了，而移开的时候，它消失了。</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-anim.gif\" alt=\"Second Highlight\" width=\"204\" height=\"72\">\n</figure>\n<a id=\"bindings\"></a>\n<h2 translation-origin=\"off\" id=\"pass-values-into-the-directive-with-an-input-data-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#pass-values-into-the-directive-with-an-input-data-binding\"><i class=\"material-icons\">link</i></a>Pass values into the directive with an <em>@Input</em> data binding</h2>\n<h2 translation-result=\"\" id=\"使用数据绑定向指令传递值\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#使用数据绑定向指令传递值\"><i class=\"material-icons\">link</i></a>使用数据绑定向指令传递值</h2>\n<p translation-origin=\"off\">Currently the highlight color is hard-coded <em>within</em> the directive. That's inflexible.\nIn this section, you give the developer the power to set the highlight color while applying the directive.</p>\n<p translation-result=\"\">现在的高亮颜色是硬编码在指令中的，这不够灵活。\n我们应该让指令的使用者可以在模板中通过绑定来设置颜色。</p>\n<p translation-origin=\"off\">Start by adding a <code>highlightColor</code> property to the directive class like this:</p>\n<p translation-result=\"\">我们先把<code>highlightColor</code>属性添加到指令类中，就像这样：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (highlightColor)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<a id=\"input\"></a>\n<h3 translation-origin=\"off\" id=\"binding-to-an-input-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#binding-to-an-input-property\"><i class=\"material-icons\">link</i></a>Binding to an <em>@Input</em> property</h3>\n<h3 translation-result=\"\" id=\"绑定到input属性\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#绑定到input属性\"><i class=\"material-icons\">link</i></a>绑定到<em>@Input</em>属性</h3>\n<p translation-origin=\"off\">Notice the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator. It adds metadata to the class that makes the directive's <code>highlightColor</code> property available for binding.</p>\n<p translation-result=\"\">注意看<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器。它往类上添加了一些元数据，从而让该指令的<code>highlightColor</code>能用于绑定。</p>\n<p translation-origin=\"off\">It's called an <em>input</em> property because data flows from the binding expression <em>into</em> the directive.\nWithout that input metadata, Angular rejects the binding; see <a href=\"guide/attribute-directives#why-input\" title=\"Why add @Input?\">below</a> for more about that.</p>\n<p translation-result=\"\">它之所以称为<em>输入</em>属性，是因为数据流是从绑定表达式流向指令内部的。\n如果没有这个元数据，Angular就会拒绝绑定，参见<a href=\"guide/attribute-directives#why-input\" title=\"为什么要添加@Input?\">稍后</a>了解更多。</p>\n<p translation-origin=\"off\">Try it by adding the following directive binding variations to the <code>AppComponent</code> template:</p>\n<p translation-result=\"\">试试把下列指令绑定变量添加到<code>AppComponent</code>的模板中：</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (excerpt)\" region=\"color-1\">\n&#x3C;p appHightlight highlightColor=\"yellow\">Highlighted in yellow&#x3C;/p>\n&#x3C;p appHightlight [highlightColor]=\"'orange'\">Highlighted in orange&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">Add a <code>color</code> property to the <code>AppComponent</code>.</p>\n<p translation-result=\"\">把<code>color</code>属性添加到<code>AppComponent</code>中：</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color = 'yellow';\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Let it control the highlight color with a property binding.</p>\n<p translation-result=\"\">让它通过属性绑定来控制高亮颜色。</p>\n<code-example path=\"attribute-directives/src/app/app.component.1.html\" linenums=\"false\" title=\"src/app/app.component.html (excerpt)\" region=\"color-2\">\n&#x3C;p appHightlight [highlightColor]=\"color\">Highlighted with parent component's color&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">That's good, but it would be nice to <em>simultaneously</em> apply the directive and set the color <em>in the same attribute</em> like this.</p>\n<p translation-result=\"\">很不错，但还可以更好。我们可以在应用该指令时在同一个属性中设置颜色，就像这样：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">The <code>[myHighlight]</code> attribute binding both applies the highlighting directive to the <code>&#x3C;p></code> element\nand sets the directive's highlight color with a property binding.\nYou're re-using the directive's attribute selector (<code>[myHighlight]</code>) to do both jobs.\nThat's a crisp, compact syntax.</p>\n<p translation-result=\"\"><code>[myHighlight]</code>属性同时做了两件事：把这个高亮指令应用到了<code>&#x3C;p></code>元素上，并且通过属性绑定设置了该指令的高亮颜色。\n我们复用了该指令的属性选择器<code>[myHighlight]</code>来同时完成它们。\n这是清爽、简约的语法。</p>\n<p translation-origin=\"off\">You'll have to rename the directive's <code>highlightColor</code> property to <code>myHighlight</code> because that's now the color property binding name.</p>\n<p translation-result=\"\">我们还要把该指令的<code>highlightColor</code>改名为<code>myHighlight</code>，因为它是颜色属性目前的绑定名。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (renamed to match directive selector)\" region=\"color-2\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() myHighlight: string;\n\n</code-example>\n<p translation-origin=\"off\">This is disagreeable. The word, <code>myHighlight</code>, is a terrible property name and it doesn't convey the property's intent.</p>\n<p translation-result=\"\">这可不好。因为<code>myHighlight</code>是一个糟糕的属性名，而且不能反映该属性的意图。</p>\n<a id=\"input-alias\"></a>\n<h3 translation-origin=\"off\" id=\"bind-to-an-input-alias\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-an-input-alias\"><i class=\"material-icons\">link</i></a>Bind to an <em>@Input</em> alias</h3>\n<h3 translation-result=\"\" id=\"绑定到input别名\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#绑定到input别名\"><i class=\"material-icons\">link</i></a>绑定到<em>@Input</em>别名</h3>\n<p translation-origin=\"off\">Fortunately you can name the directive property whatever you want <em>and</em> <strong><em>alias it</em></strong> for binding purposes.</p>\n<p translation-result=\"\">幸运的是，我们可以随意命名该指令的属性，并且<strong>给它指定一个用于绑定的别名</strong>。</p>\n<p translation-origin=\"off\">Restore the original property name and specify the selector as the alias in the argument to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>. </p>\n<p translation-result=\"\">恢复原始属性名，并在<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>的参数中把选择器<code>myHighlight</code>指定为别名。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color property with alias)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p translation-origin=\"off\"><em>Inside</em> the directive the property is known as <code>highlightColor</code>.\n<em>Outside</em> the directive, where you bind to it, it's known as <code>myHighlight</code>.</p>\n<p translation-result=\"\">在指令内部，该属性叫<code>highlightColor</code>，在外部，当我们绑定到它时，它叫<code>myHighlight</code>。</p>\n<p translation-origin=\"off\">You get the best of both worlds: the property name you want and the binding syntax you want:</p>\n<p translation-result=\"\">这是最好的结果：理想的内部属性名，理想的绑定语法：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">Now that you're binding to <code>highlightColor</code>, modify the <code>onMouseEnter()</code> method to use it.\nIf someone neglects to bind to <code>highlightColor</code>, highlight in red:</p>\n<p translation-result=\"\">现在，我们绑定到了<code>highlightColor</code>属性，并修改<code>onMouseEnter()</code>方法来使用它。\n如果有人忘了绑定到<code>highlightColor</code>，那就用红色进行高亮。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || 'red');\n}\n\n</code-example>\n<p translation-origin=\"off\">Here's the latest version of the directive class.</p>\n<p translation-result=\"\">这是最终版本的指令类。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.3.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (excerpt)\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"write-a-harness-to-try-it\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#write-a-harness-to-try-it\"><i class=\"material-icons\">link</i></a>Write a harness to try it</h2>\n<h2 translation-result=\"\" id=\"写个测试程序试验下\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#写个测试程序试验下\"><i class=\"material-icons\">link</i></a>写个测试程序试验下</h2>\n<p translation-origin=\"off\">It may be difficult to imagine how this directive actually works.\nIn this section, you'll turn <code>AppComponent</code> into a harness that\nlets you pick the highlight color with a radio button and bind your color choice to the directive.</p>\n<p translation-result=\"\">凭空想象该指令如何工作可不容易。\n在本节，我们将把<code>AppComponent</code>改成一个测试程序，它让你可以通过单选按钮来选取高亮颜色，并且把你选取的颜色绑定到指令中。</p>\n<p translation-origin=\"off\">Update <code>app.component.html</code> as follows:</p>\n<p translation-result=\"\">把<code>app.component.html</code>修改成这样：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (v2)\" region=\"v2\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h4>Pick a highlight color&#x3C;/h4>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">Revise the <code>AppComponent.color</code> so that it has no initial value.</p>\n<p translation-result=\"\">修改<code>AppComponent.color</code>，让它不再有初始值。</p>\n<code-example path=\"attribute-directives/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Here are the harness and directive in action.</p>\n<p translation-result=\"\">下面是测试程序和指令的动图。</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-v2-anim.gif\" alt=\"Highlight v.2\" width=\"432\" height=\"172\">\n</figure>\n<a id=\"second-property\"></a>\n<h2 translation-origin=\"off\" id=\"bind-to-a-second-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#bind-to-a-second-property\"><i class=\"material-icons\">link</i></a>Bind to a second property</h2>\n<h2 translation-result=\"\" id=\"绑定到第二个属性\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#绑定到第二个属性\"><i class=\"material-icons\">link</i></a>绑定到第二个属性</h2>\n<p translation-origin=\"off\">This highlight directive has a single customizable property. In a real app, it may need more.</p>\n<p translation-result=\"\">本例的指令只有一个可定制属性，真实的应用通常需要更多。</p>\n<p translation-origin=\"off\">At the moment, the default color—the color that prevails until\nthe user picks a highlight color—is hard-coded as \"red\".\nLet the template developer set the default color.</p>\n<p translation-result=\"\">目前，默认颜色（它在用户选取了高亮颜色之前一直有效）被硬编码为红色。我们要让模板的开发者也可以设置默认颜色。</p>\n<p translation-origin=\"off\">Add a second <strong>input</strong> property to <code>HighlightDirective</code> called <code>defaultColor</code>:</p>\n<p translation-result=\"\">把第二个名叫<code>defaultColor</code>的<strong>输入</strong>属性添加到<code>HighlightDirective</code>中：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (defaultColor)(excerpt)\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this.defaultColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Revise the directive's <code>onMouseEnter</code> so that it first tries to highlight with the <code>highlightColor</code>,\nthen with the <code>defaultColor</code>, and falls back to \"red\" if both properties are undefined.</p>\n<p translation-result=\"\">修改该指令的<code>onMouseEnter</code>，让它首先尝试使用<code>highlightColor</code>进行高亮，然后用<code>defaultColor</code>，如果它们都没有指定，那就用红色作为后备。</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (mouse-enter)\" region=\"mouse-enter\">\n@<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || this.defaultColor || 'red');\n}\n\n</code-example>\n<p translation-origin=\"off\">How do you bind to a second property when you're already binding to the <code>myHighlight</code> attribute name?</p>\n<p translation-result=\"\">当已经绑定过<code>myHighlight</code>属性时，要如何绑定到第二个属性呢？</p>\n<p translation-origin=\"off\">As with components, you can add as many directive property bindings as you need by stringing them along in the template.\nThe developer should be able to write the following template HTML to both bind to the <code>AppComponent.color</code>\nand fall back to \"violet\" as the default color.</p>\n<p translation-result=\"\">像组件一样，你也可以绑定到指令的很多属性，只要把它们依次写在模板中就行了。\n开发者可以绑定到<code>AppComponent.color</code>，并且用紫罗兰色作为默认颜色，代码如下：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (defaultColor)\" region=\"defaultColor\">\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">Angular knows that the <code>defaultColor</code> binding belongs to the <code>HighlightDirective</code>\nbecause you made it <em>public</em> with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p translation-result=\"\">Angular之所以知道<code>defaultColor</code>绑定属于<code>HighlightDirective</code>，是因为我们已经通过<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器把它设置成了<em>公共</em>属性。</p>\n<p translation-origin=\"off\">Here's how the harness should work when you're done coding.</p>\n<p translation-result=\"\">当这些代码完成时，测试程序工作时的动图如下：</p>\n<figure>\n  <img src=\"generated/images/guide/attribute-directives/highlight-directive-final-anim.gif\" alt=\"Final Highlight\" width=\"440\" height=\"212\">\n</figure>\n<h2 translation-origin=\"off\" id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<h2 translation-result=\"\" id=\"总结\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#总结\"><i class=\"material-icons\">link</i></a>总结</h2>\n<p translation-origin=\"off\">This page covered how to:</p>\n<p translation-result=\"\">本章介绍了如何：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/attribute-directives#write-directive\">Build an <strong>attribute directive</strong></a> that modifies the behavior of an element.</p>\n<p translation-result=\"\"><a href=\"guide/attribute-directives#write-directive\">构建一个<strong>属性型指令</strong></a>，它用于修改一个元素的行为。\n</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/attribute-directives#apply-directive\">Apply the directive</a> to an element in a template.</p>\n<p translation-result=\"\"><a href=\"guide/attribute-directives#apply-directive\">把一个指令应用到</a>模板中的某个元素上。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/attribute-directives#respond-to-user\">Respond to <strong>events</strong></a> that change the directive's behavior.</p>\n<p translation-result=\"\"><a href=\"guide/attribute-directives#respond-to-user\">响应<strong>事件</strong></a>以改变指令的行为。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><a href=\"guide/attribute-directives#bindings\"><strong>Bind</strong> values to the directive</a>.</p>\n<p translation-result=\"\"><a href=\"guide/attribute-directives#bindings\">把值<strong>绑定</strong>到指令中</a>。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">The final source code follows:</p>\n<p translation-result=\"\">最终的源码如下：</p>\n<code-tabs>\n  <code-pane title=\"app/app.component.ts\" path=\"attribute-directives/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  color: string;\n}\n\n\n</code-pane>\n  <code-pane title=\"app/app.component.html\" path=\"attribute-directives/src/app/app.component.html\">\n&#x3C;h1>My First <a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>&#x3C;/h1>\n\n&#x3C;h4>Pick a highlight color&#x3C;/h4>\n&#x3C;div>\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\">Green\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\">Yellow\n  &#x3C;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\">Cyan\n&#x3C;/div>\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n&#x3C;p [appHighlight]=\"color\" defaultColor=\"violet\">\n  Highlight me too!\n&#x3C;/p>\n\n</code-pane>\n  <code-pane title=\"app/highlight.directive.ts\" path=\"attribute-directives/src/app/highlight.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[appHighlight]'\n})\nexport class HighlightDirective {\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) { }\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() defaultColor: string;\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this.defaultColor || 'red');\n  }\n\n  @<a href=\"api/core/HostListener\" class=\"code-anchor\">HostListener</a>('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.nativeElement.style.backgroundColor = color;\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"app/app.module.ts\" path=\"attribute-directives/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"main.ts\" path=\"attribute-directives/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane title=\"index.html\" path=\"attribute-directives/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n  &#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;title><a href=\"api/core/Attribute\" class=\"code-anchor\">Attribute</a> Directives&#x3C;/title>\n    &#x3C;base href=\"/\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;app-root>&#x3C;/app-root>\n  &#x3C;/body>\n&#x3C;/html>\n\n\n</code-pane>\n</code-tabs>\n<p translation-origin=\"off\">You can also experience and download the <live-example title=\"Attribute Directive example\"></live-example>.</p>\n<p translation-result=\"\">你还可以体验和下载<live-example title=\"属性型指令范例\"></live-example>.</p>\n<a id=\"why-input\"></a>\n<h3 translation-origin=\"off\" id=\"appendix-why-add-input\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#appendix-why-add-input\"><i class=\"material-icons\">link</i></a>Appendix: Why add <em>@Input</em>?</h3>\n<h3 translation-result=\"\" id=\"附录：为什么要加input？\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-directives#附录：为什么要加input？\"><i class=\"material-icons\">link</i></a>附录：为什么要加<em>@Input</em>？</h3>\n<p translation-origin=\"off\">In this demo, the <code>hightlightColor</code> property is an <strong><em>input</em></strong> property of\nthe <code>HighlightDirective</code>. You've seen it applied without an alias:</p>\n<p translation-result=\"\">在这个例子中<code>hightlightColor</code>是<code>HighlightDirective</code>的一个<strong><em>输入型</em></strong>属性。我们见过它没有用别名时的代码：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.2.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() highlightColor: string;\n\n</code-example>\n<p translation-origin=\"off\">You've seen it with an alias:</p>\n<p translation-result=\"\">也见过用别名时的代码：</p>\n<code-example path=\"attribute-directives/src/app/highlight.directive.ts\" linenums=\"false\" title=\"src/app/highlight.directive.ts (color)\" region=\"color\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('appHighlight') highlightColor: string;\n\n</code-example>\n<p translation-origin=\"off\">Either way, the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator tells Angular that this property is\n<em>public</em> and available for binding by a parent component.\nWithout  <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>, Angular refuses to bind to the property.</p>\n<p translation-result=\"\">无论哪种方式，<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器都告诉Angular，该属性是<em>公共的</em>，并且能被父组件绑定。\n如果没有<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>，Angular就会拒绝绑定到该属性。</p>\n<p translation-origin=\"off\">You've bound template HTML to component properties before and never used <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>.\nWhat's different?</p>\n<p translation-result=\"\">但我们以前也曾经把模板HTML绑定到组件的属性，而且从来没有用过<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。\n差异何在？</p>\n<p translation-origin=\"off\">The difference is a matter of trust.\nAngular treats a component's template as <em>belonging</em> to the component.\nThe component and its template trust each other implicitly.\nTherefore, the component's own template may bind to <em>any</em> property of that component,\nwith or without the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p translation-result=\"\">差异在于信任度不同。\nAngular把组件的模板看做<em>从属于</em>该组件的。\n组件和它的模板默认会相互信任。\n这也就是意味着，组件自己的模板可以绑定到组件的<em>任意</em>属性，无论是否使用了<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器。</p>\n<p translation-origin=\"off\">But a component or directive shouldn't blindly trust <em>other</em> components and directives.\nThe properties of a component or directive are hidden from binding by default.\nThey are <em>private</em> from an Angular binding perspective.\nWhen adorned with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator, the property becomes <em>public</em> from an Angular binding perspective.\nOnly then can it be bound by some other component or directive.</p>\n<p translation-result=\"\">但组件或指令不应该盲目的信任其它组件或指令。\n因此组件或指令的属性默认是不能被绑定的。\n从Angular绑定机制的角度来看，它们是<em>私有</em>的，而当添加了<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>时，它们变成了<em>公共</em>的\n只有这样，它们才能被其它组件或属性绑定。</p>\n<p translation-origin=\"off\">You can tell if <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> is needed by the position of the property name in a binding.</p>\n<p translation-result=\"\">你可以根据属性名在绑定中出现的位置来判定是否要加<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>。</p>\n<ul>\n<li>\n<p translation-origin=\"off\">When it appears in the template expression to the <strong><em>right</em></strong> of the equals (=),\nit belongs to the template's component and does not require the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p translation-result=\"\">当它出现在等号<strong><em>右侧</em></strong>的模板表达式中时，它属于模板所在的组件，不需要<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器。</p>\n</li>\n<li>\n<p translation-origin=\"off\">When it appears in <strong>square brackets</strong> ([ ]) to the <strong>left</strong> of the equals (=),\nthe property belongs to some <em>other</em> component or directive;\nthat property must be adorned with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p translation-result=\"\">当它出现在等号<strong>左边</strong>的<strong>方括号（[ ]）</strong>中时，该属性属于<em>其它</em>组件或指令，它必须带有<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 装饰器。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Now apply that reasoning to the following example:</p>\n<p translation-result=\"\">试用此原理分析下列范例：</p>\n<code-example path=\"attribute-directives/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (color)\" region=\"color\">\n&#x3C;p [appHighlight]=\"color\">Highlight me!&#x3C;/p>\n\n</code-example>\n<ul>\n<li>\n<p translation-origin=\"off\">The <code>color</code> property in the expression on the right belongs to the template's component.\nThe template and its component trust each other.\nThe <code>color</code> property doesn't require the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p translation-result=\"\"><code>color</code>属性位于右侧的绑定表达式中，它属于模板所在的组件。\n该模板和组件相互信任。因此<code>color</code>不需要<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器。</p>\n</li>\n<li>\n<p translation-origin=\"off\">The <code>myHighlight</code> property on the left refers to an <em>aliased</em> property of the <code>HighlightDirective</code>,\nnot a property of the template's component. There are trust issues.\nTherefore, the directive property must carry the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> decorator.</p>\n<p translation-result=\"\">  <code>myHighlight</code>属性位于左侧，它引用了<code>MyHighlightDirective</code>中一个<em>带别名的</em>属性，它不是模板所属组件的一部分，因此存在信任问题。\n所以，该属性必须带<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code>装饰器。</p>\n</li>\n</ul>\n\n</div>"
}