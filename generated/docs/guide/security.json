{
  "id": "guide/security",
  "title": "安全",
  "contents": "\n<div class=\"content\">\n<h1 translation-origin=\"off\" id=\"security\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#security\"><i class=\"material-icons\">link</i></a>Security</h1>\n<h1 translation-result=\"\" id=\"安全\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#安全\"><i class=\"material-icons\">link</i></a>安全</h1>\n<p translation-origin=\"off\">This page describes Angular's built-in\nprotections against common web-application vulnerabilities and attacks such as cross-site\nscripting attacks. It doesn't cover application-level security, such as authentication (<em>Who is\nthis user?</em>) and authorization (<em>What can this user do?</em>).</p>\n<p translation-result=\"\">Web应用程序的安全涉及到很多方面。针对常见的漏洞和攻击，比如跨站脚本攻击，Angular提供了一些内置的保护措施。本章将讨论这些内置保护措施，但不会涉及应用级安全，比如用户认证（<em>这个用户是谁？</em>）和授权(<em>这个用户能做什么？</em>)。</p>\n<p translation-origin=\"off\">For more information about the attacks and mitigations described below, see <a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\">OWASP Guide Project</a>.</p>\n<p translation-result=\"\">要了解更多攻防信息，参见<a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\">开放式Web应用程序安全项目(OWASP)</a>。</p>\n<p translation-origin=\"off\">You can run the <live-example></live-example> in Plunker and download the code from there.</p>\n<p translation-result=\"\">运行<live-example></live-example>来试用本页的代码。</p>\n<h2 translation-origin=\"off\" id=\"report-issues\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#report-issues\"><i class=\"material-icons\">link</i></a>\nReporting vulnerabilities\n</h2>\n<h2 translation-result=\"\" id=\"report-issues\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#report-issues\"><i class=\"material-icons\">link</i></a>\n举报漏洞\n</h2>\n<p translation-origin=\"off\">To report vulnerabilities in Angular itself, email us at <a href=\"mailto:security@angular.io\">security@angular.io</a>.</p>\n<p translation-result=\"\">给我们（<a href=\"mailto:security@angular.io\">security@angular.io</a>）发邮件，报告Angular本身的漏洞。</p>\n<p translation-origin=\"off\">For more information about how Google handles security issues, see <a href=\"https://www.google.com/about/appsecurity/\">Google's security\nphilosophy</a>.</p>\n<p translation-result=\"\">要了解关于“谷歌如何处理安全问题”的更多信息，参见<a href=\"https://www.google.com/about/appsecurity/\">谷歌的安全哲学</a>。</p>\n<h2 translation-origin=\"off\" id=\"best-practices\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#best-practices\"><i class=\"material-icons\">link</i></a>\nBest practices\n</h2>\n<h2 translation-result=\"\" id=\"best-practices\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#best-practices\"><i class=\"material-icons\">link</i></a>\n最佳实践\n</h2>\n<ul>\n<li>\n<p translation-origin=\"off\"><strong>Keep current with the latest Angular library releases.</strong>\nWe regularly update the Angular libraries, and these updates may fix security defects discovered in\nprevious versions. Check the Angular <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">change\nlog</a> for security-related updates.</p>\n<p translation-result=\"\">  <strong>及时把Angular包更新到最新版本。</strong>\n我们会频繁的更新Angular库，这些更新可能会修复之前版本中发现的安全漏洞。查看Angular的<a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">更新记录</a>，了解与安全有关的更新。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>Don't modify your copy of Angular.</strong>\nPrivate, customized versions of Angular tend to fall behind the current version and may not include\nimportant security fixes and enhancements. Instead, share your Angular improvements with the\ncommunity and make a pull request.</p>\n<p translation-result=\"\">  <strong>不要修改你的Angular副本。</strong>\n私有的、定制版的Angular往往跟不上最新版本，这可能导致你忽略重要的安全修复与增强。反之，应该在社区共享你对Angular所做的改进并创建Pull Request。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>Avoid Angular APIs marked in the documentation as “<em>Security Risk</em>.”</strong>\nFor more information, see the <a href=\"guide/security#bypass-security-apis\">Trusting safe values</a> section of this page.</p>\n<p translation-result=\"\">  <strong>避免使用本文档中带“<a href=\"guide/security#bypass-security-apis\"><em>安全风险</em></a>”标记的Angular API。</strong>\n要了解更多信息，请参阅本章的<a href=\"guide/security#bypass-security-apis\">信任那些安全的值</a>部分。</p>\n</li>\n</ul>\n<p translation-origin=\"off\"><a id=\"xss\"></a></p>\n<h2 translation-origin=\"off\" id=\"preventing-cross-site-scripting-xss\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#preventing-cross-site-scripting-xss\"><i class=\"material-icons\">link</i></a>Preventing cross-site scripting (XSS)</h2>\n<h2 translation-result=\"\" id=\"防范跨站脚本xss攻击\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#防范跨站脚本xss攻击\"><i class=\"material-icons\">link</i></a>防范跨站脚本(XSS)攻击</h2>\n<p translation-origin=\"off\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site scripting (XSS)</a> enables attackers\nto inject malicious code into web pages. Such code can then, for example, steal user data (in\nparticular, login data) or perform actions to impersonate the user. This is one of the most\ncommon attacks on the web.</p>\n<p translation-result=\"\"><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">跨站脚本(XSS)</a>允许攻击者将恶意代码注入到页面中。这些代码可以偷取用户数据\n（特别是它们的登录数据），还可以冒充用户执行操作。它是Web上最常见的攻击方式之一。</p>\n<p translation-origin=\"off\">To block XSS attacks, you must prevent malicious code from entering the DOM(Document Object Model). For example, if\nattackers can trick you into inserting a <code>&#x3C;script></code> tag in the DOM, they can run arbitrary code on\nyour website. The attack isn't limited to <code>&#x3C;script></code> tags—many elements and properties in the\nDOM allow code execution, for example, <code>&#x3C;img onerror=\"...\"></code> and <code>&#x3C;a href=\"javascript:...\"></code>. If\nattacker-controlled data enters the DOM, expect security vulnerabilities.</p>\n<p translation-result=\"\">为了防范XSS攻击，我们必须阻止恶意代码进入DOM。比如，如果某个攻击者能骗我们把<code>&#x3C;script></code>标签插入到DOM，就可以在我们的网站上运行任何代码。\n除了<code>&#x3C;script></code>，攻击者还可以使用很多DOM元素和属性来执行代码，比如<code>&#x3C;img onerror=\"...\"></code>、<code>&#x3C;a href=\"javascript:...\"></code>。\n如果攻击者所控制的数据混进了DOM，就会导致安全漏洞。</p>\n<h3 translation-origin=\"off\" id=\"angulars-cross-site-scripting-security-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#angulars-cross-site-scripting-security-model\"><i class=\"material-icons\">link</i></a>Angular’s cross-site scripting security model</h3>\n<h3 translation-result=\"\" id=\"angular的跨站脚本安全模型\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#angular的跨站脚本安全模型\"><i class=\"material-icons\">link</i></a>Angular的“跨站脚本安全模型”</h3>\n<p translation-origin=\"off\">To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value\nis inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation,\nAngular sanitizes and escapes untrusted values.</p>\n<p translation-result=\"\">为了系统性的防范XSS问题，Angular默认把所有值都当做不可信任的。\n当值从模板中以属性（Property）、DOM元素属性（Attribte)、CSS类绑定或插值表达式等途径插入到DOM中的时候，\nAngular将对这些值进行无害化处理（Sanitize），对不可信的值进行编码。</p>\n<p translation-origin=\"off\"><em>Angular templates are the same as executable code</em>: HTML, attributes, and binding expressions\n(but not the values bound) in templates are trusted to be safe. This means that applications must\nprevent values that an attacker can control from ever making it into the source code of a\ntemplate. Never generate template source code by concatenating user input and templates.\nTo prevent these vulnerabilities, use\nthe <a href=\"guide/security#offline-template-compiler\">offline template compiler</a>, also known as <em>template injection</em>.</p>\n<p translation-result=\"\"><strong>Angular的模板同样是可执行的</strong>：模板中的HTML、Attribute和绑定表达式（还没有绑定到值的时候）会被当做可信任的。\n这意味着应用必须防止把可能被攻击者控制的值直接编入模板的源码中。永远不要根据用户的输入和原始模板动态生成模板源码！\n使用<a href=\"guide/security#offline-template-compiler\">离线模板编译器</a>是防范这类“模板注入”漏洞的有效途径。</p>\n<h3 translation-origin=\"off\" id=\"sanitization-and-security-contexts\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#sanitization-and-security-contexts\"><i class=\"material-icons\">link</i></a>Sanitization and security contexts</h3>\n<h3 translation-result=\"\" id=\"无害化处理与安全环境\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#无害化处理与安全环境\"><i class=\"material-icons\">link</i></a>无害化处理与安全环境</h3>\n<p translation-origin=\"off\"><em>Sanitization</em> is the inspection of an untrusted value, turning it into a value that's safe to insert into\nthe DOM. In many cases, sanitization doesn't change a value at all. Sanitization depends on context:\na value that's harmless in CSS is potentially dangerous in a URL.</p>\n<p translation-result=\"\">无害化处理会审查不可信的值，并将它们转换成可以安全插入到DOM的形式。多数情况下，这些值并不会在处理过程中发生任何变化。\n无害化处理的方式取决于所在的环境：一个在CSS里面无害的值，可能在URL里很危险。</p>\n<p translation-origin=\"off\">Angular defines the following security contexts:</p>\n<p translation-result=\"\">Angular定义了四个安全环境 - HTML，样式，URL，和资源URL：</p>\n<ul>\n<li>\n<p translation-origin=\"off\"><strong>HTML</strong> is used when interpreting a value as HTML, for example, when binding to <code>innerHtml</code>.</p>\n<p translation-result=\"\"><strong>HTML</strong>：值需要被解释为HTML时使用，比如当绑定到<code>innerHTML</code>时。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>Style</strong> is used when binding CSS into the <code>style</code> property.</p>\n<p translation-result=\"\"><strong>样式</strong>：值需要作为CSS绑定到<code>style</code>属性时使用。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>URL</strong> is used for URL properties such as <code>&#x3C;a href></code>.</p>\n<p translation-result=\"\"><strong>URL</strong>：值需要被用作URL属性时使用，比如<code>&#x3C;a href></code>。</p>\n</li>\n<li>\n<p translation-origin=\"off\"><strong>Resource URL</strong> is a URL that will be loaded and executed as code, for example, in <code>&#x3C;script src></code>.</p>\n<p translation-result=\"\"><strong>资源URL</strong>：值需要被当做代码而加载并执行时使用，比如<code>&#x3C;script src></code>中的URL。</p>\n</li>\n</ul>\n<p translation-origin=\"off\">Angular sanitizes untrusted values for HTML, styles, and URLs; sanitizing resource URLs isn't\npossible because they contain arbitrary code. In development mode, Angular prints a console warning\nwhen it has to change a value during sanitization.</p>\n<p translation-result=\"\">Angular会对前三项中种不可信的值进行无害化处理。但Angular无法对第四种资源URL进行无害化，因为它们可能包含任何代码。在开发模式下，\n如果Angular在进行无害化处理时需要被迫改变一个值，它就会在控制台上输出一个警告。</p>\n<h3 translation-origin=\"off\" id=\"sanitization-example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#sanitization-example\"><i class=\"material-icons\">link</i></a>Sanitization example</h3>\n<h3 translation-result=\"\" id=\"无害化示例\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#无害化示例\"><i class=\"material-icons\">link</i></a>无害化示例</h3>\n<p translation-origin=\"off\">The following template binds the value of <code>htmlSnippet</code>, once by interpolating it into an element's\ncontent, and once by binding it to the <code>innerHTML</code> property of an element:</p>\n<p translation-result=\"\">下面的例子绑定了<code>htmlSnippet</code>的值，一次把它放进插值表达式里，另一次把它绑定到元素的<code>innerHTML</code>属性上。</p>\n<code-example path=\"security/src/app/inner-html-binding.component.html\" title=\"src/app/inner-html-binding.component.html\">\n&#x3C;h3>Binding innerHTML&#x3C;/h3>\n&#x3C;p>Bound value:&#x3C;/p>\n&#x3C;p class=\"e2e-inner-html-interpolated\">{{htmlSnippet}}&#x3C;/p>\n&#x3C;p>Result of binding to innerHTML:&#x3C;/p>\n&#x3C;p class=\"e2e-inner-html-bound\" [innerHTML]=\"htmlSnippet\">&#x3C;/p>\n\n\n</code-example>\n<p translation-origin=\"off\">Interpolated content is always escaped—the HTML isn't interpreted and the browser displays\nangle brackets in the element's text content.</p>\n<p translation-result=\"\">插值表达式的内容总会被编码 - 其中的HTML不会被解释，所以浏览器会在元素的文本内容中显示尖括号。</p>\n<p translation-origin=\"off\">For the HTML to be interpreted, bind it to an HTML property such as <code>innerHTML</code>. But binding\na value that an attacker might control into <code>innerHTML</code> normally causes an XSS\nvulnerability. For example, code contained in a <code>&#x3C;script></code> tag is executed:</p>\n<p translation-result=\"\">如果希望这段HTML被正常解释，就必须绑定到一个HTML属性上，比如<code>innerHTML</code>。但是如果把一个可能被攻击者控制的值绑定到<code>innerHTML</code>就会导致XSS漏洞。\n比如，包含在<code>&#x3C;script></code>标签的代码就会被执行：</p>\n<code-example path=\"security/src/app/inner-html-binding.component.ts\" linenums=\"false\" title=\"src/app/inner-html-binding.component.ts (class)\" region=\"class\">\nexport class InnerHtmlBindingComponent {\n  // For example, a user/attacker-controlled value from a URL.\n  htmlSnippet = 'Template &#x3C;script>alert(\"0wned\")&#x3C;/script> &#x3C;b>Syntax&#x3C;/b>';\n}\n\n\n</code-example>\n<p translation-origin=\"off\">Angular recognizes the value as unsafe and automatically sanitizes it, which removes the <code>&#x3C;script></code>\ntag but keeps safe content such as the text content of the <code>&#x3C;script></code> tag and the <code>&#x3C;b></code> element.</p>\n<p translation-result=\"\">Angular认为这些值是不安全的，并自动进行无害化处理。它会移除<code>&#x3C;script></code>标签，但保留安全的内容，比如该片段中的文本内容或<code>&#x3C;b></code>元素。</p>\n<figure>\n  <img src=\"generated/images/guide/security/binding-inner-html.png\" alt=\"A screenshot showing interpolated and bound HTML values\" width=\"228\" height=\"17\">\n</figure>\n<h3 translation-origin=\"off\" id=\"avoid-direct-use-of-the-dom-apis\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#avoid-direct-use-of-the-dom-apis\"><i class=\"material-icons\">link</i></a>Avoid direct use of the DOM APIs</h3>\n<h3 translation-result=\"\" id=\"避免直接使用dom-api\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#避免直接使用dom-api\"><i class=\"material-icons\">link</i></a>避免直接使用DOM API</h3>\n<p translation-origin=\"off\">The built-in browser DOM APIs don't automatically protect you from security vulnerabilities.\nFor example, <code>document</code>, the node available through <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>, and many third-party APIs\ncontain unsafe methods. Avoid directly interacting with the DOM and instead use Angular\ntemplates where possible.</p>\n<p translation-result=\"\">浏览器内置的DOM API不会自动针对安全漏洞进行防护。比如，<code>document</code>（它可以通过<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code>访问）以及其它第三方API都可能包含不安全的方法。\n要避免直接与DOM交互，只要可能，就尽量使用Angular模板。</p>\n<h3 translation-origin=\"off\" id=\"content-security-policy\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#content-security-policy\"><i class=\"material-icons\">link</i></a>Content security policy</h3>\n<h3 translation-result=\"\" id=\"内容安全策略\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#内容安全策略\"><i class=\"material-icons\">link</i></a>内容安全策略</h3>\n<p translation-origin=\"off\">Content Security Policy (CSP) is a defense-in-depth\ntechnique to prevent XSS. To enable CSP, configure your web server to return an appropriate\n<code>Content-Security-Policy</code> HTTP header. Read more about content security policy at\n<a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\">An Introduction to Content Security Policy</a>\non the HTML5Rocks website.</p>\n<p translation-result=\"\"><a href=\"https://developer.mozilla.org/en-\">内容安全策略(CSP)</a>是用来防范XSS的纵深防御技术。\n要打开CSP，请配置你的Web服务器，让它返回合适的HTTP头<code>Content_Security_Policy</code>。\n要了解关于内容安全策略的更多信息，请参阅HTML5Rocks上的<a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\">内容安全策略简介</a></p>\n<a id=\"offline-template-compiler\"></a>\n<h3 translation-origin=\"off\" id=\"use-the-offline-template-compiler\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#use-the-offline-template-compiler\"><i class=\"material-icons\">link</i></a>Use the offline template compiler</h3>\n<h3 translation-result=\"\" id=\"使用离线模板编译器\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#使用离线模板编译器\"><i class=\"material-icons\">link</i></a>使用离线模板编译器</h3>\n<p translation-origin=\"off\">The offline template compiler prevents a whole class of vulnerabilities called template injection,\nand greatly improves application performance. Use the offline template compiler in production\ndeployments; don't dynamically generate templates. Angular trusts template code, so generating\ntemplates, in particular templates containing user data, circumvents Angular's built-in protections.\nFor information about dynamically constructing forms in a safe way, see the\n<a href=\"guide/dynamic-form\">Dynamic Forms</a> guide page.</p>\n<p translation-result=\"\">离线模板编译器阻止了一整套被称为“模板注入”的漏洞，并能显著增强应用程序的性能。尽量在产品发布时使用离线模板编译器，\n而不要动态生成模板（比如在代码中拼接字符串生成模板）。由于Angular会信任模板本身的代码，所以，动态生成的模板 —— 特别是包含用户数据的模板 —— 会绕过Angular自带的保护机制。\n要了解如何用安全的方式动态创建表单，请参见<a href=\"guide/dynamic-form\">动态表单烹饪宝典</a>一章。</p>\n<h3 translation-origin=\"off\" id=\"server-side-xss-protection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#server-side-xss-protection\"><i class=\"material-icons\">link</i></a>Server-side XSS protection</h3>\n<h3 translation-result=\"\" id=\"服务器端xss保护\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#服务器端xss保护\"><i class=\"material-icons\">link</i></a>服务器端XSS保护</h3>\n<p translation-origin=\"off\">HTML constructed on the server is vulnerable to injection attacks. Injecting template code into an\nAngular application is the same as injecting executable code into the\napplication: it gives the attacker full control over the application. To prevent this,\nuse a templating language that automatically escapes values to prevent XSS vulnerabilities on\nthe server. Don't generate Angular templates on the server side using a templating language; doing this\ncarries a high risk of introducing template-injection vulnerabilities.</p>\n<p translation-result=\"\">服务器端构造的HTML很容易受到注入攻击。当需要在服务器端生成HTML时（比如Angular应用的初始页面），\n务必使用一个能够自动进行无害化处理以防范XSS漏洞的后端模板语言。不要在服务器端使用模板语言生成Angular模板，\n这样会带来很高的“模板注入”风险。</p>\n<h2 translation-origin=\"off\" id=\"bypass-security-apis\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#bypass-security-apis\"><i class=\"material-icons\">link</i></a>\n  Trusting safe values\n</h2>\n<h2 translation-result=\"\" id=\"bypass-security-apis\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#bypass-security-apis\"><i class=\"material-icons\">link</i></a>\n  信任安全值\n</h2>\n<p translation-origin=\"off\">Sometimes applications genuinely need to include executable code, display an <code>&#x3C;iframe></code> from some\nURL, or construct potentially dangerous URLs. To prevent automatic sanitization in any of these\nsituations, you can tell Angular that you inspected a value, checked how it was generated, and made\nsure it will always be secure. But <em>be careful</em>. If you trust a value that might be malicious, you\nare introducing a security vulnerability into your application. If in doubt, find a professional\nsecurity reviewer.</p>\n<p translation-result=\"\">有时候，应用程序确实需要包含可执行的代码，比如使用URL显示<code>&#x3C;iframe></code>，或者构造出有潜在危险的URL。\n为了防止在这种情况下被自动无害化，你可以告诉Angular：我已经审查了这个值，检查了它是怎么生成的，并确信它总是安全的。\n但是<strong>千万要小心</strong>！如果你信任了一个可能是恶意的值，就会在应用中引入一个安全漏洞。如果你有疑问，请找一个安全专家复查下。</p>\n<p translation-origin=\"off\">To mark a value as trusted, inject <code><a href=\"api/platform-browser/DomSanitizer\" class=\"code-anchor\">DomSanitizer</a></code> and call one of the\nfollowing methods:</p>\n<p translation-result=\"\">注入<code><a href=\"api/platform-browser/DomSanitizer\" class=\"code-anchor\">DomSanitizer</a></code>服务，然后调用下面的方法之一，你就可以把一个值标记为可信任的。</p>\n<ul>\n<li><code>bypassSecurityTrustHtml</code></li>\n<li><code>bypassSecurityTrustScript</code></li>\n<li><code>bypassSecurityTrustStyle</code></li>\n<li><code>bypassSecurityTrustUrl</code></li>\n<li><code>bypassSecurityTrustResourceUrl</code></li>\n</ul>\n<p translation-origin=\"off\">Remember, whether a value is safe depends on context, so choose the right context for\nyour intended use of the value. Imagine that the following template needs to bind a URL to a\n<code>javascript:alert(...)</code> call:</p>\n<p translation-result=\"\">记住，一个值是否安全取决于它所在的环境，所以你要为这个值按预定的用法选择正确的环境。假设下面的模板需要把<code>javascript.alert(...)</code>方法绑定到URL。</p>\n<code-example path=\"security/src/app/bypass-security.component.html\" linenums=\"false\" title=\"src/app/bypass-security.component.html (URL)\" region=\"URL\">\n&#x3C;h4>An untrusted URL:&#x3C;/h4>\n&#x3C;p>&#x3C;a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\">Click me&#x3C;/a>&#x3C;/p>\n&#x3C;h4>A trusted URL:&#x3C;/h4>\n&#x3C;p>&#x3C;a class=\"e2e-trusted-url\" [href]=\"trustedUrl\">Click me&#x3C;/a>&#x3C;/p>\n\n</code-example>\n<p translation-origin=\"off\">Normally, Angular automatically sanitizes the URL, disables the dangerous code, and\nin development mode, logs this action to the console. To prevent\nthis, mark the URL value as a trusted URL using the <code>bypassSecurityTrustUrl</code> call:</p>\n<p translation-result=\"\">通常，Angular会自动无害化这个URL并禁止危险的代码。为了防止这种行为，我们可以调用<code>bypassSecurityTrustUrl</code>把这个URL值标记为一个可信任的URL：</p>\n<code-example path=\"security/src/app/bypass-security.component.ts\" linenums=\"false\" title=\"src/app/bypass-security.component.ts (trust-url)\" region=\"trust-url\">\nconstructor(private sanitizer: <a href=\"api/platform-browser/DomSanitizer\" class=\"code-anchor\">DomSanitizer</a>) {\n  // javascript: URLs are dangerous if attacker controlled.\n  // Angular sanitizes them in data binding, but you can\n  // explicitly tell Angular to trust this value:\n  this.dangerousUrl = 'javascript:alert(\"Hi there\")';\n  this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/security/bypass-security-component.png\" alt=\"A screenshot showing an alert box created from a trusted URL\" width=\"454\" height=\"175\">\n</figure>\n<p translation-origin=\"off\">If you need to convert user input into a trusted value, use a\ncontroller method. The following template allows users to enter a YouTube video ID and load the\ncorresponding video in an <code>&#x3C;iframe></code>. The <code>&#x3C;iframe src></code> attribute is a resource URL security\ncontext, because an untrusted source can, for example, smuggle in file downloads that unsuspecting users\ncould execute. So call a method on the controller to construct a trusted video URL, which causes\nAngular to allow binding into <code>&#x3C;iframe src></code>:</p>\n<p translation-result=\"\">如果需要把用户输入转换为一个可信任的值，我们可以很方便的在控制器方法中处理。下面的模板允许用户输入一个YouTube视频的ID，\n然后把相应的视频加载到<code>&#x3C;iframe></code>中。<code>&#x3C;iframe src></code>是一个“资源URL”的安全环境，因为不可信的源码可能作为文件下载到本地，被毫无防备的用户执行。\n所以我们要调用一个控制器方法来构造一个新的、可信任的视频URL，然后把它绑定到<code>&#x3C;iframe src></code>。</p>\n<code-example path=\"security/src/app/bypass-security.component.html\" linenums=\"false\" title=\"src/app/bypass-security.component.html (iframe)\" region=\"iframe\">\n&#x3C;h4>Resource URL:&#x3C;/h4>\n&#x3C;p>Showing: {{dangerousVideoUrl}}&#x3C;/p>\n&#x3C;p>Trusted:&#x3C;/p>\n&#x3C;iframe class=\"e2e-iframe-trusted-src\" width=\"640\" height=\"390\" [src]=\"videoUrl\">&#x3C;/iframe>\n&#x3C;p>Untrusted:&#x3C;/p>\n&#x3C;iframe class=\"e2e-iframe-untrusted-src\" width=\"640\" height=\"390\" [src]=\"dangerousVideoUrl\">&#x3C;/iframe>\n\n\n</code-example>\n<code-example path=\"security/src/app/bypass-security.component.ts\" linenums=\"false\" title=\"src/app/bypass-security.component.ts (trust-video-url)\" region=\"trust-video-url\">\nupdateVideoUrl(id: string) {\n  // Appending an ID to a YouTube URL is safe.\n  // Always make sure to construct <a href=\"api/platform-browser/SafeValue\" class=\"code-anchor\">SafeValue</a> objects as\n  // close as possible to the input data so\n  // that it's easier to check if the value is safe.\n  this.dangerousVideoUrl = 'https://www.youtube.com/embed/' + id;\n  this.videoUrl =\n      this.sanitizer.bypassSecurityTrustResourceUrl(this.dangerousVideoUrl);\n}\n\n</code-example>\n<h2 translation-origin=\"off\" id=\"http\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#http\"><i class=\"material-icons\">link</i></a>\n  HTTP-level vulnerabilities\n</h2>\n<h2 translation-result=\"\" id=\"http\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#http\"><i class=\"material-icons\">link</i></a>\n  HTTP级别的漏洞\n</h2>\n<p translation-origin=\"off\">Angular has built-in support to help prevent two common HTTP vulnerabilities, cross-site request\nforgery (CSRF or XSRF) and cross-site script inclusion (XSSI). Both of these must be mitigated primarily\non the server side, but Angular provides helpers to make integration on the client side easier.</p>\n<p translation-result=\"\">Angular内置了一些支持来防范两个常见的HTTP漏洞：跨站请求伪造（XSRF）和跨站脚本包含（XSSI）。\n这两个漏洞主要在服务器端防范，但是Angular也自带了一些辅助特性，可以让客户端的集成变得更容易。</p>\n<h3 translation-origin=\"off\" id=\"xsrf\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#xsrf\"><i class=\"material-icons\">link</i></a>\n  Cross-site request forgery\n</h3>\n<h3 translation-result=\"\" id=\"xsrf\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#xsrf\"><i class=\"material-icons\">link</i></a>\n  跨站请求伪造（XSRF）\n</h3>\n<p translation-origin=\"off\">In a cross-site request forgery (CSRF or XSRF), an attacker tricks the user into visiting\na different web page (such as <code>evil.com</code>) with malignant code that secretly sends a malicious request\nto the application's web server (such as <code>example-bank.com</code>).</p>\n<p translation-result=\"\">在跨站请求伪造（XSRF或CSFR）中，攻击者欺骗用户，让他们访问一个假冒页面(例如<code>evil.com</code>)，\n该页面带有恶意代码，秘密的向你的应用程序服务器发送恶意请求(例如<code>example-bank.com</code>)。</p>\n<p translation-origin=\"off\">Assume the user is logged into the application at <code>example-bank.com</code>.\nThe user opens an email and clicks a link to <code>evil.com</code>, which opens in a new tab.</p>\n<p translation-result=\"\">假设用户已经在<code>example-bank.com</code>登录。用户打开一个邮件，点击里面的链接，在新页面中打开<code>evil.com</code>。</p>\n<p translation-origin=\"off\">The <code>evil.com</code> page immediately sends a malicious request to <code>example-bank.com</code>.\nPerhaps it's a request to transfer money from the user's account to the attacker's account.\nThe browser automatically sends the <code>example-bank.com</code> cookies (including the authentication cookie) with this request.</p>\n<p translation-result=\"\">该<code>evil.com</code>页面立刻发送恶意请求到<code>example-bank.com</code>。这个请求可能是从用户账户转账到攻击者的账户。\n与该请求一起，浏览器自动发出<code>example-bank.com</code>的cookie。If the <code>example-bank.com</code> server lacks XSRF protection, it can't tell the difference between a legitimate\nrequest from the application and the forged request from <code>evil.com</code>.如果<code>example-bank.com</code>服务器缺乏XSRF保护，就无法辨识请求是从应用程序发来的合法请求还是从<code>evil.com</code>来的假请求。</p>\n<p translation-origin=\"off\">To prevent this, the application must ensure that a user request originates from the real\napplication, not from a different site.\nThe server and client must cooperate to thwart this attack.</p>\n<p translation-result=\"\">为了防止这种情况，你必须确保每个用户的请求都是从你自己的应用中发出的，而不是从另一个网站发出的。\n客户端和服务器必须合作来抵挡这种攻击。</p>\n<p translation-origin=\"off\">In a common anti-XSRF technique, the application server sends a randomly\ngenerated authentication token in a cookie.\nThe client code reads the cookie and adds a custom request header with the token in all subsequent requests.\nThe server compares the received cookie value to the request header value and rejects the request if the values are missing or don't match.</p>\n<p translation-result=\"\">常见的反XSRF技术是服务器随机生成一个用户认证令牌到cookie中。\n客户端代码获取这个cookie，并用它为接下来所有的请求添加自定义请求页头。\n服务器比较收到的cookie值与请求页头的值，如果它们不匹配，便拒绝请求。</p>\n<p translation-origin=\"off\">This technique is effective because all browsers implement the <em>same origin policy</em>. Only code from the website\non which cookies are set can read the cookies from that site and set custom headers on requests to that site.\nThat means only your application can read this cookie token and set the custom header. The malicious code on <code>evil.com</code> can't.</p>\n<p translation-result=\"\">这个技术之所以有效，是因为所有浏览器都实现了<em>同源策略</em>。只有设置cookie的网站的代码可以访问该站的cookie，并为该站的请求设置自定义页头。\n这就是说，只有你的应用程序可以获取这个cookie令牌和设置自定义页头。<code>evil.com</code>的恶意代码不能。</p>\n<p translation-origin=\"off\">Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> has built-in support for the client-side half of this technique. Read about it more in the <a href=\"/guide/http\">HttpClient guide</a>.</p>\n<p translation-result=\"\">Angular 的 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 对这项技术的客户端部分提供了内置的支持要了解更多信息，参见 <a href=\"/guide/http\">HttpClient部分</a>。</p>\n<p translation-origin=\"off\">For information about CSRF at the Open Web Application Security Project (OWASP), see\n<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">Cross-Site Request Forgery (CSRF)</a> and\n<a href=\"https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet\">Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</a>.\nThe Stanford University paper\n<a href=\"https://seclab.stanford.edu/websec/csrf/csrf.pdf\">Robust Defenses for Cross-Site Request Forgery</a> is a rich source of detail.</p>\n<p translation-result=\"\">到开放式Web应用程序安全项目(OWASP)的<a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">这里</a>\n和<a href=\"https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet\">这里</a>学习更多关于跨站请求伪造（XSRF）的知识。\n这个<a href=\"https://seclab.stanford.edu/websec/csrf/csrf.pdf\">斯坦福大学论文</a>有详尽的细节。</p>\n<p translation-origin=\"off\">See also Dave Smith's easy-to-understand\n<a href=\"https://www.youtube.com/watch?v=9inczw6qtpY\" title=\"Cross Site Request Funkery Securing Your Angular Apps From Evil Doers\">talk on XSRF at AngularConnect 2016</a>.</p>\n<p translation-result=\"\">参见Dave Smith在<a href=\"https://www.youtube.com/watch?v=9inczw6qtpY\" target=\"_blank\" title=\"Cross Site Request Funkery Securing Your Angular Apps From Evil Doers\">AngularConnect 2016关于XSRF的演讲</a>。</p>\n<h3 translation-origin=\"off\" id=\"xssi\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#xssi\"><i class=\"material-icons\">link</i></a>\n  Cross-site script inclusion (XSSI)\n</h3>\n<h3 translation-result=\"\" id=\"xssi\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#xssi\"><i class=\"material-icons\">link</i></a>\n  跨站脚本包含(XSSI)\n</h3>\n<p translation-origin=\"off\">Cross-site script inclusion, also known as JSON vulnerability, can allow an attacker's website to\nread data from a JSON API. The attack works on older browsers by overriding native JavaScript\nobject constructors, and then including an API URL using a <code>&#x3C;script></code> tag.</p>\n<p translation-result=\"\">跨站脚本包含，也被称为Json漏洞，它可以允许一个攻击者的网站从JSON API读取数据。这种攻击发生在老的浏览器上，\n它重写原生JavaScript对象的构造函数，然后使用<code>&#x3C;script></code>标签包含一个API的URL。</p>\n<p translation-origin=\"off\">This attack is only successful if the returned JSON is executable as JavaScript. Servers can\nprevent an attack by prefixing all JSON responses to make them non-executable, by convention, using the\nwell-known string <code>\")]}',\\n\"</code>.</p>\n<p translation-result=\"\">只有在返回的JSON能像JavaScript一样可以被执行时，这种攻击才会生效。所以服务端会约定给所有JSON响应体加上前缀<code>\")]}',\\n\"</code>，来把它们标记为不可执行的，\n以防范这种攻击。</p>\n<p translation-origin=\"off\">Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> library recognizes this convention and automatically strips the string\n<code>\")]}',\\n\"</code> from all responses before further parsing.</p>\n<p translation-result=\"\">Angular的<code><a href=\"api/http/Http\" class=\"code-anchor\">Http</a></code>库会识别这种约定，并在进一步解析之前，自动把字符串<code>\")]}',\\n\"</code>从所有响应中去掉。</p>\n<p translation-origin=\"off\">For more information, see the XSSI section of this <a href=\"https://security.googleblog.com/2011/05/website-security-for-webmasters.html\">Google web security blog\npost</a>.</p>\n<p translation-result=\"\">要学习更多这方面的知识，请参见<a href=\"https://security.googleblog.com/2011/05/website-security-for-webmasters.html\">谷歌Web安全博客文章</a>的XSSI小节。</p>\n<h2 translation-origin=\"off\" id=\"code-review\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#code-review\"><i class=\"material-icons\">link</i></a>\n  Auditing Angular applications\n</h2>\n<h2 translation-result=\"\" id=\"code-review\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/security#code-review\"><i class=\"material-icons\">link</i></a>\n  审计Angular应用程序\n</h2>\n<p translation-origin=\"off\">Angular applications must follow the same security principles as regular web applications, and\nmust be audited as such. Angular-specific APIs that should be audited in a security review,\nsuch as the <a href=\"guide/security#bypass-security-apis\"><em>bypassSecurityTrust</em></a> methods, are marked in the documentation\nas security sensitive.</p>\n<p translation-result=\"\">Angular应用应该遵循和常规Web应用一样的安全原则并按照这些原则进行审计。Angular中某些应该在安全评审中被审计的API（\n比如<a href=\"guide/security#bypass-security-apis\"><em>bypassSecurityTrust</em></a> API）都在文档中被明确标记为安全性敏感的。</p>\n\n</div>"
}