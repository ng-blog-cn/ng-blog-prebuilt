{"version":3,"sources":["polyfills.a5736775f9053c86555b.bundle.js","/Users/twer/private/GDE/angular/aio/src/polyfills.ts","/Users/twer/private/GDE/angular/aio/node_modules/zone.js/dist/zone.js","(webpack)/buildin/global.js","/Users/twer/private/GDE/angular/aio/src/environments/environment.ts"],"names":["webpackJsonp","1","module","exports","__webpack_require__","TU+8","__webpack_exports__","Object","defineProperty","value","n","eFQL","global","factory","bindArguments","args","source","i","length","FUNCTION","Zone","current","wrap","patchPrototype","prototype","fnNames","constructor","name_1","delegate","isPropertyWritable","getOwnPropertyDescriptor","patched","apply","this","arguments","attachOriginToPatched","propertyDesc","writable","get","set","UNDEFINED","patchProperty","obj","prop","desc","enumerable","configurable","originalDescGet","eventName","substr","eventNameSymbol","zoneSymbolEventNames","zoneSymbol","newValue","target","_global","removeEventListener","wrapFn","addEventListener","listener","REMOVE_ATTRIBUTE","removeAttribute","patchOnProperties","properties","onProperties","push","j","patchClass","className","OriginalClass","a","originalInstanceKey","Error","instance","fn","hasOwnProperty","patchMethod","name","patchFn","proto","getPrototypeOf","delegateName","patchDelegate_1","patchMacroTask","funcName","metaCreator","scheduleTask","task","data","callbackIndex","invoke","setNative","self","meta","scheduleMacroTask","original","isIEOrEdge","isDetectedIEOrEdge","ieOrEdge","ua","window","navigator","userAgent","indexOf","error","patchEventTarget","apis","patchOptions","ADD_EVENT_LISTENER","addEventListenerFnName","REMOVE_EVENT_LISTENER","removeEventListenerFnName","LISTENERS_EVENT_LISTENER","listenersFnName","REMOVE_ALL_LISTENERS_EVENT_LISTENER","removeAllFnName","zoneSymbolAddEventListener","ADD_EVENT_LISTENER_SOURCE","invokeTask","event","isRemoved","callback","OBJECT_TYPE","handleEvent","originalDelegate","options","once","type","globalZoneAwareCallback","tasks","zoneSymbolEventNames$1","FALSE_STR","copyTasks","slice","IMMEDIATE_PROPAGATION_SYMBOL","globalZoneAwareCaptureCallback","TRUE_STR","results","useGlobalCallback","undefined","validateHandler","checkDuplicate","returnTarget","nativePrependEventListener","taskData","nativeAddEventListener","nativeRemoveEventListener","nativeListeners","nativeRemoveAllListeners","prependEventListenerFnName","customScheduleGlobal","isExisting","capture","customCancelGlobal","symbolEventNames","symbolEventName","existingTasks","existingTask","splice","allRemoved","customScheduleNonGlobal","customSchedulePrepend","customCancelNonGlobal","customSchedule","customCancel","compareTaskCallbackVsDelegate","typeOfDelegate","FUNCTION_TYPE","compare","makeAddListener","nativeListener","addSource","customScheduleFn","customCancelFn","prepend","isHandleEvent","zone","falseEventName","trueEventName","symbol","ZONE_SYMBOL_PREFIX","symbolCapture","constructorName","CONSTRUCTOR_NAME","targetSource","globalSources","OPTIMIZED_ZONE_EVENT_TASK_DATA","scheduleEventTask","unshift","cancelTask","listeners","findEventTasks","symbolCaptureEventName","captureTasks","removeTasks","__spread","keys","match","EVENT_NAME_SYMBOL_REGX","exec","evtName","foundTasks","patchEventPrototype","api","Event","patchTimer","setName","cancelName","nameSuffix","timer","handleId","NUMBER","tasksByHandleId","taskSymbol","clearTask","clearNative","isPeriodic","delay","handle","ref","unref","bind","id","state","cancelFn","runCount","propertyPatch","isUnconfigurable","TypeError","originalConfigurableFlag","PROTOTYPE","rewriteDescriptor","_tryDefineProperty","defineProperties","props","forEach","create","OBJECT","isFrozen","_create","_getOwnPropertyDescriptor","_redefineProperty","unconfigurablesKey","_defineProperty","UNDEFINED$1","descJson","JSON","stringify","toString","console","log","WS","WebSocket","EventTarget","b","proxySocket","proxySocketProto","socket","onmessageDesc","propName","Array","call","propertySymbol","__symbol__","globalWebSocket","filterProperties","ignoreProperties","tip","filter","ip","targetIgnoreProperties","op","patchFilteredProperties","propertyDescriptorPatch","isNode","isMix","supportsWebSocket","canPatchViaPropertyDescriptor","__Zone_ignore_on_properties","isBrowser","eventNames","concat","Document","Element","HTMLElement","HTMLMediaElement","mediaElementEventNames","HTMLFrameSetElement","windowEventNames","frameSetEventNames","HTMLBodyElement","HTMLFrameElement","frameEventNames","HTMLIFrameElement","HTMLMarqueeElement_1","marqueeEventNames","Worker_1","workerEventNames","XMLHttpRequest","XMLHttpRequestEventNames","XMLHttpRequestEventTarget","IDBIndex","IDBIndexEventNames","IDBRequest","IDBOpenDBRequest","IDBDatabase","IDBTransaction","IDBCursor","websocketEventNames","patchViaCapturingAllTheEvents","xhrDesc","req","result","onreadystatechange","SYMBOL_FAKE_ONREADYSTATECHANGE_1","detectFunc","property","onproperty","bound","elt","unboundKey","parentElement","eventTargetPatch","WTF_ISSUE_555","NO_EVENT_TARGET","split","isWtf","WTF_ISSUE_555_ARRAY","map","v","isDisableIECheck","isEnableCrossContextCheck","BROWSER_TOOLS","targets","checkIEAndCrossContext","nativeDelegate","testString","apiTypes","patchEvent","registerElementPatch","document","_registerElement","registerElement","callbacks","opts","descriptor","__read","mark","performance","performanceMeasure","label","scheduleMicroTask","_numberOfNestedTaskFrames","_microTaskQueue","nativeMicroTaskQueuePromise","symbolPromise","resolve","symbolThen","drainMicroTaskQueue","symbolSetTimeout","_isDrainingMicrotaskQueue","queue","runTask","_api","onUnhandledError","microtaskDrainDone","noop","parent","zoneSpec","_properties","_parent","_name","_zoneDelegate","ZoneDelegate","assertZonePatched","patches","_currentZoneFrame","_currentTask","__load_patch","perfName","key","getZoneWith","fork","_callback","intercept","runGuarded","run","applyThis","applyArgs","handleError","NO_ZONE","notScheduled","eventTask","reEntryGuard","running","_transitionTo","scheduled","previousTask","macroTask","unknown","_updateTaskCount","newZone","scheduling","zoneDelegates","_zoneDelegates","_zone","err","ZoneTask","microTask","canceling","count","DELEGATE_ZS","onHasTask","_","hasTaskState","hasTask","onScheduleTask","onInvokeTask","onCancelTask","parentDelegate","_taskCounts","_parentDelegate","_forkZS","onFork","_forkDlgt","_forkCurrZone","_interceptZS","onIntercept","_interceptDlgt","_interceptCurrZone","_invokeZS","onInvoke","_invokeDlgt","_invokeCurrZone","_handleErrorZS","onHandleError","_handleErrorDlgt","_handleErrorCurrZone","_scheduleTaskZS","_scheduleTaskDlgt","_scheduleTaskCurrZone","_invokeTaskZS","_invokeTaskDlgt","_invokeTaskCurrZone","_cancelTaskZS","_cancelTaskDlgt","_cancelTaskCurrZone","_hasTaskZS","_hasTaskDlgt","_hasTaskDlgtOwner","_hasTaskCurrZone","zoneSpecHasTask","parentHasTask","targetZone","returnTask","scheduleFn","isEmpty","counts","prev","next","change","_state","isUsingGlobalCallback","cancelScheduleRequest","toState","fromState1","fromState2","toJSON","currentZoneFrame","showUncaughtError","setNativePromise","NativePromise","o","m","Symbol","iterator","r","e","ar","done","__values","handleUnhandledRejection","handler","UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL","isThenable","then","forwardResolution","forwardRejection","rejection","ZoneAwarePromise","reject","makeResolver","promise","resolvePromise","onceWrapper","TYPE_ERROR","symbolState","UNRESOLVED","REJECTED","symbolValue","clearRejectedNoCatch","CURRENT_TASK_SYMBOL","currentTask","scheduleResolveOrReject","REJECTED_NO_CATCH","stack","error_1","_uncaughtPromiseErrors","REJECTION_HANDLED_HANDLER","chainPromise","onFulfilled","onRejected","patchThen","Ctor","originalThen","onResolve","onReject","_this","symbolThenPatched","message","uncaughtPromiseError","shift","RESOLVED","wasCalled","wrappedFunction","executor","race","values","res","rej","_a","values_1","values_1_1","e_1_1","e_1","return","all","resolvedValues","values_2","values_2_1","index","e_2_1","e_2","catch","ZONE_AWARE_PROMISE","NewNativePromise","fetch_1","resultPromise","ctor","Promise","isWebWorker","WorkerGlobalScope","process","preventDefault","originalFunctionToString","Function","ORIGINAL_DELEGATE_SYMBOL","PROMISE_SYMBOL","ERROR_SYMBOL","nativePromise","nativeError","originalObjectToString","__read$1","globalEventHandlersEventNames","documentEventNames","htmlElementEventNames","ieElementEventNames","webglEventNames","formEventNames","detailEventNames","blockingMethods","s","HTMLCanvasElement","toBlob","findPendingTask","XHR_TASK","XHR_SCHEDULED","XHR_LISTENER","oriAddListener","SYMBOL_ADDEVENTLISTENER","oriRemoveListener","SYMBOL_REMOVEEVENTLISTENER","READY_STATE_CHANGE","newListener","readyState","DONE","aborted","SCHEDULED","sendNative","placeholderCallback","abortNative","openNative","XHR_SYNC","XHR_URL","url","geolocation","findPromiseRejectionHandler","PromiseRejectionEvent","reason","fRUx","g","eval","p5Ee","d","environment","gaId","production","mode"],"mappings":"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MAAAD,EAAA7Z,KAAA2Z,EAAAnd,OAEA,MAAA+F,GAAmBqX,GAAMrX,SACzB,QACA,IACAoX,MAAAG,OAAAN,EAAAxc,EAAA,SAAAwc,EAAApN,KAAApP,GAEA,QAAiB,GAAA4c,EAAA,KAAAA,GAAArX,OAEjB,MAAAsX,IAEA3R,EAAA,WACA,OAAA2R,MAAA7c,EAAA,EAA4BA,EAAAiB,UAAAhB,OAAsBD,IAAA6c,IAAArM,OAAAyR,EAAAhhB,UAAAjB,IAClD,OAAA6c,IAEAtV,EAAA,OACAL,EAAA,QAEAuD,GACAoR,uBAAA,GAEA5U,KACAuD,KACAF,EAAA,OACAhB,EAAA,WACA7C,GAAA,SACA0D,GAAA,kBACAkB,GAAA,qCACAhE,GAAA,oCA0fA+E,GAAAjK,EAAA,YAiIA+L,GAAA5O,OAAA6C,EAAA,mBAAA7C,OAAAC,eACAwO,GAAAzO,OAAA6C,EAAA,6BACA7C,OAAAuB,yBACAiN,GAAAxO,OAAAqO,OACAM,GAAA9L,EAAA,mBACAkL,GAAA,YACAO,GAAA,SACAO,GAAA,YAuJA+T,IACA,QACA,kBACA,eACA,qBACA,WACA,cACA,OACA,SACA,UACA,iBACA,SACA,mBACA,oBACA,iBACA,YACA,QACA,QACA,cACA,aACA,WACA,OACA,UACA,YACA,WACA,YACA,WACA,OACA,iBACA,UACA,QACA,QACA,QACA,UACA,WACA,oBACA,QACA,UACA,UACA,WACA,QACA,OACA,YACA,aACA,iBACA,qBACA,YACA,aACA,aACA,YACA,WACA,YACA,UACA,aACA,oBACA,QACA,OACA,UACA,gBACA,cACA,eACA,eACA,oBACA,uBACA,4BACA,mBACA,sBACA,yBACA,cACA,WACA,cACA,YACA,WACA,aACA,QACA,SACA,SACA,SACA,UACA,SACA,kBACA,cACA,OACA,OACA,UACA,SACA,UACA,aACA,eACA,cACA,YACA,aACA,WACA,mBACA,gBACA,UACA,SAEAC,IACA,iFACA,sFACA,oFACA,oBAEApR,IACA,4BACA,aACA,aACA,eACA,sBACA,cACA,eACA,cACA,eACA,oBACA,4BACA,kBA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","file":"polyfills.a5736775f9053c86555b.bundle.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 1:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"TU+8\");\n\n\n/***/ }),\n\n/***/ \"TU+8\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__environments_environment__ = __webpack_require__(\"p5Ee\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zone_js_dist_zone__ = __webpack_require__(\"eFQL\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_zone_js_dist_zone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_zone_js_dist_zone__);\n/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n/**\n * INTERNET EXPLORER\n *\n * All the Internet Explorer polyfills are defined separately, in the `ie-polyfills.js` file.\n * They are also built separately from the main app, via the `yarn build-ie-polyfills` task.\n * The output of this build is conditionally loaded (only if we are running IE) in the browser,\n * and executed before the rest of the application files are executed.\n */\n/** HACK: force import of environment.ts/environment.prod.ts to load env specific polyfills */\n\n/** ALL Firefox browsers require the following to support `@angular/animation`. **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n/***************************************************************************************************\n * Zone JS is required by Angular itself.\n */\n // Included with Angular CLI.\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n/**\n * Date, currency, decimal and percent pipes.\n * Needed for: All but Chrome, Firefox, Edge, IE11 and Safari 10\n */\n// import 'intl';  // Run `npm install --save intl`.\n//# sourceMappingURL=polyfills.js.map\n\n/***/ }),\n\n/***/ \"eFQL\":\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\t true ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Zone$1 = (function (global) {\n    var FUNCTION = 'function';\n    var performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    if (global['Zone']) {\n        throw new Error('Zone already loaded.');\n    }\n    var Zone = (function () {\n        function Zone(parent, zoneSpec) {\n            this._properties = null;\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        Zone.assertZonePatched = function () {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        };\n        Object.defineProperty(Zone, \"root\", {\n            get: function () {\n                var zone = Zone.current;\n                while (zone.parent) {\n                    zone = zone.parent;\n                }\n                return zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Zone, \"current\", {\n            get: function () {\n                return _currentZoneFrame.zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone, \"currentTask\", {\n            get: function () {\n                return _currentTask;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.__load_patch = function (name, fn) {\n            if (patches.hasOwnProperty(name)) {\n                throw Error('Already loaded patch: ' + name);\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                var perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        };\n        Object.defineProperty(Zone.prototype, \"parent\", {\n            get: function () {\n                return this._parent;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone.prototype, \"name\", {\n            get: function () {\n                return this._name;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.prototype.get = function (key) {\n            var zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        };\n        Zone.prototype.getZoneWith = function (key) {\n            var current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        };\n        Zone.prototype.fork = function (zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        };\n        Zone.prototype.wrap = function (callback, source) {\n            if (typeof callback !== FUNCTION) {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            var _callback = this._zoneDelegate.intercept(this, callback, source);\n            var zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        };\n        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = undefined; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = null; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runTask = function (task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            // we have to define an variable here, if not\n            // typescript compiler will complain below\n            var isNotScheduled = task.state === notScheduled;\n            if (isNotScheduled && task.type === eventTask) {\n                return;\n            }\n            var reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            var previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = null;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        };\n        Zone.prototype.scheduleTask = function (task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                var newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(\"can not reschedule task to \" + this\n                            .name + \" which is descendants of the original zone \" + task.zone.name);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            var zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        };\n        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));\n        };\n        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.cancelTask = function (task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        };\n        Zone.prototype._updateTaskCount = function (task, count) {\n            var zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (var i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        };\n        return Zone;\n    }());\n    Zone.__symbol__ = __symbol__;\n    var DELEGATE_ZS = {\n        name: '',\n        onHasTask: function (delegate, _, target, hasTaskState) {\n            return delegate.hasTask(target, hasTaskState);\n        },\n        onScheduleTask: function (delegate, _, target, task) {\n            return delegate.scheduleTask(target, task);\n        },\n        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },\n        onCancelTask: function (delegate, _, target, task) {\n            return delegate.cancelTask(target, task);\n        }\n    };\n    var ZoneDelegate = (function () {\n        function ZoneDelegate(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt =\n                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        };\n        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        };\n        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ?\n                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.handleError = function (targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        };\n        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {\n            var returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        };\n        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ?\n                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {\n            var value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        };\n        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                return this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        };\n        ZoneDelegate.prototype._updateTaskCount = function (type, count) {\n            var counts = this._taskCounts;\n            var prev = counts[type];\n            var next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                var isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        };\n        return ZoneDelegate;\n    }());\n    var ZoneTask = (function () {\n        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {\n            this._zone = null;\n            this.runCount = 0;\n            this._zoneDelegates = null;\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            this.callback = callback;\n            var self = this;\n            if (type === eventTask && options && options.isUsingGlobalCallback) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.apply(global, [self, this, arguments]);\n                };\n            }\n        }\n        ZoneTask.invokeTask = function (task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        };\n        Object.defineProperty(ZoneTask.prototype, \"zone\", {\n            get: function () {\n                return this._zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ZoneTask.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ZoneTask.prototype.cancelScheduleRequest = function () {\n            this._transitionTo(notScheduled, scheduling);\n        };\n        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(this.type + \" '\" + this.source + \"': can not transition to '\" + toState + \"', expecting state '\" + fromState1 + \"'\" + (fromState2 ?\n                    ' or \\'' + fromState2 + '\\'' :\n                    '') + \", was '\" + this._state + \"'.\");\n            }\n        };\n        ZoneTask.prototype.toString = function () {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId;\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        };\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        ZoneTask.prototype.toJSON = function () {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                invoke: this.invoke,\n                scheduleFn: this.scheduleFn,\n                cancelFn: this.cancelFn,\n                runCount: this.runCount,\n                callback: this.callback\n            };\n        };\n        return ZoneTask;\n    }());\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    var symbolSetTimeout = __symbol__('setTimeout');\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    var _microTaskQueue = [];\n    var _isDrainingMicrotaskQueue = false;\n    var nativeMicroTaskQueuePromise;\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            if (!nativeMicroTaskQueuePromise) {\n                if (global[symbolPromise]) {\n                    nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n                }\n            }\n            if (nativeMicroTaskQueuePromise) {\n                nativeMicroTaskQueuePromise[symbolThen](drainMicroTaskQueue);\n            }\n            else {\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n            }\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                var queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (var i = 0; i < queue.length; i++) {\n                    var task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            var showError = !Zone[__symbol__('ignoreConsoleErrorUncaughtError')];\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    var NO_ZONE = { name: 'NO ZONE' };\n    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    var patches = {};\n    var _api = {\n        symbol: __symbol__,\n        currentZoneFrame: function () { return _currentZoneFrame; },\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: function () { return !Zone[__symbol__('ignoreConsoleErrorUncaughtError')]; },\n        patchEventTarget: function () { return []; },\n        patchOnProperties: noop,\n        patchMethod: function () { return noop; },\n        setNativePromise: function (NativePromise) {\n            nativeMicroTaskQueuePromise = NativePromise.resolve(0);\n        },\n    };\n    var _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    var _currentTask = null;\n    var _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    function __symbol__(name) {\n        return '__zone_symbol__' + name;\n    }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (undefined && undefined.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', function (global, Zone, api) {\n    var __symbol__ = api.symbol;\n    var _uncaughtPromiseErrors = [];\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    api.onUnhandledError = function (e) {\n        if (api.showUncaughtError()) {\n            var rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = function () {\n        while (_uncaughtPromiseErrors.length) {\n            var _loop_1 = function () {\n                var uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n                try {\n                    uncaughtPromiseError.zone.runGuarded(function () {\n                        throw uncaughtPromiseError;\n                    });\n                }\n                catch (error) {\n                    handleUnhandledRejection(error);\n                }\n            };\n            while (_uncaughtPromiseErrors.length) {\n                _loop_1();\n            }\n        }\n    };\n    var UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            var handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (handler && typeof handler === 'function') {\n                handler.apply(this, [e]);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    var symbolState = __symbol__('state');\n    var symbolValue = __symbol__('value');\n    var source = 'Promise.then';\n    var UNRESOLVED = null;\n    var RESOLVED = true;\n    var REJECTED = false;\n    var REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return function (v) {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    var once = function () {\n        var wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    var TYPE_ERROR = 'Promise resolved with itself';\n    var OBJECT = 'object';\n    var FUNCTION = 'function';\n    var CURRENT_TASK_SYMBOL = __symbol__('currentTask');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        var onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            var then = null;\n            try {\n                if (typeof value === OBJECT || typeof value === FUNCTION) {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(function () {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === FUNCTION) {\n                try {\n                    then.apply(value, [\n                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))\n                    ]);\n                }\n                catch (err) {\n                    onceWrapper(function () {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                var queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    value[CURRENT_TASK_SYMBOL] = Zone.currentTask;\n                }\n                for (var i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    try {\n                        throw new Error('Uncaught (in promise): ' + value +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        var error_1 = err;\n                        error_1.rejection = value;\n                        error_1.promise = promise;\n                        error_1.zone = Zone.current;\n                        error_1.task = Zone.currentTask;\n                        _uncaughtPromiseErrors.push(error_1);\n                        api.scheduleMicroTask(); // to make sure that it is running\n                    }\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    var REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                var handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === FUNCTION) {\n                    handler.apply(this, [{ rejection: promise[symbolValue], promise: promise }]);\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        var delegate = promise[symbolState] ?\n            (typeof onFulfilled === FUNCTION) ? onFulfilled : forwardResolution :\n            (typeof onRejected === FUNCTION) ? onRejected : forwardRejection;\n        zone.scheduleMicroTask(source, function () {\n            try {\n                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));\n            }\n            catch (error) {\n                resolvePromise(chainPromise, false, error);\n            }\n        });\n    }\n    var ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    var ZoneAwarePromise = (function () {\n        function ZoneAwarePromise(executor) {\n            var promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        ZoneAwarePromise.toString = function () {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        };\n        ZoneAwarePromise.resolve = function (value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        };\n        ZoneAwarePromise.reject = function (error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        };\n        ZoneAwarePromise.race = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                _a = __read([res, rej], 2), resolve = _a[0], reject = _a[1];\n                var _a;\n            });\n            function onResolve(value) {\n                promise && (promise = null || resolve(value));\n            }\n            function onReject(error) {\n                promise && (promise = null || reject(error));\n            }\n            try {\n                for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\n                    var value = values_1_1.value;\n                    if (!isThenable(value)) {\n                        value = this.resolve(value);\n                    }\n                    value.then(onResolve, onReject);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return promise;\n            var e_1, _a;\n        };\n        ZoneAwarePromise.all = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var count = 0;\n            var resolvedValues = [];\n            try {\n                for (var values_2 = __values(values), values_2_1 = values_2.next(); !values_2_1.done; values_2_1 = values_2.next()) {\n                    var value = values_2_1.value;\n                    if (!isThenable(value)) {\n                        value = this.resolve(value);\n                    }\n                    value.then((function (index) { return function (value) {\n                        resolvedValues[index] = value;\n                        count--;\n                        if (!count) {\n                            resolve(resolvedValues);\n                        }\n                    }; })(count), reject);\n                    count++;\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (values_2_1 && !values_2_1.done && (_a = values_2.return)) _a.call(values_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            if (!count)\n                resolve(resolvedValues);\n            return promise;\n            var e_2, _a;\n        };\n        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {\n            var chainPromise = new this.constructor(null);\n            var zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        };\n        ZoneAwarePromise.prototype.catch = function (onRejected) {\n            return this.then(null, onRejected);\n        };\n        return ZoneAwarePromise;\n    }());\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    var NativePromise = global[symbolPromise] = global['Promise'];\n    var ZONE_AWARE_PROMISE = Zone.__symbol__('ZoneAwarePromise');\n    var desc = Object.getOwnPropertyDescriptor(global, 'Promise');\n    if (!desc || desc.configurable) {\n        desc && delete desc.writable;\n        desc && delete desc.value;\n        if (!desc) {\n            desc = { configurable: true, enumerable: true };\n        }\n        desc.get = function () {\n            // if we already set ZoneAwarePromise, use patched one\n            // otherwise return native one.\n            return global[ZONE_AWARE_PROMISE] ? global[ZONE_AWARE_PROMISE] : global[symbolPromise];\n        };\n        desc.set = function (NewNativePromise) {\n            if (NewNativePromise === ZoneAwarePromise) {\n                // if the NewNativePromise is ZoneAwarePromise\n                // save to global\n                global[ZONE_AWARE_PROMISE] = NewNativePromise;\n            }\n            else {\n                // if the NewNativePromise is not ZoneAwarePromise\n                // for example: after load zone.js, some library just\n                // set es6-promise to global, if we set it to global\n                // directly, assertZonePatched will fail and angular\n                // will not loaded, so we just set the NewNativePromise\n                // to global[symbolPromise], so the result is just like\n                // we load ES6 Promise before zone.js\n                global[symbolPromise] = NewNativePromise;\n                if (!NewNativePromise.prototype[symbolThen]) {\n                    patchThen(NewNativePromise);\n                }\n                api.setNativePromise(NewNativePromise);\n            }\n        };\n        Object.defineProperty(global, 'Promise', desc);\n    }\n    global['Promise'] = ZoneAwarePromise;\n    var symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        var proto = Ctor.prototype;\n        var originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        // check Ctor.prototype.then propertyDescritor is writable or not\n        // in meteor env, writable is false, we have to make it to be true.\n        var prop = Object.getOwnPropertyDescriptor(Ctor.prototype, 'then');\n        if (prop && prop.writable === false && prop.configurable) {\n            Object.defineProperty(Ctor.prototype, 'then', { writable: true });\n        }\n        Ctor.prototype.then = function (onResolve, onReject) {\n            var _this = this;\n            var wrapped = new ZoneAwarePromise(function (resolve, reject) {\n                originalThen.call(_this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    function zoneify(fn) {\n        return function () {\n            var resultPromise = fn.apply(this, arguments);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            var ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        var fetch_1 = global['fetch'];\n        if (typeof fetch_1 == FUNCTION) {\n            global['fetch'] = zoneify(fetch_1);\n        }\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\nvar zoneSymbol = Zone.__symbol__;\nvar _global = typeof window === 'object' && window || typeof self === 'object' && self || global;\nvar FUNCTION = 'function';\nvar UNDEFINED = 'undefined';\nvar REMOVE_ATTRIBUTE = 'removeAttribute';\nfunction bindArguments(args, source) {\n    for (var i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === FUNCTION) {\n            args[i] = Zone.current.wrap(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    var source = prototype.constructor['name'];\n    var _loop_1 = function (i) {\n        var name_1 = fnNames[i];\n        var delegate = prototype[name_1];\n        if (delegate) {\n            var prototypeDesc = Object.getOwnPropertyDescriptor(prototype, name_1);\n            if (!isPropertyWritable(prototypeDesc)) {\n                return \"continue\";\n            }\n            prototype[name_1] = (function (delegate) {\n                var patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    };\n    for (var i = 0; i < fnNames.length; i++) {\n        _loop_1(i);\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    if (typeof propertyDesc.get === FUNCTION && typeof propertyDesc.set === UNDEFINED) {\n        return false;\n    }\n    return true;\n}\nvar isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidently browserify\n// this code.\nvar isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nvar isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidently browserify\n// this code.\nvar isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(typeof window !== 'undefined' && window['HTMLElement']);\nvar zoneSymbolEventNames = {};\nvar wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    var eventNameSymbol = zoneSymbolEventNames[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    var target = this || event.target || _global;\n    var listener = target[eventNameSymbol];\n    var result = listener && listener.apply(this, arguments);\n    if (result != undefined && !result) {\n        event.preventDefault();\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    var desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        var prototypeDesc = Object.getOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    var originalDescGet = desc.get;\n    // substr(2) cuz 'onclick' -> 'click', etc\n    var eventName = prop.substr(2);\n    var eventNameSymbol = zoneSymbolEventNames[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        var target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        var previousValue = target[eventNameSymbol];\n        if (previousValue) {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        if (typeof newValue === 'function') {\n            target[eventNameSymbol] = newValue;\n            target.addEventListener(eventName, wrapFn, false);\n        }\n        else {\n            target[eventNameSymbol] = null;\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        var target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        var listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            var value = originalDescGet && originalDescGet.apply(this);\n            if (value) {\n                desc.set.apply(this, [value]);\n                if (typeof target[REMOVE_ATTRIBUTE] === FUNCTION) {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(obj, prop, desc);\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (var i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        var onProperties = [];\n        for (var prop in obj) {\n            if (prop.substr(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (var j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nvar originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    var OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        var a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    var instance = new OriginalClass(function () { });\n    var prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                Object.defineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    var proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    var delegateName = zoneSymbol(name);\n    var delegate;\n    if (proto && !(delegate = proto[delegateName])) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        var desc = proto && Object.getOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            var patchDelegate_1 = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate_1(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    var setNative = null;\n    function scheduleTask(task) {\n        var data = task.data;\n        data.args[data.callbackIndex] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, function (delegate) { return function (self, args) {\n        var meta = metaCreator(self, args);\n        if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === 'function') {\n            var task = Zone.current.scheduleMacroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask, null);\n            return task;\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    }; });\n}\n\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nvar isDetectedIEOrEdge = false;\nvar ieOrEdge = false;\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        var ua = window.navigator.userAgent;\n        var msie = ua.indexOf('MSIE ');\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n        return ieOrEdge;\n    }\n    catch (error) {\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', function (global, Zone, api) {\n    // patch Func.prototype.toString to let them look like native\n    var originalFunctionToString = Zone['__zone_symbol__originalToString'] =\n        Function.prototype.toString;\n    var FUNCTION = 'function';\n    var ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    var PROMISE_SYMBOL = zoneSymbol('Promise');\n    var ERROR_SYMBOL = zoneSymbol('Error');\n    Function.prototype.toString = function () {\n        if (typeof this === FUNCTION) {\n            var originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === FUNCTION) {\n                    return originalFunctionToString.apply(this[ORIGINAL_DELEGATE_SYMBOL], arguments);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                var nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.apply(nativePromise, arguments);\n                }\n            }\n            if (this === Error) {\n                var nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.apply(nativeError, arguments);\n                }\n            }\n        }\n        return originalFunctionToString.apply(this, arguments);\n    };\n    // patch Object.prototype.toString to let them look like native\n    var originalObjectToString = Object.prototype.toString;\n    var PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.apply(this, arguments);\n    };\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nvar __read$1 = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (undefined && undefined.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$1(arguments[i]));\n    return ar;\n};\nvar TRUE_STR = 'true';\nvar FALSE_STR = 'false';\n// an identifier to tell ZoneTask do not create a new invoke closure\nvar OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    isUsingGlobalCallback: true\n};\nvar zoneSymbolEventNames$1 = {};\nvar globalSources = {};\nvar CONSTRUCTOR_NAME = 'name';\nvar FUNCTION_TYPE = 'function';\nvar OBJECT_TYPE = 'object';\nvar ZONE_SYMBOL_PREFIX = '__zone_symbol__';\nvar EVENT_NAME_SYMBOL_REGX = /^__zone_symbol__(\\w+)(true|false)$/;\nvar IMMEDIATE_PROPAGATION_SYMBOL = ('__zone_symbol__propagationStopped');\nfunction patchEventTarget(_global, apis, patchOptions) {\n    var ADD_EVENT_LISTENER = (patchOptions && patchOptions.addEventListenerFnName) || 'addEventListener';\n    var REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.removeEventListenerFnName) || 'removeEventListener';\n    var LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listenersFnName) || 'eventListeners';\n    var REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.removeAllFnName) || 'removeAllListeners';\n    var zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    var ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    var PREPEND_EVENT_LISTENER = 'prependListener';\n    var PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    var invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        var delegate = task.callback;\n        if (typeof delegate === OBJECT_TYPE && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = function (event) { return delegate.handleEvent(event); };\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        task.invoke(task, target, [event]);\n        var options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            var delegate_1 = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].apply(target, [event.type, delegate_1, options]);\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    var globalZoneAwareCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samusung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        var target = this || event.target || _global;\n        var tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                var copyTasks = tasks.slice();\n                for (var i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    var globalZoneAwareCaptureCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samusung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        var target = this || event.target || _global;\n        var tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                var copyTasks = tasks.slice();\n                for (var i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        var useGlobalCallback = true;\n        if (patchOptions && patchOptions.useGlobalCallback !== undefined) {\n            useGlobalCallback = patchOptions.useGlobalCallback;\n        }\n        var validateHandler = patchOptions && patchOptions.validateHandler;\n        var checkDuplicate = true;\n        if (patchOptions && patchOptions.checkDuplicate !== undefined) {\n            checkDuplicate = patchOptions.checkDuplicate;\n        }\n        var returnTarget = false;\n        if (patchOptions && patchOptions.returnTarget !== undefined) {\n            returnTarget = patchOptions.returnTarget;\n        }\n        var proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        var taskData = {};\n        var nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        var nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        var nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        var nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        var nativePrependEventListener;\n        if (patchOptions && patchOptions.prependEventListenerFnName) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prependEventListenerFnName)] =\n                proto[patchOptions.prependEventListenerFnName];\n        }\n        var customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.apply(taskData.target, [\n                taskData.eventName,\n                taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback,\n                taskData.options\n            ]);\n        };\n        var customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                var symbolEventNames = zoneSymbolEventNames$1[task.eventName];\n                var symbolEventName = void 0;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                var existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (var i = 0; i < existingTasks.length; i++) {\n                        var existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.apply(task.target, [\n                task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback,\n                task.options\n            ]);\n        };\n        var customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.apply(taskData.target, [taskData.eventName, task.invoke, taskData.options]);\n        };\n        var customSchedulePrepend = function (task) {\n            return nativePrependEventListener.apply(taskData.target, [taskData.eventName, task.invoke, taskData.options]);\n        };\n        var customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.apply(task.target, [task.eventName, task.invoke, task.options]);\n        };\n        var customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        var customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        var compareTaskCallbackVsDelegate = function (task, delegate) {\n            var typeOfDelegate = typeof delegate;\n            if ((typeOfDelegate === FUNCTION_TYPE && task.callback === delegate) ||\n                (typeOfDelegate === OBJECT_TYPE && task.originalDelegate === delegate)) {\n                // same callback, same capture, same event name, just return\n                return true;\n            }\n            return false;\n        };\n        var compare = (patchOptions && patchOptions.compareTaskCallbackVsDelegate) ?\n            patchOptions.compareTaskCallbackVsDelegate :\n            compareTaskCallbackVsDelegate;\n        var makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget, prepend) {\n            if (returnTarget === void 0) { returnTarget = false; }\n            if (prepend === void 0) { prepend = false; }\n            return function () {\n                var target = this || _global;\n                var targetZone = Zone.current;\n                var delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                var isHandleEvent = false;\n                if (typeof delegate !== FUNCTION_TYPE) {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                var eventName = arguments[0];\n                var options = arguments[2];\n                var capture;\n                var once = false;\n                if (options === undefined) {\n                    capture = false;\n                }\n                else if (options === true) {\n                    capture = true;\n                }\n                else if (options === false) {\n                    capture = false;\n                }\n                else {\n                    capture = options ? !!options.capture : false;\n                    once = options ? !!options.once : false;\n                }\n                var zone = Zone.current;\n                var symbolEventNames = zoneSymbolEventNames$1[eventName];\n                var symbolEventName;\n                if (!symbolEventNames) {\n                    // the code is duplicate, but I just want to get some better performance\n                    var falseEventName = eventName + FALSE_STR;\n                    var trueEventName = eventName + TRUE_STR;\n                    var symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n                    var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n                    zoneSymbolEventNames$1[eventName] = {};\n                    zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\n                    zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\n                    symbolEventName = capture ? symbolCapture : symbol;\n                }\n                else {\n                    symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                }\n                var existingTasks = target[symbolEventName];\n                var isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (var i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                var source;\n                var constructorName = target.constructor[CONSTRUCTOR_NAME];\n                var targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource + eventName;\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                var data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : null;\n                var task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                task.options = options;\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            var target = this || _global;\n            var eventName = arguments[0];\n            var options = arguments[2];\n            var capture;\n            if (options === undefined) {\n                capture = false;\n            }\n            else if (options === true) {\n                capture = true;\n            }\n            else if (options === false) {\n                capture = false;\n            }\n            else {\n                capture = options ? !!options.capture : false;\n            }\n            var delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            var symbolEventNames = zoneSymbolEventNames$1[eventName];\n            var symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            var existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (var i = 0; i < existingTasks.length; i++) {\n                    var existingTask = existingTasks[i];\n                    var typeOfDelegate = typeof delegate;\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        return;\n                    }\n                }\n            }\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            var target = this || _global;\n            var eventName = arguments[0];\n            var listeners = [];\n            var tasks = findEventTasks(target, eventName);\n            for (var i = 0; i < tasks.length; i++) {\n                var task = tasks[i];\n                var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            var target = this || _global;\n            var eventName = arguments[0];\n            if (!eventName) {\n                var keys = Object.keys(target);\n                for (var i = 0; i < keys.length; i++) {\n                    var prop = keys[i];\n                    var match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    var evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].apply(this, [evtName]);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].apply(this, ['removeListener']);\n            }\n            else {\n                var symbolEventNames = zoneSymbolEventNames$1[eventName];\n                if (symbolEventNames) {\n                    var symbolEventName = symbolEventNames[FALSE_STR];\n                    var symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    var tasks = target[symbolEventName];\n                    var captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        var removeTasks = __spread(tasks);\n                        for (var i = 0; i < removeTasks.length; i++) {\n                            var task = removeTasks[i];\n                            var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].apply(this, [eventName, delegate, task.options]);\n                        }\n                    }\n                    if (captureTasks) {\n                        var removeTasks = __spread(captureTasks);\n                        for (var i = 0; i < removeTasks.length; i++) {\n                            var task = removeTasks[i];\n                            var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].apply(this, [eventName, delegate, task.options]);\n                        }\n                    }\n                }\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    var results = [];\n    for (var i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    var foundTasks = [];\n    for (var prop in target) {\n        var match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n        var evtName = match && match[1];\n        if (evtName && (!eventName || evtName === eventName)) {\n            var tasks = target[prop];\n            if (tasks) {\n                for (var i = 0; i < tasks.length; i++) {\n                    foundTasks.push(tasks[i]);\n                }\n            }\n        }\n    }\n    return foundTasks;\n}\nfunction patchEventPrototype(global, api) {\n    var Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', function (delegate) { return function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n        }; });\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nvar taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    var setNative = null;\n    var clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    var tasksByHandleId = {};\n    var NUMBER = 'number';\n    var STRING = 'string';\n    var FUNCTION = 'function';\n    var INTERVAL = 'Interval';\n    var TIMEOUT = 'Timeout';\n    var NOT_SCHEDULED = 'notScheduled';\n    function scheduleTask(task) {\n        var data = task.data;\n        function timer() {\n            try {\n                task.invoke.apply(this, arguments);\n            }\n            finally {\n                if (typeof data.handleId === NUMBER) {\n                    // in non-nodejs env, we remove timerId\n                    // from local cache\n                    delete tasksByHandleId[data.handleId];\n                }\n                else if (data.handleId) {\n                    // Node returns complex objects as handleIds\n                    // we remove task reference from timer object\n                    data.handleId[taskSymbol] = null;\n                }\n            }\n        }\n        data.args[0] = timer;\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative(task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, function (delegate) { return function (self, args) {\n            if (typeof args[0] === FUNCTION) {\n                var zone = Zone.current;\n                var options = {\n                    handleId: null,\n                    isPeriodic: nameSuffix === INTERVAL,\n                    delay: (nameSuffix === TIMEOUT || nameSuffix === INTERVAL) ? args[1] || 0 : null,\n                    args: args\n                };\n                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                var handle = task.data.handleId;\n                if (typeof handle === NUMBER) {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === FUNCTION &&\n                    typeof handle.unref === FUNCTION) {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === NUMBER || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        }; });\n    clearNative =\n        patchMethod(window, cancelName, function (delegate) { return function (self, args) {\n            var id = args[0];\n            var task;\n            if (typeof id === NUMBER) {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === STRING) {\n                if (task.state !== NOT_SCHEDULED &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === NUMBER) {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        }; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * This is necessary for Chrome and Chrome mobile, to enable\n * things like redefining `createdCallback` on an element.\n */\nvar _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;\nvar _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =\n    Object.getOwnPropertyDescriptor;\nvar _create = Object.create;\nvar unconfigurablesKey = zoneSymbol('unconfigurables');\nvar PROTOTYPE = 'prototype';\nvar OBJECT = 'object';\nvar UNDEFINED$1 = 'undefined';\nfunction propertyPatch() {\n    Object.defineProperty = function (obj, prop, desc) {\n        if (isUnconfigurable(obj, prop)) {\n            throw new TypeError('Cannot assign to read only property \\'' + prop + '\\' of ' + obj);\n        }\n        var originalConfigurableFlag = desc.configurable;\n        if (prop !== PROTOTYPE) {\n            desc = rewriteDescriptor(obj, prop, desc);\n        }\n        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n    };\n    Object.defineProperties = function (obj, props) {\n        Object.keys(props).forEach(function (prop) {\n            Object.defineProperty(obj, prop, props[prop]);\n        });\n        return obj;\n    };\n    Object.create = function (obj, proto) {\n        if (typeof proto === OBJECT && !Object.isFrozen(proto)) {\n            Object.keys(proto).forEach(function (prop) {\n                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);\n            });\n        }\n        return _create(obj, proto);\n    };\n    Object.getOwnPropertyDescriptor = function (obj, prop) {\n        var desc = _getOwnPropertyDescriptor(obj, prop);\n        if (isUnconfigurable(obj, prop)) {\n            desc.configurable = false;\n        }\n        return desc;\n    };\n}\nfunction _redefineProperty(obj, prop, desc) {\n    var originalConfigurableFlag = desc.configurable;\n    desc = rewriteDescriptor(obj, prop, desc);\n    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n}\nfunction isUnconfigurable(obj, prop) {\n    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];\n}\nfunction rewriteDescriptor(obj, prop, desc) {\n    desc.configurable = true;\n    if (!desc.configurable) {\n        if (!obj[unconfigurablesKey]) {\n            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });\n        }\n        obj[unconfigurablesKey][prop] = true;\n    }\n    return desc;\n}\nfunction _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {\n    try {\n        return _defineProperty(obj, prop, desc);\n    }\n    catch (error) {\n        if (desc.configurable) {\n            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's\n            // retry with the original flag value\n            if (typeof originalConfigurableFlag == UNDEFINED$1) {\n                delete desc.configurable;\n            }\n            else {\n                desc.configurable = originalConfigurableFlag;\n            }\n            try {\n                return _defineProperty(obj, prop, desc);\n            }\n            catch (error) {\n                var descJson = null;\n                try {\n                    descJson = JSON.stringify(desc);\n                }\n                catch (error) {\n                    descJson = descJson.toString();\n                }\n                console.log(\"Attempting to configure '\" + prop + \"' with descriptor '\" + descJson + \"' on object '\" + obj + \"' and got error, giving up: \" + error);\n            }\n        }\n        else {\n            throw error;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// we have to patch the instance since the proto is non-configurable\nfunction apply(api, _global) {\n    var WS = _global.WebSocket;\n    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener\n    // On older Chrome, no need since EventTarget was already patched\n    if (!_global.EventTarget) {\n        patchEventTarget(_global, [WS.prototype]);\n    }\n    _global.WebSocket = function (a, b) {\n        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);\n        var proxySocket;\n        var proxySocketProto;\n        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance\n        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');\n        if (onmessageDesc && onmessageDesc.configurable === false) {\n            proxySocket = Object.create(socket);\n            // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'\n            // but proxySocket not, so we will keep socket as prototype and pass it to\n            // patchOnProperties method\n            proxySocketProto = socket;\n            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {\n                proxySocket[propName] = function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    if (propName === 'addEventListener' || propName === 'removeEventListener') {\n                        var eventName = args.length > 0 ? args[0] : undefined;\n                        if (eventName) {\n                            var propertySymbol = Zone.__symbol__('ON_PROPERTY' + eventName);\n                            socket[propertySymbol] = proxySocket[propertySymbol];\n                        }\n                    }\n                    return socket[propName].apply(socket, args);\n                };\n            });\n        }\n        else {\n            // we can patch the real socket\n            proxySocket = socket;\n        }\n        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open'], proxySocketProto);\n        return proxySocket;\n    };\n    var globalWebSocket = _global['WebSocket'];\n    for (var prop in WS) {\n        globalWebSocket[prop] = WS[prop];\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {globalThis}\n */\nvar globalEventHandlersEventNames = [\n    'abort',\n    'animationcancel',\n    'animationend',\n    'animationiteration',\n    'auxclick',\n    'beforeinput',\n    'blur',\n    'cancel',\n    'canplay',\n    'canplaythrough',\n    'change',\n    'compositionstart',\n    'compositionupdate',\n    'compositionend',\n    'cuechange',\n    'click',\n    'close',\n    'contextmenu',\n    'curechange',\n    'dblclick',\n    'drag',\n    'dragend',\n    'dragenter',\n    'dragexit',\n    'dragleave',\n    'dragover',\n    'drop',\n    'durationchange',\n    'emptied',\n    'ended',\n    'error',\n    'focus',\n    'focusin',\n    'focusout',\n    'gotpointercapture',\n    'input',\n    'invalid',\n    'keydown',\n    'keypress',\n    'keyup',\n    'load',\n    'loadstart',\n    'loadeddata',\n    'loadedmetadata',\n    'lostpointercapture',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'mousewheel',\n    'orientationchange',\n    'pause',\n    'play',\n    'playing',\n    'pointercancel',\n    'pointerdown',\n    'pointerenter',\n    'pointerleave',\n    'pointerlockchange',\n    'mozpointerlockchange',\n    'webkitpointerlockerchange',\n    'pointerlockerror',\n    'mozpointerlockerror',\n    'webkitpointerlockerror',\n    'pointermove',\n    'pointout',\n    'pointerover',\n    'pointerup',\n    'progress',\n    'ratechange',\n    'reset',\n    'resize',\n    'scroll',\n    'seeked',\n    'seeking',\n    'select',\n    'selectionchange',\n    'selectstart',\n    'show',\n    'sort',\n    'stalled',\n    'submit',\n    'suspend',\n    'timeupdate',\n    'volumechange',\n    'touchcancel',\n    'touchmove',\n    'touchstart',\n    'touchend',\n    'transitioncancel',\n    'transitionend',\n    'waiting',\n    'wheel'\n];\nvar documentEventNames = [\n    'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'fullscreenchange',\n    'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',\n    'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',\n    'visibilitychange'\n];\nvar windowEventNames = [\n    'absolutedeviceorientation',\n    'afterinput',\n    'afterprint',\n    'appinstalled',\n    'beforeinstallprompt',\n    'beforeprint',\n    'beforeunload',\n    'devicelight',\n    'devicemotion',\n    'deviceorientation',\n    'deviceorientationabsolute',\n    'deviceproximity',\n    'hashchange',\n    'languagechange',\n    'message',\n    'mozbeforepaint',\n    'offline',\n    'online',\n    'paint',\n    'pageshow',\n    'pagehide',\n    'popstate',\n    'rejectionhandled',\n    'storage',\n    'unhandledrejection',\n    'unload',\n    'userproximity',\n    'vrdisplyconnected',\n    'vrdisplaydisconnected',\n    'vrdisplaypresentchange'\n];\nvar htmlElementEventNames = [\n    'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',\n    'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',\n    'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'\n];\nvar mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];\nvar ieElementEventNames = [\n    'activate',\n    'afterupdate',\n    'ariarequest',\n    'beforeactivate',\n    'beforedeactivate',\n    'beforeeditfocus',\n    'beforeupdate',\n    'cellchange',\n    'controlselect',\n    'dataavailable',\n    'datasetchanged',\n    'datasetcomplete',\n    'errorupdate',\n    'filterchange',\n    'layoutcomplete',\n    'losecapture',\n    'move',\n    'moveend',\n    'movestart',\n    'propertychange',\n    'resizeend',\n    'resizestart',\n    'rowenter',\n    'rowexit',\n    'rowsdelete',\n    'rowsinserted',\n    'command',\n    'compassneedscalibration',\n    'deactivate',\n    'help',\n    'mscontentzoom',\n    'msmanipulationstatechanged',\n    'msgesturechange',\n    'msgesturedoubletap',\n    'msgestureend',\n    'msgesturehold',\n    'msgesturestart',\n    'msgesturetap',\n    'msgotpointercapture',\n    'msinertiastart',\n    'mslostpointercapture',\n    'mspointercancel',\n    'mspointerdown',\n    'mspointerenter',\n    'mspointerhover',\n    'mspointerleave',\n    'mspointermove',\n    'mspointerout',\n    'mspointerover',\n    'mspointerup',\n    'pointerout',\n    'mssitemodejumplistitemremoved',\n    'msthumbnailclick',\n    'stop',\n    'storagecommit'\n];\nvar webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];\nvar formEventNames = ['autocomplete', 'autocompleteerror'];\nvar detailEventNames = ['toggle'];\nvar frameEventNames = ['load'];\nvar frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];\nvar marqueeEventNames = ['bounce', 'finish', 'start'];\nvar XMLHttpRequestEventNames = [\n    'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',\n    'readystatechange'\n];\nvar IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];\nvar websocketEventNames = ['close', 'error', 'open', 'message'];\nvar workerEventNames = ['error', 'message'];\nvar eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties) {\n        return onProperties;\n    }\n    var tip = ignoreProperties.filter(function (ip) { return ip.target === target; });\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    var targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(function (op) { return targetIgnoreProperties.indexOf(op) === -1; });\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    var filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    var supportsWebSocket = typeof WebSocket !== 'undefined';\n    if (canPatchViaPropertyDescriptor()) {\n        var ignoreProperties = _global.__Zone_ignore_on_properties;\n        // for browsers that we can patch the descriptor:  Chrome & Firefox\n        if (isBrowser) {\n            // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n            // so we need to pass WindowPrototype to check onProp exist or not\n            patchFilteredProperties(window, eventNames.concat(['messageerror']), ignoreProperties, Object.getPrototypeOf(window));\n            patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);\n            if (typeof window['SVGElement'] !== 'undefined') {\n                patchFilteredProperties(window['SVGElement'].prototype, eventNames, ignoreProperties);\n            }\n            patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);\n            patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);\n            patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);\n            patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n            patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n            patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);\n            patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);\n            var HTMLMarqueeElement_1 = window['HTMLMarqueeElement'];\n            if (HTMLMarqueeElement_1) {\n                patchFilteredProperties(HTMLMarqueeElement_1.prototype, marqueeEventNames, ignoreProperties);\n            }\n            var Worker_1 = window['Worker'];\n            if (Worker_1) {\n                patchFilteredProperties(Worker_1.prototype, workerEventNames, ignoreProperties);\n            }\n        }\n        patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);\n        var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\n        if (XMLHttpRequestEventTarget) {\n            patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);\n        }\n        if (typeof IDBIndex !== 'undefined') {\n            patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);\n        }\n        if (supportsWebSocket) {\n            patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);\n        }\n    }\n    else {\n        // Safari, Android browsers (Jelly Bean)\n        patchViaCapturingAllTheEvents();\n        patchClass('XMLHttpRequest');\n        if (supportsWebSocket) {\n            apply(api, _global);\n        }\n    }\n}\nfunction canPatchViaPropertyDescriptor() {\n    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&\n        typeof Element !== 'undefined') {\n        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364\n        // IDL interface attributes are not configurable\n        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');\n        if (desc && !desc.configurable)\n            return false;\n    }\n    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');\n    // add enumerable and configurable here because in opera\n    // by default XMLHttpRequest.prototype.onreadystatechange is undefined\n    // without adding enumerable and configurable will cause onreadystatechange\n    // non-configurable\n    // and if XMLHttpRequest.prototype.onreadystatechange is undefined,\n    // we should set a real desc instead a fake one\n    if (xhrDesc) {\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return true;\n            }\n        });\n        var req = new XMLHttpRequest();\n        var result = !!req.onreadystatechange;\n        // restore original desc\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});\n        return result;\n    }\n    else {\n        var SYMBOL_FAKE_ONREADYSTATECHANGE_1 = zoneSymbol('fakeonreadystatechange');\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return this[SYMBOL_FAKE_ONREADYSTATECHANGE_1];\n            },\n            set: function (value) {\n                this[SYMBOL_FAKE_ONREADYSTATECHANGE_1] = value;\n            }\n        });\n        var req = new XMLHttpRequest();\n        var detectFunc = function () { };\n        req.onreadystatechange = detectFunc;\n        var result = req[SYMBOL_FAKE_ONREADYSTATECHANGE_1] === detectFunc;\n        req.onreadystatechange = null;\n        return result;\n    }\n}\n\nvar unboundKey = zoneSymbol('unbound');\n// Whenever any eventListener fires, we check the eventListener target and all parents\n// for `onwhatever` properties and replace them with zone-bound functions\n// - Chrome (for now)\nfunction patchViaCapturingAllTheEvents() {\n    var _loop_1 = function (i) {\n        var property = eventNames[i];\n        var onproperty = 'on' + property;\n        self.addEventListener(property, function (event) {\n            var elt = event.target, bound, source;\n            if (elt) {\n                source = elt.constructor['name'] + '.' + onproperty;\n            }\n            else {\n                source = 'unknown.' + onproperty;\n            }\n            while (elt) {\n                if (elt[onproperty] && !elt[onproperty][unboundKey]) {\n                    bound = Zone.current.wrap(elt[onproperty], source);\n                    bound[unboundKey] = elt[onproperty];\n                    elt[onproperty] = bound;\n                }\n                elt = elt.parentElement;\n            }\n        }, true);\n    };\n    for (var i = 0; i < eventNames.length; i++) {\n        _loop_1(i);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';\n    var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'\n        .split(',');\n    var EVENT_TARGET = 'EventTarget';\n    var apis = [];\n    var isWtf = _global['wtf'];\n    var WTF_ISSUE_555_ARRAY = WTF_ISSUE_555.split(',');\n    if (isWtf) {\n        // Workaround for: https://github.com/google/tracing-framework/issues/555\n        apis = WTF_ISSUE_555_ARRAY.map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);\n    }\n    else if (_global[EVENT_TARGET]) {\n        apis.push(EVENT_TARGET);\n    }\n    else {\n        // Note: EventTarget is not available in all browsers,\n        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget\n        apis = NO_EVENT_TARGET;\n    }\n    var isDisableIECheck = _global['__Zone_disable_IE_check'] || false;\n    var isEnableCrossContextCheck = _global['__Zone_enable_cross_context_check'] || false;\n    var ieOrEdge = isIEOrEdge();\n    var ADD_EVENT_LISTENER_SOURCE = '.addEventListener:';\n    var FUNCTION_WRAPPER = '[object FunctionWrapper]';\n    var BROWSER_TOOLS = 'function __BROWSERTOOLS_CONSOLE_SAFEFUNC() { [native code] }';\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (var i = 0; i < eventNames.length; i++) {\n        var eventName = eventNames[i];\n        var falseEventName = eventName + FALSE_STR;\n        var trueEventName = eventName + TRUE_STR;\n        var symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames$1[eventName] = {};\n        zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\n    }\n    //  predefine all task.source string\n    for (var i = 0; i < WTF_ISSUE_555.length; i++) {\n        var target = WTF_ISSUE_555_ARRAY[i];\n        var targets = globalSources[target] = {};\n        for (var j = 0; j < eventNames.length; j++) {\n            var eventName = eventNames[j];\n            targets[eventName] = target + ADD_EVENT_LISTENER_SOURCE + eventName;\n        }\n    }\n    var checkIEAndCrossContext = function (nativeDelegate, delegate, target, args) {\n        if (!isDisableIECheck && ieOrEdge) {\n            if (isEnableCrossContextCheck) {\n                try {\n                    var testString = delegate.toString();\n                    if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {\n                        nativeDelegate.apply(target, args);\n                        return false;\n                    }\n                }\n                catch (error) {\n                    nativeDelegate.apply(target, args);\n                    return false;\n                }\n            }\n            else {\n                var testString = delegate.toString();\n                if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {\n                    nativeDelegate.apply(target, args);\n                    return false;\n                }\n            }\n        }\n        else if (isEnableCrossContextCheck) {\n            try {\n                delegate.toString();\n            }\n            catch (error) {\n                nativeDelegate.apply(target, args);\n                return false;\n            }\n        }\n        return true;\n    };\n    var apiTypes = [];\n    for (var i = 0; i < apis.length; i++) {\n        var type = _global[apis[i]];\n        apiTypes.push(type && type.prototype);\n    }\n    patchEventTarget(_global, apiTypes, { validateHandler: checkIEAndCrossContext });\n    api.patchEventTarget = patchEventTarget;\n    return true;\n}\nfunction patchEvent(global, api) {\n    patchEventPrototype(global, api);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction registerElementPatch(_global) {\n    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {\n        return;\n    }\n    var _registerElement = document.registerElement;\n    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];\n    document.registerElement = function (name, opts) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                var source = 'Document.registerElement::' + callback;\n                if (opts.prototype.hasOwnProperty(callback)) {\n                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);\n                    if (descriptor && descriptor.value) {\n                        descriptor.value = Zone.current.wrap(descriptor.value, source);\n                        _redefineProperty(opts.prototype, callback, descriptor);\n                    }\n                    else {\n                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n                    }\n                }\n                else if (opts.prototype[callback]) {\n                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n                }\n            });\n        }\n        return _registerElement.apply(document, [name, opts]);\n    };\n    attachOriginToPatched(document.registerElement, _registerElement);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nZone.__load_patch('util', function (global, Zone, api) {\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n});\nZone.__load_patch('timers', function (global, Zone, api) {\n    var set = 'set';\n    var clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', function (global, Zone, api) {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', function (global, Zone, api) {\n    var blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (var i = 0; i < blockingMethods.length; i++) {\n        var name_1 = blockingMethods[i];\n        patchMethod(global, name_1, function (delegate, symbol, name) {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', function (global, Zone, api) {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    var XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);\n    }\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n    patchClass('IntersectionObserver');\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', function (global, Zone, api) {\n    propertyDescriptorPatch(api, global);\n    propertyPatch();\n    registerElementPatch(global);\n});\nZone.__load_patch('canvas', function (global, Zone, api) {\n    var HTMLCanvasElement = global['HTMLCanvasElement'];\n    if (typeof HTMLCanvasElement !== 'undefined' && HTMLCanvasElement.prototype &&\n        HTMLCanvasElement.prototype.toBlob) {\n        patchMacroTask(HTMLCanvasElement.prototype, 'toBlob', function (self, args) {\n            return { name: 'HTMLCanvasElement.toBlob', target: self, callbackIndex: 0, args: args };\n        });\n    }\n});\nZone.__load_patch('XHR', function (global, Zone, api) {\n    // Treat XMLHTTPRequest as a macrotask.\n    patchXHR(global);\n    var XHR_TASK = zoneSymbol('xhrTask');\n    var XHR_SYNC = zoneSymbol('xhrSync');\n    var XHR_LISTENER = zoneSymbol('xhrListener');\n    var XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    var XHR_URL = zoneSymbol('xhrURL');\n    function patchXHR(window) {\n        function findPendingTask(target) {\n            var pendingTask = target[XHR_TASK];\n            return pendingTask;\n        }\n        var SYMBOL_ADDEVENTLISTENER = zoneSymbol('addEventListener');\n        var SYMBOL_REMOVEEVENTLISTENER = zoneSymbol('removeEventListener');\n        var oriAddListener = XMLHttpRequest.prototype[SYMBOL_ADDEVENTLISTENER];\n        var oriRemoveListener = XMLHttpRequest.prototype[SYMBOL_REMOVEEVENTLISTENER];\n        if (!oriAddListener) {\n            var XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                oriAddListener = XMLHttpRequestEventTarget.prototype[SYMBOL_ADDEVENTLISTENER];\n                oriRemoveListener = XMLHttpRequestEventTarget.prototype[SYMBOL_REMOVEEVENTLISTENER];\n            }\n        }\n        var READY_STATE_CHANGE = 'readystatechange';\n        var SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            XMLHttpRequest[XHR_SCHEDULED] = false;\n            var data = task.data;\n            var target = data.target;\n            // remove existing event listener\n            var listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[SYMBOL_ADDEVENTLISTENER];\n                oriRemoveListener = target[SYMBOL_REMOVEEVENTLISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.apply(target, [READY_STATE_CHANGE, listener]);\n            }\n            var newListener = target[XHR_LISTENER] = function () {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        task.invoke();\n                    }\n                }\n            };\n            oriAddListener.apply(target, [READY_STATE_CHANGE, newListener]);\n            var storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            XMLHttpRequest[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            var data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        }; });\n        var XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {\n            var zone = Zone.current;\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                var options = {\n                    target: self,\n                    url: self[XHR_URL],\n                    isPeriodic: false,\n                    delay: null,\n                    args: args,\n                    aborted: false\n                };\n                return zone.scheduleMacroTask(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n            }\n        }; });\n        var STRING_TYPE = 'string';\n        var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {\n            var task = findPendingTask(self);\n            if (task && typeof task.type == STRING_TYPE) {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        }; });\n    }\n});\nZone.__load_patch('geolocation', function (global, Zone, api) {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', function (global, Zone, api) {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            var eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(function (eventTask) {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                var PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(\"fRUx\")))\n\n/***/ }),\n\n/***/ \"fRUx\":\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n\n/***/ \"p5Ee\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return environment; });\n// This is for the production site, which is hosted at https://angular.io\nvar environment = {\n    gaId: 'UA-80456300-1',\n    production: true,\n    mode: 'stable'\n};\n//# sourceMappingURL=environment.js.map\n\n/***/ })\n\n},[1]);\n\n\n// WEBPACK FOOTER //\n// polyfills.a5736775f9053c86555b.bundle.js","/**\n * This file includes polyfills needed by Angular and is loaded before the app.\n * You can add your own extra polyfills to this file.\n *\n * This file is divided into 2 sections:\n *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n *      file.\n *\n * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n *\n * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n */\n\n/***************************************************************************************************\n * BROWSER POLYFILLS\n */\n\n/**\n * INTERNET EXPLORER\n *\n * All the Internet Explorer polyfills are defined separately, in the `ie-polyfills.js` file.\n * They are also built separately from the main app, via the `yarn build-ie-polyfills` task.\n * The output of this build is conditionally loaded (only if we are running IE) in the browser,\n * and executed before the rest of the application files are executed.\n */\n\n/** HACK: force import of environment.ts/environment.prod.ts to load env specific polyfills */\nimport './environments/environment';\n\n\n/** ALL Firefox browsers require the following to support `@angular/animation`. **/\n// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n\n\n\n/***************************************************************************************************\n * Zone JS is required by Angular itself.\n */\nimport 'zone.js/dist/zone';  // Included with Angular CLI.\n\n\n\n/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\n/**\n * Date, currency, decimal and percent pipes.\n * Needed for: All but Chrome, Firefox, Edge, IE11 and Safari 10\n */\n// import 'intl';  // Run `npm install --save intl`.\n\n\n\n// WEBPACK FOOTER //\n// /Users/twer/private/GDE/angular/aio/src/polyfills.ts","/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Zone$1 = (function (global) {\n    var FUNCTION = 'function';\n    var performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    if (global['Zone']) {\n        throw new Error('Zone already loaded.');\n    }\n    var Zone = (function () {\n        function Zone(parent, zoneSpec) {\n            this._properties = null;\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        Zone.assertZonePatched = function () {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        };\n        Object.defineProperty(Zone, \"root\", {\n            get: function () {\n                var zone = Zone.current;\n                while (zone.parent) {\n                    zone = zone.parent;\n                }\n                return zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Zone, \"current\", {\n            get: function () {\n                return _currentZoneFrame.zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone, \"currentTask\", {\n            get: function () {\n                return _currentTask;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.__load_patch = function (name, fn) {\n            if (patches.hasOwnProperty(name)) {\n                throw Error('Already loaded patch: ' + name);\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                var perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        };\n        Object.defineProperty(Zone.prototype, \"parent\", {\n            get: function () {\n                return this._parent;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Object.defineProperty(Zone.prototype, \"name\", {\n            get: function () {\n                return this._name;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        \n        Zone.prototype.get = function (key) {\n            var zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        };\n        Zone.prototype.getZoneWith = function (key) {\n            var current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        };\n        Zone.prototype.fork = function (zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        };\n        Zone.prototype.wrap = function (callback, source) {\n            if (typeof callback !== FUNCTION) {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            var _callback = this._zoneDelegate.intercept(this, callback, source);\n            var zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        };\n        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = undefined; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {\n            if (applyThis === void 0) { applyThis = null; }\n            if (applyArgs === void 0) { applyArgs = null; }\n            if (source === void 0) { source = null; }\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        };\n        Zone.prototype.runTask = function (task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            // we have to define an variable here, if not\n            // typescript compiler will complain below\n            var isNotScheduled = task.state === notScheduled;\n            if (isNotScheduled && task.type === eventTask) {\n                return;\n            }\n            var reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            var previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = null;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        };\n        Zone.prototype.scheduleTask = function (task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                var newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(\"can not reschedule task to \" + this\n                            .name + \" which is descendants of the original zone \" + task.zone.name);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            var zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        };\n        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, null));\n        };\n        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        };\n        Zone.prototype.cancelTask = function (task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        };\n        Zone.prototype._updateTaskCount = function (task, count) {\n            var zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (var i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        };\n        return Zone;\n    }());\n    Zone.__symbol__ = __symbol__;\n    var DELEGATE_ZS = {\n        name: '',\n        onHasTask: function (delegate, _, target, hasTaskState) {\n            return delegate.hasTask(target, hasTaskState);\n        },\n        onScheduleTask: function (delegate, _, target, task) {\n            return delegate.scheduleTask(target, task);\n        },\n        onInvokeTask: function (delegate, _, target, task, applyThis, applyArgs) { return delegate.invokeTask(target, task, applyThis, applyArgs); },\n        onCancelTask: function (delegate, _, target, task) {\n            return delegate.cancelTask(target, task);\n        }\n    };\n    var ZoneDelegate = (function () {\n        function ZoneDelegate(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt =\n                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            var zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            var parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        };\n        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        };\n        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ?\n                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.handleError = function (targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        };\n        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {\n            var returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        };\n        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ?\n                this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        };\n        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {\n            var value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        };\n        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                return this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        };\n        ZoneDelegate.prototype._updateTaskCount = function (type, count) {\n            var counts = this._taskCounts;\n            var prev = counts[type];\n            var next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                var isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        };\n        return ZoneDelegate;\n    }());\n    var ZoneTask = (function () {\n        function ZoneTask(type, source, callback, options, scheduleFn, cancelFn) {\n            this._zone = null;\n            this.runCount = 0;\n            this._zoneDelegates = null;\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            this.callback = callback;\n            var self = this;\n            if (type === eventTask && options && options.isUsingGlobalCallback) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.apply(global, [self, this, arguments]);\n                };\n            }\n        }\n        ZoneTask.invokeTask = function (task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        };\n        Object.defineProperty(ZoneTask.prototype, \"zone\", {\n            get: function () {\n                return this._zone;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ZoneTask.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        ZoneTask.prototype.cancelScheduleRequest = function () {\n            this._transitionTo(notScheduled, scheduling);\n        };\n        ZoneTask.prototype._transitionTo = function (toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(this.type + \" '\" + this.source + \"': can not transition to '\" + toState + \"', expecting state '\" + fromState1 + \"'\" + (fromState2 ?\n                    ' or \\'' + fromState2 + '\\'' :\n                    '') + \", was '\" + this._state + \"'.\");\n            }\n        };\n        ZoneTask.prototype.toString = function () {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId;\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        };\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        ZoneTask.prototype.toJSON = function () {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                invoke: this.invoke,\n                scheduleFn: this.scheduleFn,\n                cancelFn: this.cancelFn,\n                runCount: this.runCount,\n                callback: this.callback\n            };\n        };\n        return ZoneTask;\n    }());\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    var symbolSetTimeout = __symbol__('setTimeout');\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    var _microTaskQueue = [];\n    var _isDrainingMicrotaskQueue = false;\n    var nativeMicroTaskQueuePromise;\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            if (!nativeMicroTaskQueuePromise) {\n                if (global[symbolPromise]) {\n                    nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n                }\n            }\n            if (nativeMicroTaskQueuePromise) {\n                nativeMicroTaskQueuePromise[symbolThen](drainMicroTaskQueue);\n            }\n            else {\n                global[symbolSetTimeout](drainMicroTaskQueue, 0);\n            }\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                var queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (var i = 0; i < queue.length; i++) {\n                    var task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            var showError = !Zone[__symbol__('ignoreConsoleErrorUncaughtError')];\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    var NO_ZONE = { name: 'NO ZONE' };\n    var notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    var microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    var patches = {};\n    var _api = {\n        symbol: __symbol__,\n        currentZoneFrame: function () { return _currentZoneFrame; },\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: function () { return !Zone[__symbol__('ignoreConsoleErrorUncaughtError')]; },\n        patchEventTarget: function () { return []; },\n        patchOnProperties: noop,\n        patchMethod: function () { return noop; },\n        setNativePromise: function (NativePromise) {\n            nativeMicroTaskQueuePromise = NativePromise.resolve(0);\n        },\n    };\n    var _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    var _currentTask = null;\n    var _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    function __symbol__(name) {\n        return '__zone_symbol__' + name;\n    }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n})(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\nvar __read = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __values = (undefined && undefined.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', function (global, Zone, api) {\n    var __symbol__ = api.symbol;\n    var _uncaughtPromiseErrors = [];\n    var symbolPromise = __symbol__('Promise');\n    var symbolThen = __symbol__('then');\n    api.onUnhandledError = function (e) {\n        if (api.showUncaughtError()) {\n            var rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = function () {\n        while (_uncaughtPromiseErrors.length) {\n            var _loop_1 = function () {\n                var uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n                try {\n                    uncaughtPromiseError.zone.runGuarded(function () {\n                        throw uncaughtPromiseError;\n                    });\n                }\n                catch (error) {\n                    handleUnhandledRejection(error);\n                }\n            };\n            while (_uncaughtPromiseErrors.length) {\n                _loop_1();\n            }\n        }\n    };\n    var UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            var handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (handler && typeof handler === 'function') {\n                handler.apply(this, [e]);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    var symbolState = __symbol__('state');\n    var symbolValue = __symbol__('value');\n    var source = 'Promise.then';\n    var UNRESOLVED = null;\n    var RESOLVED = true;\n    var REJECTED = false;\n    var REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return function (v) {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    var once = function () {\n        var wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    var TYPE_ERROR = 'Promise resolved with itself';\n    var OBJECT = 'object';\n    var FUNCTION = 'function';\n    var CURRENT_TASK_SYMBOL = __symbol__('currentTask');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        var onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            var then = null;\n            try {\n                if (typeof value === OBJECT || typeof value === FUNCTION) {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(function () {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === FUNCTION) {\n                try {\n                    then.apply(value, [\n                        onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false))\n                    ]);\n                }\n                catch (err) {\n                    onceWrapper(function () {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                var queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    value[CURRENT_TASK_SYMBOL] = Zone.currentTask;\n                }\n                for (var i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    try {\n                        throw new Error('Uncaught (in promise): ' + value +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        var error_1 = err;\n                        error_1.rejection = value;\n                        error_1.promise = promise;\n                        error_1.zone = Zone.current;\n                        error_1.task = Zone.currentTask;\n                        _uncaughtPromiseErrors.push(error_1);\n                        api.scheduleMicroTask(); // to make sure that it is running\n                    }\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    var REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                var handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === FUNCTION) {\n                    handler.apply(this, [{ rejection: promise[symbolValue], promise: promise }]);\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        var delegate = promise[symbolState] ?\n            (typeof onFulfilled === FUNCTION) ? onFulfilled : forwardResolution :\n            (typeof onRejected === FUNCTION) ? onRejected : forwardRejection;\n        zone.scheduleMicroTask(source, function () {\n            try {\n                resolvePromise(chainPromise, true, zone.run(delegate, undefined, [promise[symbolValue]]));\n            }\n            catch (error) {\n                resolvePromise(chainPromise, false, error);\n            }\n        });\n    }\n    var ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    var ZoneAwarePromise = (function () {\n        function ZoneAwarePromise(executor) {\n            var promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        ZoneAwarePromise.toString = function () {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        };\n        ZoneAwarePromise.resolve = function (value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        };\n        ZoneAwarePromise.reject = function (error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        };\n        ZoneAwarePromise.race = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                _a = __read([res, rej], 2), resolve = _a[0], reject = _a[1];\n                var _a;\n            });\n            function onResolve(value) {\n                promise && (promise = null || resolve(value));\n            }\n            function onReject(error) {\n                promise && (promise = null || reject(error));\n            }\n            try {\n                for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {\n                    var value = values_1_1.value;\n                    if (!isThenable(value)) {\n                        value = this.resolve(value);\n                    }\n                    value.then(onResolve, onReject);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return promise;\n            var e_1, _a;\n        };\n        ZoneAwarePromise.all = function (values) {\n            var resolve;\n            var reject;\n            var promise = new this(function (res, rej) {\n                resolve = res;\n                reject = rej;\n            });\n            var count = 0;\n            var resolvedValues = [];\n            try {\n                for (var values_2 = __values(values), values_2_1 = values_2.next(); !values_2_1.done; values_2_1 = values_2.next()) {\n                    var value = values_2_1.value;\n                    if (!isThenable(value)) {\n                        value = this.resolve(value);\n                    }\n                    value.then((function (index) { return function (value) {\n                        resolvedValues[index] = value;\n                        count--;\n                        if (!count) {\n                            resolve(resolvedValues);\n                        }\n                    }; })(count), reject);\n                    count++;\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (values_2_1 && !values_2_1.done && (_a = values_2.return)) _a.call(values_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            if (!count)\n                resolve(resolvedValues);\n            return promise;\n            var e_2, _a;\n        };\n        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {\n            var chainPromise = new this.constructor(null);\n            var zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        };\n        ZoneAwarePromise.prototype.catch = function (onRejected) {\n            return this.then(null, onRejected);\n        };\n        return ZoneAwarePromise;\n    }());\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    var NativePromise = global[symbolPromise] = global['Promise'];\n    var ZONE_AWARE_PROMISE = Zone.__symbol__('ZoneAwarePromise');\n    var desc = Object.getOwnPropertyDescriptor(global, 'Promise');\n    if (!desc || desc.configurable) {\n        desc && delete desc.writable;\n        desc && delete desc.value;\n        if (!desc) {\n            desc = { configurable: true, enumerable: true };\n        }\n        desc.get = function () {\n            // if we already set ZoneAwarePromise, use patched one\n            // otherwise return native one.\n            return global[ZONE_AWARE_PROMISE] ? global[ZONE_AWARE_PROMISE] : global[symbolPromise];\n        };\n        desc.set = function (NewNativePromise) {\n            if (NewNativePromise === ZoneAwarePromise) {\n                // if the NewNativePromise is ZoneAwarePromise\n                // save to global\n                global[ZONE_AWARE_PROMISE] = NewNativePromise;\n            }\n            else {\n                // if the NewNativePromise is not ZoneAwarePromise\n                // for example: after load zone.js, some library just\n                // set es6-promise to global, if we set it to global\n                // directly, assertZonePatched will fail and angular\n                // will not loaded, so we just set the NewNativePromise\n                // to global[symbolPromise], so the result is just like\n                // we load ES6 Promise before zone.js\n                global[symbolPromise] = NewNativePromise;\n                if (!NewNativePromise.prototype[symbolThen]) {\n                    patchThen(NewNativePromise);\n                }\n                api.setNativePromise(NewNativePromise);\n            }\n        };\n        Object.defineProperty(global, 'Promise', desc);\n    }\n    global['Promise'] = ZoneAwarePromise;\n    var symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        var proto = Ctor.prototype;\n        var originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        // check Ctor.prototype.then propertyDescritor is writable or not\n        // in meteor env, writable is false, we have to make it to be true.\n        var prop = Object.getOwnPropertyDescriptor(Ctor.prototype, 'then');\n        if (prop && prop.writable === false && prop.configurable) {\n            Object.defineProperty(Ctor.prototype, 'then', { writable: true });\n        }\n        Ctor.prototype.then = function (onResolve, onReject) {\n            var _this = this;\n            var wrapped = new ZoneAwarePromise(function (resolve, reject) {\n                originalThen.call(_this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    function zoneify(fn) {\n        return function () {\n            var resultPromise = fn.apply(this, arguments);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            var ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        var fetch_1 = global['fetch'];\n        if (typeof fetch_1 == FUNCTION) {\n            global['fetch'] = zoneify(fetch_1);\n        }\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\nvar zoneSymbol = Zone.__symbol__;\nvar _global = typeof window === 'object' && window || typeof self === 'object' && self || global;\nvar FUNCTION = 'function';\nvar UNDEFINED = 'undefined';\nvar REMOVE_ATTRIBUTE = 'removeAttribute';\nfunction bindArguments(args, source) {\n    for (var i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === FUNCTION) {\n            args[i] = Zone.current.wrap(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    var source = prototype.constructor['name'];\n    var _loop_1 = function (i) {\n        var name_1 = fnNames[i];\n        var delegate = prototype[name_1];\n        if (delegate) {\n            var prototypeDesc = Object.getOwnPropertyDescriptor(prototype, name_1);\n            if (!isPropertyWritable(prototypeDesc)) {\n                return \"continue\";\n            }\n            prototype[name_1] = (function (delegate) {\n                var patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    };\n    for (var i = 0; i < fnNames.length; i++) {\n        _loop_1(i);\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    if (typeof propertyDesc.get === FUNCTION && typeof propertyDesc.set === UNDEFINED) {\n        return false;\n    }\n    return true;\n}\nvar isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidently browserify\n// this code.\nvar isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nvar isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidently browserify\n// this code.\nvar isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(typeof window !== 'undefined' && window['HTMLElement']);\nvar zoneSymbolEventNames = {};\nvar wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    var eventNameSymbol = zoneSymbolEventNames[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    var target = this || event.target || _global;\n    var listener = target[eventNameSymbol];\n    var result = listener && listener.apply(this, arguments);\n    if (result != undefined && !result) {\n        event.preventDefault();\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    var desc = Object.getOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        var prototypeDesc = Object.getOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    var originalDescGet = desc.get;\n    // substr(2) cuz 'onclick' -> 'click', etc\n    var eventName = prop.substr(2);\n    var eventNameSymbol = zoneSymbolEventNames[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        var target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        var previousValue = target[eventNameSymbol];\n        if (previousValue) {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        if (typeof newValue === 'function') {\n            target[eventNameSymbol] = newValue;\n            target.addEventListener(eventName, wrapFn, false);\n        }\n        else {\n            target[eventNameSymbol] = null;\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        var target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        var listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            var value = originalDescGet && originalDescGet.apply(this);\n            if (value) {\n                desc.set.apply(this, [value]);\n                if (typeof target[REMOVE_ATTRIBUTE] === FUNCTION) {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(obj, prop, desc);\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (var i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        var onProperties = [];\n        for (var prop in obj) {\n            if (prop.substr(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (var j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nvar originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    var OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        var a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    var instance = new OriginalClass(function () { });\n    var prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                Object.defineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    var proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    var delegateName = zoneSymbol(name);\n    var delegate;\n    if (proto && !(delegate = proto[delegateName])) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        var desc = proto && Object.getOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            var patchDelegate_1 = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate_1(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    var setNative = null;\n    function scheduleTask(task) {\n        var data = task.data;\n        data.args[data.callbackIndex] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, function (delegate) { return function (self, args) {\n        var meta = metaCreator(self, args);\n        if (meta.callbackIndex >= 0 && typeof args[meta.callbackIndex] === 'function') {\n            var task = Zone.current.scheduleMacroTask(meta.name, args[meta.callbackIndex], meta, scheduleTask, null);\n            return task;\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    }; });\n}\n\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nvar isDetectedIEOrEdge = false;\nvar ieOrEdge = false;\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        var ua = window.navigator.userAgent;\n        var msie = ua.indexOf('MSIE ');\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n        return ieOrEdge;\n    }\n    catch (error) {\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', function (global, Zone, api) {\n    // patch Func.prototype.toString to let them look like native\n    var originalFunctionToString = Zone['__zone_symbol__originalToString'] =\n        Function.prototype.toString;\n    var FUNCTION = 'function';\n    var ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    var PROMISE_SYMBOL = zoneSymbol('Promise');\n    var ERROR_SYMBOL = zoneSymbol('Error');\n    Function.prototype.toString = function () {\n        if (typeof this === FUNCTION) {\n            var originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === FUNCTION) {\n                    return originalFunctionToString.apply(this[ORIGINAL_DELEGATE_SYMBOL], arguments);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                var nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.apply(nativePromise, arguments);\n                }\n            }\n            if (this === Error) {\n                var nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.apply(nativeError, arguments);\n                }\n            }\n        }\n        return originalFunctionToString.apply(this, arguments);\n    };\n    // patch Object.prototype.toString to let them look like native\n    var originalObjectToString = Object.prototype.toString;\n    var PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.apply(this, arguments);\n    };\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nvar __read$1 = (undefined && undefined.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (undefined && undefined.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read$1(arguments[i]));\n    return ar;\n};\nvar TRUE_STR = 'true';\nvar FALSE_STR = 'false';\n// an identifier to tell ZoneTask do not create a new invoke closure\nvar OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    isUsingGlobalCallback: true\n};\nvar zoneSymbolEventNames$1 = {};\nvar globalSources = {};\nvar CONSTRUCTOR_NAME = 'name';\nvar FUNCTION_TYPE = 'function';\nvar OBJECT_TYPE = 'object';\nvar ZONE_SYMBOL_PREFIX = '__zone_symbol__';\nvar EVENT_NAME_SYMBOL_REGX = /^__zone_symbol__(\\w+)(true|false)$/;\nvar IMMEDIATE_PROPAGATION_SYMBOL = ('__zone_symbol__propagationStopped');\nfunction patchEventTarget(_global, apis, patchOptions) {\n    var ADD_EVENT_LISTENER = (patchOptions && patchOptions.addEventListenerFnName) || 'addEventListener';\n    var REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.removeEventListenerFnName) || 'removeEventListener';\n    var LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listenersFnName) || 'eventListeners';\n    var REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.removeAllFnName) || 'removeAllListeners';\n    var zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    var ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    var PREPEND_EVENT_LISTENER = 'prependListener';\n    var PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    var invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        var delegate = task.callback;\n        if (typeof delegate === OBJECT_TYPE && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = function (event) { return delegate.handleEvent(event); };\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        task.invoke(task, target, [event]);\n        var options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            var delegate_1 = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].apply(target, [event.type, delegate_1, options]);\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    var globalZoneAwareCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samusung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        var target = this || event.target || _global;\n        var tasks = target[zoneSymbolEventNames$1[event.type][FALSE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                var copyTasks = tasks.slice();\n                for (var i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    var globalZoneAwareCaptureCallback = function (event) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samusung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        var target = this || event.target || _global;\n        var tasks = target[zoneSymbolEventNames$1[event.type][TRUE_STR]];\n        if (tasks) {\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                invokeTask(tasks[0], target, event);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                var copyTasks = tasks.slice();\n                for (var i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    invokeTask(copyTasks[i], target, event);\n                }\n            }\n        }\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        var useGlobalCallback = true;\n        if (patchOptions && patchOptions.useGlobalCallback !== undefined) {\n            useGlobalCallback = patchOptions.useGlobalCallback;\n        }\n        var validateHandler = patchOptions && patchOptions.validateHandler;\n        var checkDuplicate = true;\n        if (patchOptions && patchOptions.checkDuplicate !== undefined) {\n            checkDuplicate = patchOptions.checkDuplicate;\n        }\n        var returnTarget = false;\n        if (patchOptions && patchOptions.returnTarget !== undefined) {\n            returnTarget = patchOptions.returnTarget;\n        }\n        var proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = Object.getPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        var taskData = {};\n        var nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        var nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        var nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        var nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        var nativePrependEventListener;\n        if (patchOptions && patchOptions.prependEventListenerFnName) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prependEventListenerFnName)] =\n                proto[patchOptions.prependEventListenerFnName];\n        }\n        var customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.apply(taskData.target, [\n                taskData.eventName,\n                taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback,\n                taskData.options\n            ]);\n        };\n        var customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                var symbolEventNames = zoneSymbolEventNames$1[task.eventName];\n                var symbolEventName = void 0;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                var existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (var i = 0; i < existingTasks.length; i++) {\n                        var existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.apply(task.target, [\n                task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback,\n                task.options\n            ]);\n        };\n        var customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.apply(taskData.target, [taskData.eventName, task.invoke, taskData.options]);\n        };\n        var customSchedulePrepend = function (task) {\n            return nativePrependEventListener.apply(taskData.target, [taskData.eventName, task.invoke, taskData.options]);\n        };\n        var customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.apply(task.target, [task.eventName, task.invoke, task.options]);\n        };\n        var customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        var customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        var compareTaskCallbackVsDelegate = function (task, delegate) {\n            var typeOfDelegate = typeof delegate;\n            if ((typeOfDelegate === FUNCTION_TYPE && task.callback === delegate) ||\n                (typeOfDelegate === OBJECT_TYPE && task.originalDelegate === delegate)) {\n                // same callback, same capture, same event name, just return\n                return true;\n            }\n            return false;\n        };\n        var compare = (patchOptions && patchOptions.compareTaskCallbackVsDelegate) ?\n            patchOptions.compareTaskCallbackVsDelegate :\n            compareTaskCallbackVsDelegate;\n        var makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget, prepend) {\n            if (returnTarget === void 0) { returnTarget = false; }\n            if (prepend === void 0) { prepend = false; }\n            return function () {\n                var target = this || _global;\n                var targetZone = Zone.current;\n                var delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                var isHandleEvent = false;\n                if (typeof delegate !== FUNCTION_TYPE) {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                var eventName = arguments[0];\n                var options = arguments[2];\n                var capture;\n                var once = false;\n                if (options === undefined) {\n                    capture = false;\n                }\n                else if (options === true) {\n                    capture = true;\n                }\n                else if (options === false) {\n                    capture = false;\n                }\n                else {\n                    capture = options ? !!options.capture : false;\n                    once = options ? !!options.once : false;\n                }\n                var zone = Zone.current;\n                var symbolEventNames = zoneSymbolEventNames$1[eventName];\n                var symbolEventName;\n                if (!symbolEventNames) {\n                    // the code is duplicate, but I just want to get some better performance\n                    var falseEventName = eventName + FALSE_STR;\n                    var trueEventName = eventName + TRUE_STR;\n                    var symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n                    var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n                    zoneSymbolEventNames$1[eventName] = {};\n                    zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\n                    zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\n                    symbolEventName = capture ? symbolCapture : symbol;\n                }\n                else {\n                    symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                }\n                var existingTasks = target[symbolEventName];\n                var isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (var i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                var source;\n                var constructorName = target.constructor[CONSTRUCTOR_NAME];\n                var targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource + eventName;\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                var data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : null;\n                var task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                task.options = options;\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            var target = this || _global;\n            var eventName = arguments[0];\n            var options = arguments[2];\n            var capture;\n            if (options === undefined) {\n                capture = false;\n            }\n            else if (options === true) {\n                capture = true;\n            }\n            else if (options === false) {\n                capture = false;\n            }\n            else {\n                capture = options ? !!options.capture : false;\n            }\n            var delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            var symbolEventNames = zoneSymbolEventNames$1[eventName];\n            var symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            var existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (var i = 0; i < existingTasks.length; i++) {\n                    var existingTask = existingTasks[i];\n                    var typeOfDelegate = typeof delegate;\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        return;\n                    }\n                }\n            }\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            var target = this || _global;\n            var eventName = arguments[0];\n            var listeners = [];\n            var tasks = findEventTasks(target, eventName);\n            for (var i = 0; i < tasks.length; i++) {\n                var task = tasks[i];\n                var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            var target = this || _global;\n            var eventName = arguments[0];\n            if (!eventName) {\n                var keys = Object.keys(target);\n                for (var i = 0; i < keys.length; i++) {\n                    var prop = keys[i];\n                    var match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    var evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].apply(this, [evtName]);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].apply(this, ['removeListener']);\n            }\n            else {\n                var symbolEventNames = zoneSymbolEventNames$1[eventName];\n                if (symbolEventNames) {\n                    var symbolEventName = symbolEventNames[FALSE_STR];\n                    var symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    var tasks = target[symbolEventName];\n                    var captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        var removeTasks = __spread(tasks);\n                        for (var i = 0; i < removeTasks.length; i++) {\n                            var task = removeTasks[i];\n                            var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].apply(this, [eventName, delegate, task.options]);\n                        }\n                    }\n                    if (captureTasks) {\n                        var removeTasks = __spread(captureTasks);\n                        for (var i = 0; i < removeTasks.length; i++) {\n                            var task = removeTasks[i];\n                            var delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].apply(this, [eventName, delegate, task.options]);\n                        }\n                    }\n                }\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    var results = [];\n    for (var i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    var foundTasks = [];\n    for (var prop in target) {\n        var match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n        var evtName = match && match[1];\n        if (evtName && (!eventName || evtName === eventName)) {\n            var tasks = target[prop];\n            if (tasks) {\n                for (var i = 0; i < tasks.length; i++) {\n                    foundTasks.push(tasks[i]);\n                }\n            }\n        }\n    }\n    return foundTasks;\n}\nfunction patchEventPrototype(global, api) {\n    var Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', function (delegate) { return function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n        }; });\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nvar taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    var setNative = null;\n    var clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    var tasksByHandleId = {};\n    var NUMBER = 'number';\n    var STRING = 'string';\n    var FUNCTION = 'function';\n    var INTERVAL = 'Interval';\n    var TIMEOUT = 'Timeout';\n    var NOT_SCHEDULED = 'notScheduled';\n    function scheduleTask(task) {\n        var data = task.data;\n        function timer() {\n            try {\n                task.invoke.apply(this, arguments);\n            }\n            finally {\n                if (typeof data.handleId === NUMBER) {\n                    // in non-nodejs env, we remove timerId\n                    // from local cache\n                    delete tasksByHandleId[data.handleId];\n                }\n                else if (data.handleId) {\n                    // Node returns complex objects as handleIds\n                    // we remove task reference from timer object\n                    data.handleId[taskSymbol] = null;\n                }\n            }\n        }\n        data.args[0] = timer;\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative(task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, function (delegate) { return function (self, args) {\n            if (typeof args[0] === FUNCTION) {\n                var zone = Zone.current;\n                var options = {\n                    handleId: null,\n                    isPeriodic: nameSuffix === INTERVAL,\n                    delay: (nameSuffix === TIMEOUT || nameSuffix === INTERVAL) ? args[1] || 0 : null,\n                    args: args\n                };\n                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                var handle = task.data.handleId;\n                if (typeof handle === NUMBER) {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === FUNCTION &&\n                    typeof handle.unref === FUNCTION) {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === NUMBER || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        }; });\n    clearNative =\n        patchMethod(window, cancelName, function (delegate) { return function (self, args) {\n            var id = args[0];\n            var task;\n            if (typeof id === NUMBER) {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === STRING) {\n                if (task.state !== NOT_SCHEDULED &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === NUMBER) {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        }; });\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/*\n * This is necessary for Chrome and Chrome mobile, to enable\n * things like redefining `createdCallback` on an element.\n */\nvar _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;\nvar _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =\n    Object.getOwnPropertyDescriptor;\nvar _create = Object.create;\nvar unconfigurablesKey = zoneSymbol('unconfigurables');\nvar PROTOTYPE = 'prototype';\nvar OBJECT = 'object';\nvar UNDEFINED$1 = 'undefined';\nfunction propertyPatch() {\n    Object.defineProperty = function (obj, prop, desc) {\n        if (isUnconfigurable(obj, prop)) {\n            throw new TypeError('Cannot assign to read only property \\'' + prop + '\\' of ' + obj);\n        }\n        var originalConfigurableFlag = desc.configurable;\n        if (prop !== PROTOTYPE) {\n            desc = rewriteDescriptor(obj, prop, desc);\n        }\n        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n    };\n    Object.defineProperties = function (obj, props) {\n        Object.keys(props).forEach(function (prop) {\n            Object.defineProperty(obj, prop, props[prop]);\n        });\n        return obj;\n    };\n    Object.create = function (obj, proto) {\n        if (typeof proto === OBJECT && !Object.isFrozen(proto)) {\n            Object.keys(proto).forEach(function (prop) {\n                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);\n            });\n        }\n        return _create(obj, proto);\n    };\n    Object.getOwnPropertyDescriptor = function (obj, prop) {\n        var desc = _getOwnPropertyDescriptor(obj, prop);\n        if (isUnconfigurable(obj, prop)) {\n            desc.configurable = false;\n        }\n        return desc;\n    };\n}\nfunction _redefineProperty(obj, prop, desc) {\n    var originalConfigurableFlag = desc.configurable;\n    desc = rewriteDescriptor(obj, prop, desc);\n    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);\n}\nfunction isUnconfigurable(obj, prop) {\n    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];\n}\nfunction rewriteDescriptor(obj, prop, desc) {\n    desc.configurable = true;\n    if (!desc.configurable) {\n        if (!obj[unconfigurablesKey]) {\n            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });\n        }\n        obj[unconfigurablesKey][prop] = true;\n    }\n    return desc;\n}\nfunction _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {\n    try {\n        return _defineProperty(obj, prop, desc);\n    }\n    catch (error) {\n        if (desc.configurable) {\n            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's\n            // retry with the original flag value\n            if (typeof originalConfigurableFlag == UNDEFINED$1) {\n                delete desc.configurable;\n            }\n            else {\n                desc.configurable = originalConfigurableFlag;\n            }\n            try {\n                return _defineProperty(obj, prop, desc);\n            }\n            catch (error) {\n                var descJson = null;\n                try {\n                    descJson = JSON.stringify(desc);\n                }\n                catch (error) {\n                    descJson = descJson.toString();\n                }\n                console.log(\"Attempting to configure '\" + prop + \"' with descriptor '\" + descJson + \"' on object '\" + obj + \"' and got error, giving up: \" + error);\n            }\n        }\n        else {\n            throw error;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// we have to patch the instance since the proto is non-configurable\nfunction apply(api, _global) {\n    var WS = _global.WebSocket;\n    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener\n    // On older Chrome, no need since EventTarget was already patched\n    if (!_global.EventTarget) {\n        patchEventTarget(_global, [WS.prototype]);\n    }\n    _global.WebSocket = function (a, b) {\n        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);\n        var proxySocket;\n        var proxySocketProto;\n        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance\n        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');\n        if (onmessageDesc && onmessageDesc.configurable === false) {\n            proxySocket = Object.create(socket);\n            // socket have own property descriptor 'onopen', 'onmessage', 'onclose', 'onerror'\n            // but proxySocket not, so we will keep socket as prototype and pass it to\n            // patchOnProperties method\n            proxySocketProto = socket;\n            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {\n                proxySocket[propName] = function () {\n                    var args = Array.prototype.slice.call(arguments);\n                    if (propName === 'addEventListener' || propName === 'removeEventListener') {\n                        var eventName = args.length > 0 ? args[0] : undefined;\n                        if (eventName) {\n                            var propertySymbol = Zone.__symbol__('ON_PROPERTY' + eventName);\n                            socket[propertySymbol] = proxySocket[propertySymbol];\n                        }\n                    }\n                    return socket[propName].apply(socket, args);\n                };\n            });\n        }\n        else {\n            // we can patch the real socket\n            proxySocket = socket;\n        }\n        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open'], proxySocketProto);\n        return proxySocket;\n    };\n    var globalWebSocket = _global['WebSocket'];\n    for (var prop in WS) {\n        globalWebSocket[prop] = WS[prop];\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {globalThis}\n */\nvar globalEventHandlersEventNames = [\n    'abort',\n    'animationcancel',\n    'animationend',\n    'animationiteration',\n    'auxclick',\n    'beforeinput',\n    'blur',\n    'cancel',\n    'canplay',\n    'canplaythrough',\n    'change',\n    'compositionstart',\n    'compositionupdate',\n    'compositionend',\n    'cuechange',\n    'click',\n    'close',\n    'contextmenu',\n    'curechange',\n    'dblclick',\n    'drag',\n    'dragend',\n    'dragenter',\n    'dragexit',\n    'dragleave',\n    'dragover',\n    'drop',\n    'durationchange',\n    'emptied',\n    'ended',\n    'error',\n    'focus',\n    'focusin',\n    'focusout',\n    'gotpointercapture',\n    'input',\n    'invalid',\n    'keydown',\n    'keypress',\n    'keyup',\n    'load',\n    'loadstart',\n    'loadeddata',\n    'loadedmetadata',\n    'lostpointercapture',\n    'mousedown',\n    'mouseenter',\n    'mouseleave',\n    'mousemove',\n    'mouseout',\n    'mouseover',\n    'mouseup',\n    'mousewheel',\n    'orientationchange',\n    'pause',\n    'play',\n    'playing',\n    'pointercancel',\n    'pointerdown',\n    'pointerenter',\n    'pointerleave',\n    'pointerlockchange',\n    'mozpointerlockchange',\n    'webkitpointerlockerchange',\n    'pointerlockerror',\n    'mozpointerlockerror',\n    'webkitpointerlockerror',\n    'pointermove',\n    'pointout',\n    'pointerover',\n    'pointerup',\n    'progress',\n    'ratechange',\n    'reset',\n    'resize',\n    'scroll',\n    'seeked',\n    'seeking',\n    'select',\n    'selectionchange',\n    'selectstart',\n    'show',\n    'sort',\n    'stalled',\n    'submit',\n    'suspend',\n    'timeupdate',\n    'volumechange',\n    'touchcancel',\n    'touchmove',\n    'touchstart',\n    'touchend',\n    'transitioncancel',\n    'transitionend',\n    'waiting',\n    'wheel'\n];\nvar documentEventNames = [\n    'afterscriptexecute', 'beforescriptexecute', 'DOMContentLoaded', 'fullscreenchange',\n    'mozfullscreenchange', 'webkitfullscreenchange', 'msfullscreenchange', 'fullscreenerror',\n    'mozfullscreenerror', 'webkitfullscreenerror', 'msfullscreenerror', 'readystatechange',\n    'visibilitychange'\n];\nvar windowEventNames = [\n    'absolutedeviceorientation',\n    'afterinput',\n    'afterprint',\n    'appinstalled',\n    'beforeinstallprompt',\n    'beforeprint',\n    'beforeunload',\n    'devicelight',\n    'devicemotion',\n    'deviceorientation',\n    'deviceorientationabsolute',\n    'deviceproximity',\n    'hashchange',\n    'languagechange',\n    'message',\n    'mozbeforepaint',\n    'offline',\n    'online',\n    'paint',\n    'pageshow',\n    'pagehide',\n    'popstate',\n    'rejectionhandled',\n    'storage',\n    'unhandledrejection',\n    'unload',\n    'userproximity',\n    'vrdisplyconnected',\n    'vrdisplaydisconnected',\n    'vrdisplaypresentchange'\n];\nvar htmlElementEventNames = [\n    'beforecopy', 'beforecut', 'beforepaste', 'copy', 'cut', 'paste', 'dragstart', 'loadend',\n    'animationstart', 'search', 'transitionrun', 'transitionstart', 'webkitanimationend',\n    'webkitanimationiteration', 'webkitanimationstart', 'webkittransitionend'\n];\nvar mediaElementEventNames = ['encrypted', 'waitingforkey', 'msneedkey', 'mozinterruptbegin', 'mozinterruptend'];\nvar ieElementEventNames = [\n    'activate',\n    'afterupdate',\n    'ariarequest',\n    'beforeactivate',\n    'beforedeactivate',\n    'beforeeditfocus',\n    'beforeupdate',\n    'cellchange',\n    'controlselect',\n    'dataavailable',\n    'datasetchanged',\n    'datasetcomplete',\n    'errorupdate',\n    'filterchange',\n    'layoutcomplete',\n    'losecapture',\n    'move',\n    'moveend',\n    'movestart',\n    'propertychange',\n    'resizeend',\n    'resizestart',\n    'rowenter',\n    'rowexit',\n    'rowsdelete',\n    'rowsinserted',\n    'command',\n    'compassneedscalibration',\n    'deactivate',\n    'help',\n    'mscontentzoom',\n    'msmanipulationstatechanged',\n    'msgesturechange',\n    'msgesturedoubletap',\n    'msgestureend',\n    'msgesturehold',\n    'msgesturestart',\n    'msgesturetap',\n    'msgotpointercapture',\n    'msinertiastart',\n    'mslostpointercapture',\n    'mspointercancel',\n    'mspointerdown',\n    'mspointerenter',\n    'mspointerhover',\n    'mspointerleave',\n    'mspointermove',\n    'mspointerout',\n    'mspointerover',\n    'mspointerup',\n    'pointerout',\n    'mssitemodejumplistitemremoved',\n    'msthumbnailclick',\n    'stop',\n    'storagecommit'\n];\nvar webglEventNames = ['webglcontextrestored', 'webglcontextlost', 'webglcontextcreationerror'];\nvar formEventNames = ['autocomplete', 'autocompleteerror'];\nvar detailEventNames = ['toggle'];\nvar frameEventNames = ['load'];\nvar frameSetEventNames = ['blur', 'error', 'focus', 'load', 'resize', 'scroll', 'messageerror'];\nvar marqueeEventNames = ['bounce', 'finish', 'start'];\nvar XMLHttpRequestEventNames = [\n    'loadstart', 'progress', 'abort', 'error', 'load', 'progress', 'timeout', 'loadend',\n    'readystatechange'\n];\nvar IDBIndexEventNames = ['upgradeneeded', 'complete', 'abort', 'success', 'error', 'blocked', 'versionchange', 'close'];\nvar websocketEventNames = ['close', 'error', 'open', 'message'];\nvar workerEventNames = ['error', 'message'];\nvar eventNames = globalEventHandlersEventNames.concat(webglEventNames, formEventNames, detailEventNames, documentEventNames, windowEventNames, htmlElementEventNames, ieElementEventNames);\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties) {\n        return onProperties;\n    }\n    var tip = ignoreProperties.filter(function (ip) { return ip.target === target; });\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    var targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(function (op) { return targetIgnoreProperties.indexOf(op) === -1; });\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    var filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    var supportsWebSocket = typeof WebSocket !== 'undefined';\n    if (canPatchViaPropertyDescriptor()) {\n        var ignoreProperties = _global.__Zone_ignore_on_properties;\n        // for browsers that we can patch the descriptor:  Chrome & Firefox\n        if (isBrowser) {\n            // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n            // so we need to pass WindowPrototype to check onProp exist or not\n            patchFilteredProperties(window, eventNames.concat(['messageerror']), ignoreProperties, Object.getPrototypeOf(window));\n            patchFilteredProperties(Document.prototype, eventNames, ignoreProperties);\n            if (typeof window['SVGElement'] !== 'undefined') {\n                patchFilteredProperties(window['SVGElement'].prototype, eventNames, ignoreProperties);\n            }\n            patchFilteredProperties(Element.prototype, eventNames, ignoreProperties);\n            patchFilteredProperties(HTMLElement.prototype, eventNames, ignoreProperties);\n            patchFilteredProperties(HTMLMediaElement.prototype, mediaElementEventNames, ignoreProperties);\n            patchFilteredProperties(HTMLFrameSetElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n            patchFilteredProperties(HTMLBodyElement.prototype, windowEventNames.concat(frameSetEventNames), ignoreProperties);\n            patchFilteredProperties(HTMLFrameElement.prototype, frameEventNames, ignoreProperties);\n            patchFilteredProperties(HTMLIFrameElement.prototype, frameEventNames, ignoreProperties);\n            var HTMLMarqueeElement_1 = window['HTMLMarqueeElement'];\n            if (HTMLMarqueeElement_1) {\n                patchFilteredProperties(HTMLMarqueeElement_1.prototype, marqueeEventNames, ignoreProperties);\n            }\n            var Worker_1 = window['Worker'];\n            if (Worker_1) {\n                patchFilteredProperties(Worker_1.prototype, workerEventNames, ignoreProperties);\n            }\n        }\n        patchFilteredProperties(XMLHttpRequest.prototype, XMLHttpRequestEventNames, ignoreProperties);\n        var XMLHttpRequestEventTarget = _global['XMLHttpRequestEventTarget'];\n        if (XMLHttpRequestEventTarget) {\n            patchFilteredProperties(XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype, XMLHttpRequestEventNames, ignoreProperties);\n        }\n        if (typeof IDBIndex !== 'undefined') {\n            patchFilteredProperties(IDBIndex.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBOpenDBRequest.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBDatabase.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBTransaction.prototype, IDBIndexEventNames, ignoreProperties);\n            patchFilteredProperties(IDBCursor.prototype, IDBIndexEventNames, ignoreProperties);\n        }\n        if (supportsWebSocket) {\n            patchFilteredProperties(WebSocket.prototype, websocketEventNames, ignoreProperties);\n        }\n    }\n    else {\n        // Safari, Android browsers (Jelly Bean)\n        patchViaCapturingAllTheEvents();\n        patchClass('XMLHttpRequest');\n        if (supportsWebSocket) {\n            apply(api, _global);\n        }\n    }\n}\nfunction canPatchViaPropertyDescriptor() {\n    if ((isBrowser || isMix) && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&\n        typeof Element !== 'undefined') {\n        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364\n        // IDL interface attributes are not configurable\n        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');\n        if (desc && !desc.configurable)\n            return false;\n    }\n    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');\n    // add enumerable and configurable here because in opera\n    // by default XMLHttpRequest.prototype.onreadystatechange is undefined\n    // without adding enumerable and configurable will cause onreadystatechange\n    // non-configurable\n    // and if XMLHttpRequest.prototype.onreadystatechange is undefined,\n    // we should set a real desc instead a fake one\n    if (xhrDesc) {\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return true;\n            }\n        });\n        var req = new XMLHttpRequest();\n        var result = !!req.onreadystatechange;\n        // restore original desc\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});\n        return result;\n    }\n    else {\n        var SYMBOL_FAKE_ONREADYSTATECHANGE_1 = zoneSymbol('fakeonreadystatechange');\n        Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {\n            enumerable: true,\n            configurable: true,\n            get: function () {\n                return this[SYMBOL_FAKE_ONREADYSTATECHANGE_1];\n            },\n            set: function (value) {\n                this[SYMBOL_FAKE_ONREADYSTATECHANGE_1] = value;\n            }\n        });\n        var req = new XMLHttpRequest();\n        var detectFunc = function () { };\n        req.onreadystatechange = detectFunc;\n        var result = req[SYMBOL_FAKE_ONREADYSTATECHANGE_1] === detectFunc;\n        req.onreadystatechange = null;\n        return result;\n    }\n}\n\nvar unboundKey = zoneSymbol('unbound');\n// Whenever any eventListener fires, we check the eventListener target and all parents\n// for `onwhatever` properties and replace them with zone-bound functions\n// - Chrome (for now)\nfunction patchViaCapturingAllTheEvents() {\n    var _loop_1 = function (i) {\n        var property = eventNames[i];\n        var onproperty = 'on' + property;\n        self.addEventListener(property, function (event) {\n            var elt = event.target, bound, source;\n            if (elt) {\n                source = elt.constructor['name'] + '.' + onproperty;\n            }\n            else {\n                source = 'unknown.' + onproperty;\n            }\n            while (elt) {\n                if (elt[onproperty] && !elt[onproperty][unboundKey]) {\n                    bound = Zone.current.wrap(elt[onproperty], source);\n                    bound[unboundKey] = elt[onproperty];\n                    elt[onproperty] = bound;\n                }\n                elt = elt.parentElement;\n            }\n        }, true);\n    };\n    for (var i = 0; i < eventNames.length; i++) {\n        _loop_1(i);\n    }\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';\n    var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'\n        .split(',');\n    var EVENT_TARGET = 'EventTarget';\n    var apis = [];\n    var isWtf = _global['wtf'];\n    var WTF_ISSUE_555_ARRAY = WTF_ISSUE_555.split(',');\n    if (isWtf) {\n        // Workaround for: https://github.com/google/tracing-framework/issues/555\n        apis = WTF_ISSUE_555_ARRAY.map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);\n    }\n    else if (_global[EVENT_TARGET]) {\n        apis.push(EVENT_TARGET);\n    }\n    else {\n        // Note: EventTarget is not available in all browsers,\n        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget\n        apis = NO_EVENT_TARGET;\n    }\n    var isDisableIECheck = _global['__Zone_disable_IE_check'] || false;\n    var isEnableCrossContextCheck = _global['__Zone_enable_cross_context_check'] || false;\n    var ieOrEdge = isIEOrEdge();\n    var ADD_EVENT_LISTENER_SOURCE = '.addEventListener:';\n    var FUNCTION_WRAPPER = '[object FunctionWrapper]';\n    var BROWSER_TOOLS = 'function __BROWSERTOOLS_CONSOLE_SAFEFUNC() { [native code] }';\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (var i = 0; i < eventNames.length; i++) {\n        var eventName = eventNames[i];\n        var falseEventName = eventName + FALSE_STR;\n        var trueEventName = eventName + TRUE_STR;\n        var symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        var symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames$1[eventName] = {};\n        zoneSymbolEventNames$1[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames$1[eventName][TRUE_STR] = symbolCapture;\n    }\n    //  predefine all task.source string\n    for (var i = 0; i < WTF_ISSUE_555.length; i++) {\n        var target = WTF_ISSUE_555_ARRAY[i];\n        var targets = globalSources[target] = {};\n        for (var j = 0; j < eventNames.length; j++) {\n            var eventName = eventNames[j];\n            targets[eventName] = target + ADD_EVENT_LISTENER_SOURCE + eventName;\n        }\n    }\n    var checkIEAndCrossContext = function (nativeDelegate, delegate, target, args) {\n        if (!isDisableIECheck && ieOrEdge) {\n            if (isEnableCrossContextCheck) {\n                try {\n                    var testString = delegate.toString();\n                    if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {\n                        nativeDelegate.apply(target, args);\n                        return false;\n                    }\n                }\n                catch (error) {\n                    nativeDelegate.apply(target, args);\n                    return false;\n                }\n            }\n            else {\n                var testString = delegate.toString();\n                if ((testString === FUNCTION_WRAPPER || testString == BROWSER_TOOLS)) {\n                    nativeDelegate.apply(target, args);\n                    return false;\n                }\n            }\n        }\n        else if (isEnableCrossContextCheck) {\n            try {\n                delegate.toString();\n            }\n            catch (error) {\n                nativeDelegate.apply(target, args);\n                return false;\n            }\n        }\n        return true;\n    };\n    var apiTypes = [];\n    for (var i = 0; i < apis.length; i++) {\n        var type = _global[apis[i]];\n        apiTypes.push(type && type.prototype);\n    }\n    patchEventTarget(_global, apiTypes, { validateHandler: checkIEAndCrossContext });\n    api.patchEventTarget = patchEventTarget;\n    return true;\n}\nfunction patchEvent(global, api) {\n    patchEventPrototype(global, api);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction registerElementPatch(_global) {\n    if ((!isBrowser && !isMix) || !('registerElement' in _global.document)) {\n        return;\n    }\n    var _registerElement = document.registerElement;\n    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];\n    document.registerElement = function (name, opts) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                var source = 'Document.registerElement::' + callback;\n                if (opts.prototype.hasOwnProperty(callback)) {\n                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);\n                    if (descriptor && descriptor.value) {\n                        descriptor.value = Zone.current.wrap(descriptor.value, source);\n                        _redefineProperty(opts.prototype, callback, descriptor);\n                    }\n                    else {\n                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n                    }\n                }\n                else if (opts.prototype[callback]) {\n                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);\n                }\n            });\n        }\n        return _registerElement.apply(document, [name, opts]);\n    };\n    attachOriginToPatched(document.registerElement, _registerElement);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview\n * @suppress {missingRequire}\n */\nZone.__load_patch('util', function (global, Zone, api) {\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n});\nZone.__load_patch('timers', function (global, Zone, api) {\n    var set = 'set';\n    var clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', function (global, Zone, api) {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', function (global, Zone, api) {\n    var blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (var i = 0; i < blockingMethods.length; i++) {\n        var name_1 = blockingMethods[i];\n        patchMethod(global, name_1, function (delegate, symbol, name) {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', function (global, Zone, api) {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    var XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, [XMLHttpRequestEventTarget.prototype]);\n    }\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n    patchClass('IntersectionObserver');\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', function (global, Zone, api) {\n    propertyDescriptorPatch(api, global);\n    propertyPatch();\n    registerElementPatch(global);\n});\nZone.__load_patch('canvas', function (global, Zone, api) {\n    var HTMLCanvasElement = global['HTMLCanvasElement'];\n    if (typeof HTMLCanvasElement !== 'undefined' && HTMLCanvasElement.prototype &&\n        HTMLCanvasElement.prototype.toBlob) {\n        patchMacroTask(HTMLCanvasElement.prototype, 'toBlob', function (self, args) {\n            return { name: 'HTMLCanvasElement.toBlob', target: self, callbackIndex: 0, args: args };\n        });\n    }\n});\nZone.__load_patch('XHR', function (global, Zone, api) {\n    // Treat XMLHTTPRequest as a macrotask.\n    patchXHR(global);\n    var XHR_TASK = zoneSymbol('xhrTask');\n    var XHR_SYNC = zoneSymbol('xhrSync');\n    var XHR_LISTENER = zoneSymbol('xhrListener');\n    var XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    var XHR_URL = zoneSymbol('xhrURL');\n    function patchXHR(window) {\n        function findPendingTask(target) {\n            var pendingTask = target[XHR_TASK];\n            return pendingTask;\n        }\n        var SYMBOL_ADDEVENTLISTENER = zoneSymbol('addEventListener');\n        var SYMBOL_REMOVEEVENTLISTENER = zoneSymbol('removeEventListener');\n        var oriAddListener = XMLHttpRequest.prototype[SYMBOL_ADDEVENTLISTENER];\n        var oriRemoveListener = XMLHttpRequest.prototype[SYMBOL_REMOVEEVENTLISTENER];\n        if (!oriAddListener) {\n            var XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                oriAddListener = XMLHttpRequestEventTarget.prototype[SYMBOL_ADDEVENTLISTENER];\n                oriRemoveListener = XMLHttpRequestEventTarget.prototype[SYMBOL_REMOVEEVENTLISTENER];\n            }\n        }\n        var READY_STATE_CHANGE = 'readystatechange';\n        var SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            XMLHttpRequest[XHR_SCHEDULED] = false;\n            var data = task.data;\n            var target = data.target;\n            // remove existing event listener\n            var listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[SYMBOL_ADDEVENTLISTENER];\n                oriRemoveListener = target[SYMBOL_REMOVEEVENTLISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.apply(target, [READY_STATE_CHANGE, listener]);\n            }\n            var newListener = target[XHR_LISTENER] = function () {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && XMLHttpRequest[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        task.invoke();\n                    }\n                }\n            };\n            oriAddListener.apply(target, [READY_STATE_CHANGE, newListener]);\n            var storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            XMLHttpRequest[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            var data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        }; });\n        var XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {\n            var zone = Zone.current;\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                var options = {\n                    target: self,\n                    url: self[XHR_URL],\n                    isPeriodic: false,\n                    delay: null,\n                    args: args,\n                    aborted: false\n                };\n                return zone.scheduleMacroTask(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n            }\n        }; });\n        var STRING_TYPE = 'string';\n        var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {\n            var task = findPendingTask(self);\n            if (task && typeof task.type == STRING_TYPE) {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        }; });\n    }\n});\nZone.__load_patch('geolocation', function (global, Zone, api) {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', function (global, Zone, api) {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            var eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(function (eventTask) {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                var PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    var evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n})));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /Users/twer/private/GDE/angular/aio/node_modules/zone.js/dist/zone.js\n// module id = eFQL\n// module chunks = 2","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = fRUx\n// module chunks = 1 2","// This is for the production site, which is hosted at https://angular.io\nexport const environment = {\n  gaId: 'UA-80456300-1', // Production id\n  production: true,\n  mode: 'stable'\n};\n\n\n\n// WEBPACK FOOTER //\n// /Users/twer/private/GDE/angular/aio/src/environments/environment.ts"],"sourceRoot":"webpack:///"}